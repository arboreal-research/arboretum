#include "arboretum_data_model.h"
#include "arboretum_ffi.h"

#include <iostream>
#include <iomanip>

namespace arboretum {

DataModel::DataModel() {

  // Meta
  meta_class_ = arboretum_create_named_node("/meta/class");
  meta_method_ = arboretum_create_named_node("/meta/method");
  meta_domain_ = arboretum_create_named_node("/meta/domain");
  meta_range_ = arboretum_create_named_node("/meta/range");

  builtin_string_class_ = arboretum_create_named_node("/builtin/string");
  builtin_u64_class_ = arboretum_create_named_node("/builtin/u64");
  builtin_i64_class_ = arboretum_create_named_node("/builtin/i64");
  builtin_double_class_ = arboretum_create_named_node("/builtin/dbl");

  // List
  builtin_list_class_ = arboretum_create_named_node("/builtin/list");
  builtin_list_size_ = arboretum_create_named_node("/builtin/list/size");
  builtin_list_item_class_ =
      arboretum_create_named_node("/builtin/list/item_class");

  // Set
  builtin_set_class_ = arboretum_create_named_node("/builtin/set");
  builtin_set_size_ = arboretum_create_named_node("/builtin/set/size");
  builtin_set_item_ = arboretum_create_named_node("/builtin/set/item");
  builtin_set_item_class_ =
      arboretum_create_named_node("/builtin/set/item_class");

  // Invalid
  invalid_file_ = arboretum_create_named_node("/invalid/file");
  invalid_source_location_ =
      arboretum_create_named_node("/invalid/clang/SourceLocation");

  // File
  file_class_ = arboretum_create_named_node("/file");
  file_name_ = arboretum_create_named_node("/file/name");
  file_content_ = arboretum_create_named_node("/file/content");

  // Source Location
  source_location_class_ = arboretum_create_named_node("/clang/SourceLocation");
  source_location_is_file =
      arboretum_create_named_node("/clang/SourceLocation/is_file");
  source_location_file_ =
      arboretum_create_named_node("/clang/SourceLocation/file");
  source_location_line_ =
      arboretum_create_named_node("/clang/SourceLocation/line");
  source_location_column_ =
      arboretum_create_named_node("/clang/SourceLocation/column");
  source_location_expansion_loc_ =
      arboretum_create_named_node("/clang/SourceLocation/expansion_loc");
  source_location_spelling_loc_ =
      arboretum_create_named_node("/clang/SourceLocation/spelling_loc");

  // Source Range
  source_range_class_ = arboretum_create_named_node("/clang/SourceRange");
  source_range_begin_ = arboretum_create_named_node("/clang/SourceRange/begin");
  source_range_end_ = arboretum_create_named_node("/clang/SourceLocation/end");

  // QualType
  qualtype_class_ = arboretum_create_named_node("/clang/QualType");
  qualtype_is_const_ = arboretum_create_named_node("/clang/QualType/is_const");
  qualtype_is_volatile_ =
      arboretum_create_named_node("/clang/QualType/is_volatile");
  qualtype_is_restrict_ =
      arboretum_create_named_node("/clang/QualType/is_restrict");
  qualtype_type_ = arboretum_create_named_node("/clang/Qualtype/type");
}

Entity *DataModel::arboretum_node_for(bool b) {
  if (b) {
    return arboretum_create_named_node("true");
  } else {
    return arboretum_create_named_node("false");
  }
}

Entity *DataModel::arboretum_node_for(const std::string &s) {
  return arboretum_create_named_node(s.c_str());
}

Entity *DataModel::arboretum_node_for(const char *s) {
  return arboretum_create_named_node(s);
}

Entity *DataModel::arboretum_node_for(uint64_t i) {
  return arboretum_get_ulid_node(0, i);
}

Entity *DataModel::arboretum_node_for(int64_t i) {
  return arboretum_get_ulid_node(1, static_cast<uint64_t>(i));
}

Entity *DataModel::arboretum_node_for(double d) {
  return arboretum_get_ulid_node(2, static_cast<uint64_t>(d));
}

Entity *DataModel::arboretum_node_for(Entity *item_class,
                                      const std::vector<Entity *> &v) {
  Entity *result = arboretum_create_nameless_node();

  // Nameless node props
  arboretum_create_edge(result, meta_class_, builtin_list_class_);
  arboretum_create_edge(result, builtin_list_size_,
                        arboretum_node_for(v.size()));
  arboretum_create_edge(result, builtin_list_item_class_, item_class);

  for (size_t i = 0; i < v.size(); ++i) {
    arboretum_create_edge(result, arboretum_node_for(i), v[i]);
  }

  return result;
}

Entity *DataModel::arboretum_node_for(Entity *item_class,
                                      const std::unordered_set<Entity *> &s) {
  Entity *result = arboretum_create_nameless_node();
  arboretum_create_edge(result, meta_class_, builtin_set_class_);
  arboretum_create_edge(result, builtin_set_item_class_, item_class);
  arboretum_create_edge(result, builtin_set_size_,
                        arboretum_node_for(s.size()));

  for (auto e : s) {
    arboretum_create_edge(result, builtin_set_item_, e);
  }

  return result;
}

//// BEGIN ARBORETUM GENERATED CODE ////
DataModel EmitDataModel() {
  DataModel data_model;

  data_model.CXXStdInitializerListExpr = arboretum_create_named_node("/clang/CXXStdInitializerListExpr");
  arboretum_create_edge(data_model.CXXStdInitializerListExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr1 = arboretum_create_named_node("/clang/CXXStdInitializerListExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr1);
      data_model.getBeginLoc = arboretum_create_named_node("/clang/CXXStdInitializerListExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc);
      data_model.getEndLoc = arboretum_create_named_node("/clang/CXXStdInitializerListExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc);
      data_model.getSourceRange = arboretum_create_named_node("/clang/CXXStdInitializerListExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange);
      data_model.children1 = arboretum_create_named_node("/clang/CXXStdInitializerListExpr/children");
      methods.push_back(data_model.children1);
    arboretum_create_edge(data_model.CXXStdInitializerListExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCSelectorExpr = arboretum_create_named_node("/clang/ObjCSelectorExpr");
  arboretum_create_edge(data_model.ObjCSelectorExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCSelectorExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetTeamsDistributeSimdDirective = arboretum_create_named_node("/clang/OMPTargetTeamsDistributeSimdDirective");
  arboretum_create_edge(data_model.OMPTargetTeamsDistributeSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetTeamsDistributeSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Expr = arboretum_create_named_node("/clang/Expr");
  arboretum_create_edge(data_model.Expr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getType = arboretum_create_named_node("/clang/Expr/getType");
      methods.push_back(data_model.getType);
      data_model.getDependence = arboretum_create_named_node("/clang/Expr/getDependence");
      methods.push_back(data_model.getDependence);
      data_model.isValueDependent = arboretum_create_named_node("/clang/Expr/isValueDependent");
      methods.push_back(data_model.isValueDependent);
      data_model.isTypeDependent = arboretum_create_named_node("/clang/Expr/isTypeDependent");
      methods.push_back(data_model.isTypeDependent);
      data_model.isInstantiationDependent = arboretum_create_named_node("/clang/Expr/isInstantiationDependent");
      methods.push_back(data_model.isInstantiationDependent);
      data_model.containsUnexpandedParameterPack = arboretum_create_named_node("/clang/Expr/containsUnexpandedParameterPack");
      methods.push_back(data_model.containsUnexpandedParameterPack);
      data_model.containsErrors = arboretum_create_named_node("/clang/Expr/containsErrors");
      methods.push_back(data_model.containsErrors);
      data_model.getExprLoc = arboretum_create_named_node("/clang/Expr/getExprLoc");
      methods.push_back(data_model.getExprLoc);
      data_model.isReadIfDiscardedInCPlusPlus11 = arboretum_create_named_node("/clang/Expr/isReadIfDiscardedInCPlusPlus11");
      methods.push_back(data_model.isReadIfDiscardedInCPlusPlus11);
      data_model.isLValue = arboretum_create_named_node("/clang/Expr/isLValue");
      methods.push_back(data_model.isLValue);
      data_model.isPRValue = arboretum_create_named_node("/clang/Expr/isPRValue");
      methods.push_back(data_model.isPRValue);
      data_model.isXValue = arboretum_create_named_node("/clang/Expr/isXValue");
      methods.push_back(data_model.isXValue);
      data_model.isGLValue = arboretum_create_named_node("/clang/Expr/isGLValue");
      methods.push_back(data_model.isGLValue);
      data_model.getValueKind = arboretum_create_named_node("/clang/Expr/getValueKind");
      methods.push_back(data_model.getValueKind);
      data_model.getObjectKind = arboretum_create_named_node("/clang/Expr/getObjectKind");
      methods.push_back(data_model.getObjectKind);
      data_model.isOrdinaryOrBitFieldObject = arboretum_create_named_node("/clang/Expr/isOrdinaryOrBitFieldObject");
      methods.push_back(data_model.isOrdinaryOrBitFieldObject);
      data_model.refersToBitField = arboretum_create_named_node("/clang/Expr/refersToBitField");
      methods.push_back(data_model.refersToBitField);
      data_model.getSourceBitField1 = arboretum_create_named_node("/clang/Expr/getSourceBitField");
      methods.push_back(data_model.getSourceBitField1);
      data_model.getReferencedDeclOfCallee1 = arboretum_create_named_node("/clang/Expr/getReferencedDeclOfCallee");
      methods.push_back(data_model.getReferencedDeclOfCallee1);
      data_model.getObjCProperty = arboretum_create_named_node("/clang/Expr/getObjCProperty");
      methods.push_back(data_model.getObjCProperty);
      data_model.isObjCSelfExpr = arboretum_create_named_node("/clang/Expr/isObjCSelfExpr");
      methods.push_back(data_model.isObjCSelfExpr);
      data_model.refersToVectorElement = arboretum_create_named_node("/clang/Expr/refersToVectorElement");
      methods.push_back(data_model.refersToVectorElement);
      data_model.refersToMatrixElement = arboretum_create_named_node("/clang/Expr/refersToMatrixElement");
      methods.push_back(data_model.refersToMatrixElement);
      data_model.refersToGlobalRegisterVar = arboretum_create_named_node("/clang/Expr/refersToGlobalRegisterVar");
      methods.push_back(data_model.refersToGlobalRegisterVar);
      data_model.hasPlaceholderType = arboretum_create_named_node("/clang/Expr/hasPlaceholderType");
      methods.push_back(data_model.hasPlaceholderType);
      data_model.IgnoreUnlessSpelledInSource1 = arboretum_create_named_node("/clang/Expr/IgnoreUnlessSpelledInSource");
      methods.push_back(data_model.IgnoreUnlessSpelledInSource1);
      data_model.IgnoreImpCasts1 = arboretum_create_named_node("/clang/Expr/IgnoreImpCasts");
      methods.push_back(data_model.IgnoreImpCasts1);
      data_model.IgnoreCasts1 = arboretum_create_named_node("/clang/Expr/IgnoreCasts");
      methods.push_back(data_model.IgnoreCasts1);
      data_model.IgnoreImplicit1 = arboretum_create_named_node("/clang/Expr/IgnoreImplicit");
      methods.push_back(data_model.IgnoreImplicit1);
      data_model.IgnoreImplicitAsWritten1 = arboretum_create_named_node("/clang/Expr/IgnoreImplicitAsWritten");
      methods.push_back(data_model.IgnoreImplicitAsWritten1);
      data_model.IgnoreParens1 = arboretum_create_named_node("/clang/Expr/IgnoreParens");
      methods.push_back(data_model.IgnoreParens1);
      data_model.IgnoreParenImpCasts1 = arboretum_create_named_node("/clang/Expr/IgnoreParenImpCasts");
      methods.push_back(data_model.IgnoreParenImpCasts1);
      data_model.IgnoreParenCasts1 = arboretum_create_named_node("/clang/Expr/IgnoreParenCasts");
      methods.push_back(data_model.IgnoreParenCasts1);
      data_model.IgnoreConversionOperatorSingleStep1 = arboretum_create_named_node("/clang/Expr/IgnoreConversionOperatorSingleStep");
      methods.push_back(data_model.IgnoreConversionOperatorSingleStep1);
      data_model.IgnoreParenLValueCasts1 = arboretum_create_named_node("/clang/Expr/IgnoreParenLValueCasts");
      methods.push_back(data_model.IgnoreParenLValueCasts1);
      data_model.IgnoreParenBaseCasts1 = arboretum_create_named_node("/clang/Expr/IgnoreParenBaseCasts");
      methods.push_back(data_model.IgnoreParenBaseCasts1);
      data_model.isDefaultArgument = arboretum_create_named_node("/clang/Expr/isDefaultArgument");
      methods.push_back(data_model.isDefaultArgument);
      data_model.isImplicitCXXThis = arboretum_create_named_node("/clang/Expr/isImplicitCXXThis");
      methods.push_back(data_model.isImplicitCXXThis);
      data_model.getBestDynamicClassType = arboretum_create_named_node("/clang/Expr/getBestDynamicClassType");
      methods.push_back(data_model.getBestDynamicClassType);
      data_model.getBestDynamicClassTypeExpr = arboretum_create_named_node("/clang/Expr/getBestDynamicClassTypeExpr");
      methods.push_back(data_model.getBestDynamicClassTypeExpr);
      data_model.skipRValueSubobjectAdjustments1 = arboretum_create_named_node("/clang/Expr/skipRValueSubobjectAdjustments");
      methods.push_back(data_model.skipRValueSubobjectAdjustments1);
    arboretum_create_edge(data_model.Expr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXParenListInitExpr = arboretum_create_named_node("/clang/CXXParenListInitExpr");
  arboretum_create_edge(data_model.CXXParenListInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInitExprs1 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getInitExprs");
      methods.push_back(data_model.getInitExprs1);
      data_model.getUserSpecifiedInitExprs1 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getUserSpecifiedInitExprs");
      methods.push_back(data_model.getUserSpecifiedInitExprs1);
      data_model.getBeginLoc2 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc2);
      data_model.getEndLoc2 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc2);
      data_model.getInitLoc = arboretum_create_named_node("/clang/CXXParenListInitExpr/getInitLoc");
      methods.push_back(data_model.getInitLoc);
      data_model.getSourceRange1 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange1);
      data_model.getArrayFiller1 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getArrayFiller");
      methods.push_back(data_model.getArrayFiller1);
      data_model.getInitializedFieldInUnion1 = arboretum_create_named_node("/clang/CXXParenListInitExpr/getInitializedFieldInUnion");
      methods.push_back(data_model.getInitializedFieldInUnion1);
      data_model.children5 = arboretum_create_named_node("/clang/CXXParenListInitExpr/children");
      methods.push_back(data_model.children5);
    arboretum_create_edge(data_model.CXXParenListInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ForStmt = arboretum_create_named_node("/clang/ForStmt");
  arboretum_create_edge(data_model.ForStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getConditionVariable = arboretum_create_named_node("/clang/ForStmt/getConditionVariable");
      methods.push_back(data_model.getConditionVariable);
      data_model.getConditionVariableDeclStmt1 = arboretum_create_named_node("/clang/ForStmt/getConditionVariableDeclStmt");
      methods.push_back(data_model.getConditionVariableDeclStmt1);
      data_model.getInit1 = arboretum_create_named_node("/clang/ForStmt/getInit");
      methods.push_back(data_model.getInit1);
      data_model.getCond1 = arboretum_create_named_node("/clang/ForStmt/getCond");
      methods.push_back(data_model.getCond1);
      data_model.getInc1 = arboretum_create_named_node("/clang/ForStmt/getInc");
      methods.push_back(data_model.getInc1);
      data_model.getBody1 = arboretum_create_named_node("/clang/ForStmt/getBody");
      methods.push_back(data_model.getBody1);
      data_model.getForLoc = arboretum_create_named_node("/clang/ForStmt/getForLoc");
      methods.push_back(data_model.getForLoc);
      data_model.getLParenLoc = arboretum_create_named_node("/clang/ForStmt/getLParenLoc");
      methods.push_back(data_model.getLParenLoc);
      data_model.getRParenLoc1 = arboretum_create_named_node("/clang/ForStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc1);
      data_model.getBeginLoc3 = arboretum_create_named_node("/clang/ForStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc3);
      data_model.getEndLoc3 = arboretum_create_named_node("/clang/ForStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc3);
      data_model.children7 = arboretum_create_named_node("/clang/ForStmt/children");
      methods.push_back(data_model.children7);
    arboretum_create_edge(data_model.ForStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTaskgroupDirective = arboretum_create_named_node("/clang/OMPTaskgroupDirective");
  arboretum_create_edge(data_model.OMPTaskgroupDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTaskgroupDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelMaskedTaskLoopSimdDirective = arboretum_create_named_node("/clang/OMPParallelMaskedTaskLoopSimdDirective");
  arboretum_create_edge(data_model.OMPParallelMaskedTaskLoopSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelMaskedTaskLoopSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GCCAsmStmt = arboretum_create_named_node("/clang/GCCAsmStmt");
  arboretum_create_edge(data_model.GCCAsmStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getRParenLoc2 = arboretum_create_named_node("/clang/GCCAsmStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc2);
      data_model.getAsmString = arboretum_create_named_node("/clang/GCCAsmStmt/getAsmString");
      methods.push_back(data_model.getAsmString);
      data_model.isAsmGoto = arboretum_create_named_node("/clang/GCCAsmStmt/isAsmGoto");
      methods.push_back(data_model.isAsmGoto);
      data_model.getNumLabels = arboretum_create_named_node("/clang/GCCAsmStmt/getNumLabels");
      methods.push_back(data_model.getNumLabels);
      data_model.begin_labels1 = arboretum_create_named_node("/clang/GCCAsmStmt/begin_labels");
      methods.push_back(data_model.begin_labels1);
      data_model.end_labels1 = arboretum_create_named_node("/clang/GCCAsmStmt/end_labels");
      methods.push_back(data_model.end_labels1);
      data_model.labels1 = arboretum_create_named_node("/clang/GCCAsmStmt/labels");
      methods.push_back(data_model.labels1);
      data_model.getBeginLoc4 = arboretum_create_named_node("/clang/GCCAsmStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc4);
      data_model.getEndLoc4 = arboretum_create_named_node("/clang/GCCAsmStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc4);
    arboretum_create_edge(data_model.GCCAsmStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSAsmStmt = arboretum_create_named_node("/clang/MSAsmStmt");
  arboretum_create_edge(data_model.MSAsmStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLBraceLoc = arboretum_create_named_node("/clang/MSAsmStmt/getLBraceLoc");
      methods.push_back(data_model.getLBraceLoc);
      data_model.getEndLoc5 = arboretum_create_named_node("/clang/MSAsmStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc5);
      data_model.hasBraces = arboretum_create_named_node("/clang/MSAsmStmt/hasBraces");
      methods.push_back(data_model.hasBraces);
      data_model.getAsmString2 = arboretum_create_named_node("/clang/MSAsmStmt/getAsmString");
      methods.push_back(data_model.getAsmString2);
      data_model.getAllConstraints = arboretum_create_named_node("/clang/MSAsmStmt/getAllConstraints");
      methods.push_back(data_model.getAllConstraints);
      data_model.getClobbers = arboretum_create_named_node("/clang/MSAsmStmt/getClobbers");
      methods.push_back(data_model.getClobbers);
      data_model.getAllExprs = arboretum_create_named_node("/clang/MSAsmStmt/getAllExprs");
      methods.push_back(data_model.getAllExprs);
      data_model.getBeginLoc5 = arboretum_create_named_node("/clang/MSAsmStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc5);
      data_model.children9 = arboretum_create_named_node("/clang/MSAsmStmt/children");
      methods.push_back(data_model.children9);
    arboretum_create_edge(data_model.MSAsmStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AsmStmt = arboretum_create_named_node("/clang/AsmStmt");
  arboretum_create_edge(data_model.AsmStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAsmLoc = arboretum_create_named_node("/clang/AsmStmt/getAsmLoc");
      methods.push_back(data_model.getAsmLoc);
      data_model.isSimple = arboretum_create_named_node("/clang/AsmStmt/isSimple");
      methods.push_back(data_model.isSimple);
      data_model.isVolatile = arboretum_create_named_node("/clang/AsmStmt/isVolatile");
      methods.push_back(data_model.isVolatile);
      data_model.getBeginLoc6 = arboretum_create_named_node("/clang/AsmStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc6);
      data_model.getEndLoc6 = arboretum_create_named_node("/clang/AsmStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc6);
      data_model.getNumOutputs = arboretum_create_named_node("/clang/AsmStmt/getNumOutputs");
      methods.push_back(data_model.getNumOutputs);
      data_model.getNumPlusOperands = arboretum_create_named_node("/clang/AsmStmt/getNumPlusOperands");
      methods.push_back(data_model.getNumPlusOperands);
      data_model.getNumInputs = arboretum_create_named_node("/clang/AsmStmt/getNumInputs");
      methods.push_back(data_model.getNumInputs);
      data_model.getNumClobbers = arboretum_create_named_node("/clang/AsmStmt/getNumClobbers");
      methods.push_back(data_model.getNumClobbers);
      data_model.begin_inputs1 = arboretum_create_named_node("/clang/AsmStmt/begin_inputs");
      methods.push_back(data_model.begin_inputs1);
      data_model.end_inputs1 = arboretum_create_named_node("/clang/AsmStmt/end_inputs");
      methods.push_back(data_model.end_inputs1);
      data_model.inputs1 = arboretum_create_named_node("/clang/AsmStmt/inputs");
      methods.push_back(data_model.inputs1);
      data_model.begin_outputs1 = arboretum_create_named_node("/clang/AsmStmt/begin_outputs");
      methods.push_back(data_model.begin_outputs1);
      data_model.end_outputs1 = arboretum_create_named_node("/clang/AsmStmt/end_outputs");
      methods.push_back(data_model.end_outputs1);
      data_model.outputs1 = arboretum_create_named_node("/clang/AsmStmt/outputs");
      methods.push_back(data_model.outputs1);
      data_model.children11 = arboretum_create_named_node("/clang/AsmStmt/children");
      methods.push_back(data_model.children11);
    arboretum_create_edge(data_model.AsmStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXBindTemporaryExpr = arboretum_create_named_node("/clang/CXXBindTemporaryExpr");
  arboretum_create_edge(data_model.CXXBindTemporaryExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemporary1 = arboretum_create_named_node("/clang/CXXBindTemporaryExpr/getTemporary");
      methods.push_back(data_model.getTemporary1);
      data_model.getSubExpr2 = arboretum_create_named_node("/clang/CXXBindTemporaryExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr2);
      data_model.getBeginLoc7 = arboretum_create_named_node("/clang/CXXBindTemporaryExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc7);
      data_model.getEndLoc7 = arboretum_create_named_node("/clang/CXXBindTemporaryExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc7);
      data_model.children13 = arboretum_create_named_node("/clang/CXXBindTemporaryExpr/children");
      methods.push_back(data_model.children13);
    arboretum_create_edge(data_model.CXXBindTemporaryExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SEHExceptStmt = arboretum_create_named_node("/clang/SEHExceptStmt");
  arboretum_create_edge(data_model.SEHExceptStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc8 = arboretum_create_named_node("/clang/SEHExceptStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc8);
      data_model.getExceptLoc = arboretum_create_named_node("/clang/SEHExceptStmt/getExceptLoc");
      methods.push_back(data_model.getExceptLoc);
      data_model.getEndLoc8 = arboretum_create_named_node("/clang/SEHExceptStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc8);
      data_model.getFilterExpr = arboretum_create_named_node("/clang/SEHExceptStmt/getFilterExpr");
      methods.push_back(data_model.getFilterExpr);
      data_model.getBlock = arboretum_create_named_node("/clang/SEHExceptStmt/getBlock");
      methods.push_back(data_model.getBlock);
      data_model.children15 = arboretum_create_named_node("/clang/SEHExceptStmt/children");
      methods.push_back(data_model.children15);
    arboretum_create_edge(data_model.SEHExceptStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MemberExpr = arboretum_create_named_node("/clang/MemberExpr");
  arboretum_create_edge(data_model.MemberExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBase = arboretum_create_named_node("/clang/MemberExpr/getBase");
      methods.push_back(data_model.getBase);
      data_model.getMemberDecl = arboretum_create_named_node("/clang/MemberExpr/getMemberDecl");
      methods.push_back(data_model.getMemberDecl);
      data_model.getFoundDecl = arboretum_create_named_node("/clang/MemberExpr/getFoundDecl");
      methods.push_back(data_model.getFoundDecl);
      data_model.hasQualifier = arboretum_create_named_node("/clang/MemberExpr/hasQualifier");
      methods.push_back(data_model.hasQualifier);
      data_model.getQualifierLoc = arboretum_create_named_node("/clang/MemberExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc);
      data_model.getQualifier = arboretum_create_named_node("/clang/MemberExpr/getQualifier");
      methods.push_back(data_model.getQualifier);
      data_model.getTemplateKeywordLoc = arboretum_create_named_node("/clang/MemberExpr/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc);
      data_model.getLAngleLoc = arboretum_create_named_node("/clang/MemberExpr/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc);
      data_model.getRAngleLoc = arboretum_create_named_node("/clang/MemberExpr/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc);
      data_model.hasTemplateKeyword = arboretum_create_named_node("/clang/MemberExpr/hasTemplateKeyword");
      methods.push_back(data_model.hasTemplateKeyword);
      data_model.hasExplicitTemplateArgs = arboretum_create_named_node("/clang/MemberExpr/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs);
      data_model.getTemplateArgs = arboretum_create_named_node("/clang/MemberExpr/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs);
      data_model.getNumTemplateArgs = arboretum_create_named_node("/clang/MemberExpr/getNumTemplateArgs");
      methods.push_back(data_model.getNumTemplateArgs);
      data_model.template_arguments = arboretum_create_named_node("/clang/MemberExpr/template_arguments");
      methods.push_back(data_model.template_arguments);
      data_model.getMemberNameInfo = arboretum_create_named_node("/clang/MemberExpr/getMemberNameInfo");
      methods.push_back(data_model.getMemberNameInfo);
      data_model.getOperatorLoc = arboretum_create_named_node("/clang/MemberExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc);
      data_model.isArrow = arboretum_create_named_node("/clang/MemberExpr/isArrow");
      methods.push_back(data_model.isArrow);
      data_model.getMemberLoc = arboretum_create_named_node("/clang/MemberExpr/getMemberLoc");
      methods.push_back(data_model.getMemberLoc);
      data_model.getBeginLoc9 = arboretum_create_named_node("/clang/MemberExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc9);
      data_model.getEndLoc9 = arboretum_create_named_node("/clang/MemberExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc9);
      data_model.getExprLoc1 = arboretum_create_named_node("/clang/MemberExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc1);
      data_model.isImplicitAccess = arboretum_create_named_node("/clang/MemberExpr/isImplicitAccess");
      methods.push_back(data_model.isImplicitAccess);
      data_model.hadMultipleCandidates = arboretum_create_named_node("/clang/MemberExpr/hadMultipleCandidates");
      methods.push_back(data_model.hadMultipleCandidates);
      data_model.isNonOdrUse = arboretum_create_named_node("/clang/MemberExpr/isNonOdrUse");
      methods.push_back(data_model.isNonOdrUse);
      data_model.children17 = arboretum_create_named_node("/clang/MemberExpr/children");
      methods.push_back(data_model.children17);
    arboretum_create_edge(data_model.MemberExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SEHTryStmt = arboretum_create_named_node("/clang/SEHTryStmt");
  arboretum_create_edge(data_model.SEHTryStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc10 = arboretum_create_named_node("/clang/SEHTryStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc10);
      data_model.getTryLoc = arboretum_create_named_node("/clang/SEHTryStmt/getTryLoc");
      methods.push_back(data_model.getTryLoc);
      data_model.getEndLoc10 = arboretum_create_named_node("/clang/SEHTryStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc10);
      data_model.getIsCXXTry = arboretum_create_named_node("/clang/SEHTryStmt/getIsCXXTry");
      methods.push_back(data_model.getIsCXXTry);
      data_model.getTryBlock = arboretum_create_named_node("/clang/SEHTryStmt/getTryBlock");
      methods.push_back(data_model.getTryBlock);
      data_model.getHandler = arboretum_create_named_node("/clang/SEHTryStmt/getHandler");
      methods.push_back(data_model.getHandler);
      data_model.getExceptHandler = arboretum_create_named_node("/clang/SEHTryStmt/getExceptHandler");
      methods.push_back(data_model.getExceptHandler);
      data_model.getFinallyHandler = arboretum_create_named_node("/clang/SEHTryStmt/getFinallyHandler");
      methods.push_back(data_model.getFinallyHandler);
      data_model.children19 = arboretum_create_named_node("/clang/SEHTryStmt/children");
      methods.push_back(data_model.children19);
    arboretum_create_edge(data_model.SEHTryStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroutineBodyStmt = arboretum_create_named_node("/clang/CoroutineBodyStmt");
  arboretum_create_edge(data_model.CoroutineBodyStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.hasDependentPromiseType = arboretum_create_named_node("/clang/CoroutineBodyStmt/hasDependentPromiseType");
      methods.push_back(data_model.hasDependentPromiseType);
      data_model.getBody2 = arboretum_create_named_node("/clang/CoroutineBodyStmt/getBody");
      methods.push_back(data_model.getBody2);
      data_model.getPromiseDeclStmt = arboretum_create_named_node("/clang/CoroutineBodyStmt/getPromiseDeclStmt");
      methods.push_back(data_model.getPromiseDeclStmt);
      data_model.getPromiseDecl = arboretum_create_named_node("/clang/CoroutineBodyStmt/getPromiseDecl");
      methods.push_back(data_model.getPromiseDecl);
      data_model.getInitSuspendStmt = arboretum_create_named_node("/clang/CoroutineBodyStmt/getInitSuspendStmt");
      methods.push_back(data_model.getInitSuspendStmt);
      data_model.getFinalSuspendStmt = arboretum_create_named_node("/clang/CoroutineBodyStmt/getFinalSuspendStmt");
      methods.push_back(data_model.getFinalSuspendStmt);
      data_model.getExceptionHandler = arboretum_create_named_node("/clang/CoroutineBodyStmt/getExceptionHandler");
      methods.push_back(data_model.getExceptionHandler);
      data_model.getFallthroughHandler = arboretum_create_named_node("/clang/CoroutineBodyStmt/getFallthroughHandler");
      methods.push_back(data_model.getFallthroughHandler);
      data_model.getAllocate = arboretum_create_named_node("/clang/CoroutineBodyStmt/getAllocate");
      methods.push_back(data_model.getAllocate);
      data_model.getDeallocate = arboretum_create_named_node("/clang/CoroutineBodyStmt/getDeallocate");
      methods.push_back(data_model.getDeallocate);
      data_model.getResultDecl = arboretum_create_named_node("/clang/CoroutineBodyStmt/getResultDecl");
      methods.push_back(data_model.getResultDecl);
      data_model.getReturnValueInit = arboretum_create_named_node("/clang/CoroutineBodyStmt/getReturnValueInit");
      methods.push_back(data_model.getReturnValueInit);
      data_model.getReturnValue = arboretum_create_named_node("/clang/CoroutineBodyStmt/getReturnValue");
      methods.push_back(data_model.getReturnValue);
      data_model.getReturnStmt = arboretum_create_named_node("/clang/CoroutineBodyStmt/getReturnStmt");
      methods.push_back(data_model.getReturnStmt);
      data_model.getReturnStmtOnAllocFailure = arboretum_create_named_node("/clang/CoroutineBodyStmt/getReturnStmtOnAllocFailure");
      methods.push_back(data_model.getReturnStmtOnAllocFailure);
      data_model.getParamMoves = arboretum_create_named_node("/clang/CoroutineBodyStmt/getParamMoves");
      methods.push_back(data_model.getParamMoves);
      data_model.getBeginLoc11 = arboretum_create_named_node("/clang/CoroutineBodyStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc11);
      data_model.getEndLoc11 = arboretum_create_named_node("/clang/CoroutineBodyStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc11);
      data_model.children21 = arboretum_create_named_node("/clang/CoroutineBodyStmt/children");
      methods.push_back(data_model.children21);
      data_model.childrenExclBody1 = arboretum_create_named_node("/clang/CoroutineBodyStmt/childrenExclBody");
      methods.push_back(data_model.childrenExclBody1);
    arboretum_create_edge(data_model.CoroutineBodyStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArrayTypeTraitExpr = arboretum_create_named_node("/clang/ArrayTypeTraitExpr");
  arboretum_create_edge(data_model.ArrayTypeTraitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc12 = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc12);
      data_model.getEndLoc12 = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc12);
      data_model.getTrait = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getTrait");
      methods.push_back(data_model.getTrait);
      data_model.getQueriedType = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getQueriedType");
      methods.push_back(data_model.getQueriedType);
      data_model.getQueriedTypeSourceInfo = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getQueriedTypeSourceInfo");
      methods.push_back(data_model.getQueriedTypeSourceInfo);
      data_model.getValue = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getValue");
      methods.push_back(data_model.getValue);
      data_model.getDimensionExpression = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/getDimensionExpression");
      methods.push_back(data_model.getDimensionExpression);
      data_model.children23 = arboretum_create_named_node("/clang/ArrayTypeTraitExpr/children");
      methods.push_back(data_model.children23);
    arboretum_create_edge(data_model.ArrayTypeTraitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelMasterDirective = arboretum_create_named_node("/clang/OMPParallelMasterDirective");
  arboretum_create_edge(data_model.OMPParallelMasterDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelMasterDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAutoreleasePoolStmt = arboretum_create_named_node("/clang/ObjCAutoreleasePoolStmt");
  arboretum_create_edge(data_model.ObjCAutoreleasePoolStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAutoreleasePoolStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCanonicalLoop = arboretum_create_named_node("/clang/OMPCanonicalLoop");
  arboretum_create_edge(data_model.OMPCanonicalLoop, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCanonicalLoop, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTileDirective = arboretum_create_named_node("/clang/OMPTileDirective");
  arboretum_create_edge(data_model.OMPTileDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTileDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCDictionaryLiteral = arboretum_create_named_node("/clang/ObjCDictionaryLiteral");
  arboretum_create_edge(data_model.ObjCDictionaryLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCDictionaryLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPLoopTransformationDirective = arboretum_create_named_node("/clang/OMPLoopTransformationDirective");
  arboretum_create_edge(data_model.OMPLoopTransformationDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPLoopTransformationDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXBoolLiteralExpr = arboretum_create_named_node("/clang/CXXBoolLiteralExpr");
  arboretum_create_edge(data_model.CXXBoolLiteralExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValue1 = arboretum_create_named_node("/clang/CXXBoolLiteralExpr/getValue");
      methods.push_back(data_model.getValue1);
      data_model.getBeginLoc16 = arboretum_create_named_node("/clang/CXXBoolLiteralExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc16);
      data_model.getEndLoc16 = arboretum_create_named_node("/clang/CXXBoolLiteralExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc16);
      data_model.getLocation = arboretum_create_named_node("/clang/CXXBoolLiteralExpr/getLocation");
      methods.push_back(data_model.getLocation);
      data_model.children31 = arboretum_create_named_node("/clang/CXXBoolLiteralExpr/children");
      methods.push_back(data_model.children31);
    arboretum_create_edge(data_model.CXXBoolLiteralExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SYCLUniqueStableNameExpr = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr");
  arboretum_create_edge(data_model.SYCLUniqueStableNameExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeSourceInfo1 = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo1);
      data_model.getBeginLoc17 = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc17);
      data_model.getEndLoc17 = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc17);
      data_model.getLocation1 = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/getLocation");
      methods.push_back(data_model.getLocation1);
      data_model.getLParenLocation = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/getLParenLocation");
      methods.push_back(data_model.getLParenLocation);
      data_model.getRParenLocation = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/getRParenLocation");
      methods.push_back(data_model.getRParenLocation);
      data_model.children33 = arboretum_create_named_node("/clang/SYCLUniqueStableNameExpr/children");
      methods.push_back(data_model.children33);
    arboretum_create_edge(data_model.SYCLUniqueStableNameExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPSimdDirective = arboretum_create_named_node("/clang/OMPSimdDirective");
  arboretum_create_edge(data_model.OMPSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPForSimdDirective = arboretum_create_named_node("/clang/OMPForSimdDirective");
  arboretum_create_edge(data_model.OMPForSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPForSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBoxedExpr = arboretum_create_named_node("/clang/ObjCBoxedExpr");
  arboretum_create_edge(data_model.ObjCBoxedExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBoxedExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelSectionsDirective = arboretum_create_named_node("/clang/OMPParallelSectionsDirective");
  arboretum_create_edge(data_model.OMPParallelSectionsDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelSectionsDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAvailabilityCheckExpr = arboretum_create_named_node("/clang/ObjCAvailabilityCheckExpr");
  arboretum_create_edge(data_model.ObjCAvailabilityCheckExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAvailabilityCheckExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTaskLoopSimdDirective = arboretum_create_named_node("/clang/OMPTaskLoopSimdDirective");
  arboretum_create_edge(data_model.OMPTaskLoopSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTaskLoopSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXTryStmt = arboretum_create_named_node("/clang/CXXTryStmt");
  arboretum_create_edge(data_model.CXXTryStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc20 = arboretum_create_named_node("/clang/CXXTryStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc20);
      data_model.getTryLoc1 = arboretum_create_named_node("/clang/CXXTryStmt/getTryLoc");
      methods.push_back(data_model.getTryLoc1);
      data_model.getEndLoc20 = arboretum_create_named_node("/clang/CXXTryStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc20);
      data_model.getTryBlock2 = arboretum_create_named_node("/clang/CXXTryStmt/getTryBlock");
      methods.push_back(data_model.getTryBlock2);
      data_model.getNumHandlers = arboretum_create_named_node("/clang/CXXTryStmt/getNumHandlers");
      methods.push_back(data_model.getNumHandlers);
      data_model.children39 = arboretum_create_named_node("/clang/CXXTryStmt/children");
      methods.push_back(data_model.children39);
    arboretum_create_edge(data_model.CXXTryStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMaskedTaskLoopSimdDirective = arboretum_create_named_node("/clang/OMPMaskedTaskLoopSimdDirective");
  arboretum_create_edge(data_model.OMPMaskedTaskLoopSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMaskedTaskLoopSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelMaskedTaskLoopDirective = arboretum_create_named_node("/clang/OMPParallelMaskedTaskLoopDirective");
  arboretum_create_edge(data_model.OMPParallelMaskedTaskLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelMaskedTaskLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCIsaExpr = arboretum_create_named_node("/clang/ObjCIsaExpr");
  arboretum_create_edge(data_model.ObjCIsaExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCIsaExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAtFinallyStmt = arboretum_create_named_node("/clang/ObjCAtFinallyStmt");
  arboretum_create_edge(data_model.ObjCAtFinallyStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAtFinallyStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BlockExpr = arboretum_create_named_node("/clang/BlockExpr");
  arboretum_create_edge(data_model.BlockExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBlockDecl = arboretum_create_named_node("/clang/BlockExpr/getBlockDecl");
      methods.push_back(data_model.getBlockDecl);
      data_model.getCaretLocation = arboretum_create_named_node("/clang/BlockExpr/getCaretLocation");
      methods.push_back(data_model.getCaretLocation);
      data_model.getBody3 = arboretum_create_named_node("/clang/BlockExpr/getBody");
      methods.push_back(data_model.getBody3);
      data_model.getBeginLoc23 = arboretum_create_named_node("/clang/BlockExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc23);
      data_model.getEndLoc23 = arboretum_create_named_node("/clang/BlockExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc23);
      data_model.getFunctionType = arboretum_create_named_node("/clang/BlockExpr/getFunctionType");
      methods.push_back(data_model.getFunctionType);
      data_model.children45 = arboretum_create_named_node("/clang/BlockExpr/children");
      methods.push_back(data_model.children45);
    arboretum_create_edge(data_model.BlockExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WhileStmt = arboretum_create_named_node("/clang/WhileStmt");
  arboretum_create_edge(data_model.WhileStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.hasVarStorage = arboretum_create_named_node("/clang/WhileStmt/hasVarStorage");
      methods.push_back(data_model.hasVarStorage);
      data_model.getCond3 = arboretum_create_named_node("/clang/WhileStmt/getCond");
      methods.push_back(data_model.getCond3);
      data_model.getBody6 = arboretum_create_named_node("/clang/WhileStmt/getBody");
      methods.push_back(data_model.getBody6);
      data_model.getConditionVariable2 = arboretum_create_named_node("/clang/WhileStmt/getConditionVariable");
      methods.push_back(data_model.getConditionVariable2);
      data_model.getConditionVariableDeclStmt3 = arboretum_create_named_node("/clang/WhileStmt/getConditionVariableDeclStmt");
      methods.push_back(data_model.getConditionVariableDeclStmt3);
      data_model.getWhileLoc = arboretum_create_named_node("/clang/WhileStmt/getWhileLoc");
      methods.push_back(data_model.getWhileLoc);
      data_model.getLParenLoc1 = arboretum_create_named_node("/clang/WhileStmt/getLParenLoc");
      methods.push_back(data_model.getLParenLoc1);
      data_model.getRParenLoc3 = arboretum_create_named_node("/clang/WhileStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc3);
      data_model.getBeginLoc24 = arboretum_create_named_node("/clang/WhileStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc24);
      data_model.getEndLoc24 = arboretum_create_named_node("/clang/WhileStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc24);
      data_model.children47 = arboretum_create_named_node("/clang/WhileStmt/children");
      methods.push_back(data_model.children47);
    arboretum_create_edge(data_model.WhileStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCIvarRefExpr = arboretum_create_named_node("/clang/ObjCIvarRefExpr");
  arboretum_create_edge(data_model.ObjCIvarRefExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCIvarRefExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypoExpr = arboretum_create_named_node("/clang/TypoExpr");
  arboretum_create_edge(data_model.TypoExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.children51 = arboretum_create_named_node("/clang/TypoExpr/children");
      methods.push_back(data_model.children51);
      data_model.getBeginLoc26 = arboretum_create_named_node("/clang/TypoExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc26);
      data_model.getEndLoc26 = arboretum_create_named_node("/clang/TypoExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc26);
    arboretum_create_edge(data_model.TypoExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDAKernelCallExpr = arboretum_create_named_node("/clang/CUDAKernelCallExpr");
  arboretum_create_edge(data_model.CUDAKernelCallExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getConfig = arboretum_create_named_node("/clang/CUDAKernelCallExpr/getConfig");
      methods.push_back(data_model.getConfig);
    arboretum_create_edge(data_model.CUDAKernelCallExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPIteratorExpr = arboretum_create_named_node("/clang/OMPIteratorExpr");
  arboretum_create_edge(data_model.OMPIteratorExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPIteratorExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetUpdateDirective = arboretum_create_named_node("/clang/OMPTargetUpdateDirective");
  arboretum_create_edge(data_model.OMPTargetUpdateDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetUpdateDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RecoveryExpr = arboretum_create_named_node("/clang/RecoveryExpr");
  arboretum_create_edge(data_model.RecoveryExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.subExpressions1 = arboretum_create_named_node("/clang/RecoveryExpr/subExpressions");
      methods.push_back(data_model.subExpressions1);
      data_model.getBeginLoc28 = arboretum_create_named_node("/clang/RecoveryExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc28);
      data_model.getEndLoc28 = arboretum_create_named_node("/clang/RecoveryExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc28);
    arboretum_create_edge(data_model.RecoveryExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDistributeParallelForDirective = arboretum_create_named_node("/clang/OMPDistributeParallelForDirective");
  arboretum_create_edge(data_model.OMPDistributeParallelForDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDistributeParallelForDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwitchStmt = arboretum_create_named_node("/clang/SwitchStmt");
  arboretum_create_edge(data_model.SwitchStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.hasInitStorage = arboretum_create_named_node("/clang/SwitchStmt/hasInitStorage");
      methods.push_back(data_model.hasInitStorage);
      data_model.hasVarStorage1 = arboretum_create_named_node("/clang/SwitchStmt/hasVarStorage");
      methods.push_back(data_model.hasVarStorage1);
      data_model.getCond5 = arboretum_create_named_node("/clang/SwitchStmt/getCond");
      methods.push_back(data_model.getCond5);
      data_model.getBody8 = arboretum_create_named_node("/clang/SwitchStmt/getBody");
      methods.push_back(data_model.getBody8);
      data_model.getInit3 = arboretum_create_named_node("/clang/SwitchStmt/getInit");
      methods.push_back(data_model.getInit3);
      data_model.getConditionVariable4 = arboretum_create_named_node("/clang/SwitchStmt/getConditionVariable");
      methods.push_back(data_model.getConditionVariable4);
      data_model.getConditionVariableDeclStmt5 = arboretum_create_named_node("/clang/SwitchStmt/getConditionVariableDeclStmt");
      methods.push_back(data_model.getConditionVariableDeclStmt5);
      data_model.getSwitchCaseList1 = arboretum_create_named_node("/clang/SwitchStmt/getSwitchCaseList");
      methods.push_back(data_model.getSwitchCaseList1);
      data_model.getSwitchLoc = arboretum_create_named_node("/clang/SwitchStmt/getSwitchLoc");
      methods.push_back(data_model.getSwitchLoc);
      data_model.getLParenLoc3 = arboretum_create_named_node("/clang/SwitchStmt/getLParenLoc");
      methods.push_back(data_model.getLParenLoc3);
      data_model.getRParenLoc5 = arboretum_create_named_node("/clang/SwitchStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc5);
      data_model.isAllEnumCasesCovered = arboretum_create_named_node("/clang/SwitchStmt/isAllEnumCasesCovered");
      methods.push_back(data_model.isAllEnumCasesCovered);
      data_model.getBeginLoc29 = arboretum_create_named_node("/clang/SwitchStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc29);
      data_model.getEndLoc29 = arboretum_create_named_node("/clang/SwitchStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc29);
      data_model.children56 = arboretum_create_named_node("/clang/SwitchStmt/children");
      methods.push_back(data_model.children56);
    arboretum_create_edge(data_model.SwitchStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetParallelDirective = arboretum_create_named_node("/clang/OMPTargetParallelDirective");
  arboretum_create_edge(data_model.OMPTargetParallelDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetParallelDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDistributeParallelForSimdDirective = arboretum_create_named_node("/clang/OMPDistributeParallelForSimdDirective");
  arboretum_create_edge(data_model.OMPDistributeParallelForSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDistributeParallelForSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPGenericLoopDirective = arboretum_create_named_node("/clang/OMPGenericLoopDirective");
  arboretum_create_edge(data_model.OMPGenericLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPGenericLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstantExpr = arboretum_create_named_node("/clang/ConstantExpr");
  arboretum_create_edge(data_model.ConstantExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc30 = arboretum_create_named_node("/clang/ConstantExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc30);
      data_model.getEndLoc30 = arboretum_create_named_node("/clang/ConstantExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc30);
      data_model.getResultAPValueKind = arboretum_create_named_node("/clang/ConstantExpr/getResultAPValueKind");
      methods.push_back(data_model.getResultAPValueKind);
      data_model.getResultStorageKind = arboretum_create_named_node("/clang/ConstantExpr/getResultStorageKind");
      methods.push_back(data_model.getResultStorageKind);
      data_model.isImmediateInvocation = arboretum_create_named_node("/clang/ConstantExpr/isImmediateInvocation");
      methods.push_back(data_model.isImmediateInvocation);
      data_model.hasAPValueResult = arboretum_create_named_node("/clang/ConstantExpr/hasAPValueResult");
      methods.push_back(data_model.hasAPValueResult);
      data_model.getAPValueResult = arboretum_create_named_node("/clang/ConstantExpr/getAPValueResult");
      methods.push_back(data_model.getAPValueResult);
      data_model.getResultAsAPSInt = arboretum_create_named_node("/clang/ConstantExpr/getResultAsAPSInt");
      methods.push_back(data_model.getResultAsAPSInt);
      data_model.children58 = arboretum_create_named_node("/clang/ConstantExpr/children");
      methods.push_back(data_model.children58);
    arboretum_create_edge(data_model.ConstantExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LabelStmt = arboretum_create_named_node("/clang/LabelStmt");
  arboretum_create_edge(data_model.LabelStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getIdentLoc = arboretum_create_named_node("/clang/LabelStmt/getIdentLoc");
      methods.push_back(data_model.getIdentLoc);
      data_model.getDecl2 = arboretum_create_named_node("/clang/LabelStmt/getDecl");
      methods.push_back(data_model.getDecl2);
      data_model.getName = arboretum_create_named_node("/clang/LabelStmt/getName");
      methods.push_back(data_model.getName);
      data_model.getSubStmt3 = arboretum_create_named_node("/clang/LabelStmt/getSubStmt");
      methods.push_back(data_model.getSubStmt3);
      data_model.getBeginLoc31 = arboretum_create_named_node("/clang/LabelStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc31);
      data_model.getEndLoc31 = arboretum_create_named_node("/clang/LabelStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc31);
      data_model.children60 = arboretum_create_named_node("/clang/LabelStmt/children");
      methods.push_back(data_model.children60);
      data_model.isSideEntry = arboretum_create_named_node("/clang/LabelStmt/isSideEntry");
      methods.push_back(data_model.isSideEntry);
    arboretum_create_edge(data_model.LabelStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetTeamsGenericLoopDirective = arboretum_create_named_node("/clang/OMPTargetTeamsGenericLoopDirective");
  arboretum_create_edge(data_model.OMPTargetTeamsGenericLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetTeamsGenericLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetDataDirective = arboretum_create_named_node("/clang/OMPTargetDataDirective");
  arboretum_create_edge(data_model.OMPTargetDataDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetDataDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTeamsDistributeDirective = arboretum_create_named_node("/clang/OMPTeamsDistributeDirective");
  arboretum_create_edge(data_model.OMPTeamsDistributeDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTeamsDistributeDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ContinueStmt = arboretum_create_named_node("/clang/ContinueStmt");
  arboretum_create_edge(data_model.ContinueStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getContinueLoc = arboretum_create_named_node("/clang/ContinueStmt/getContinueLoc");
      methods.push_back(data_model.getContinueLoc);
      data_model.getBeginLoc32 = arboretum_create_named_node("/clang/ContinueStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc32);
      data_model.getEndLoc32 = arboretum_create_named_node("/clang/ContinueStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc32);
      data_model.children62 = arboretum_create_named_node("/clang/ContinueStmt/children");
      methods.push_back(data_model.children62);
    arboretum_create_edge(data_model.ContinueStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPUnrollDirective = arboretum_create_named_node("/clang/OMPUnrollDirective");
  arboretum_create_edge(data_model.OMPUnrollDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPUnrollDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionParmPackExpr = arboretum_create_named_node("/clang/FunctionParmPackExpr");
  arboretum_create_edge(data_model.FunctionParmPackExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getParameterPack = arboretum_create_named_node("/clang/FunctionParmPackExpr/getParameterPack");
      methods.push_back(data_model.getParameterPack);
      data_model.getParameterPackLocation = arboretum_create_named_node("/clang/FunctionParmPackExpr/getParameterPackLocation");
      methods.push_back(data_model.getParameterPackLocation);
      data_model.begin = arboretum_create_named_node("/clang/FunctionParmPackExpr/begin");
      methods.push_back(data_model.begin);
      data_model.end = arboretum_create_named_node("/clang/FunctionParmPackExpr/end");
      methods.push_back(data_model.end);
      data_model.getNumExpansions = arboretum_create_named_node("/clang/FunctionParmPackExpr/getNumExpansions");
      methods.push_back(data_model.getNumExpansions);
      data_model.getBeginLoc33 = arboretum_create_named_node("/clang/FunctionParmPackExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc33);
      data_model.getEndLoc33 = arboretum_create_named_node("/clang/FunctionParmPackExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc33);
      data_model.children64 = arboretum_create_named_node("/clang/FunctionParmPackExpr/children");
      methods.push_back(data_model.children64);
    arboretum_create_edge(data_model.FunctionParmPackExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeclRefExpr = arboretum_create_named_node("/clang/DeclRefExpr");
  arboretum_create_edge(data_model.DeclRefExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl4 = arboretum_create_named_node("/clang/DeclRefExpr/getDecl");
      methods.push_back(data_model.getDecl4);
      data_model.getNameInfo = arboretum_create_named_node("/clang/DeclRefExpr/getNameInfo");
      methods.push_back(data_model.getNameInfo);
      data_model.getLocation3 = arboretum_create_named_node("/clang/DeclRefExpr/getLocation");
      methods.push_back(data_model.getLocation3);
      data_model.getBeginLoc34 = arboretum_create_named_node("/clang/DeclRefExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc34);
      data_model.getEndLoc34 = arboretum_create_named_node("/clang/DeclRefExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc34);
      data_model.hasQualifier1 = arboretum_create_named_node("/clang/DeclRefExpr/hasQualifier");
      methods.push_back(data_model.hasQualifier1);
      data_model.getQualifierLoc1 = arboretum_create_named_node("/clang/DeclRefExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc1);
      data_model.getQualifier1 = arboretum_create_named_node("/clang/DeclRefExpr/getQualifier");
      methods.push_back(data_model.getQualifier1);
      data_model.getFoundDecl2 = arboretum_create_named_node("/clang/DeclRefExpr/getFoundDecl");
      methods.push_back(data_model.getFoundDecl2);
      data_model.hasTemplateKWAndArgsInfo1 = arboretum_create_named_node("/clang/DeclRefExpr/hasTemplateKWAndArgsInfo");
      methods.push_back(data_model.hasTemplateKWAndArgsInfo1);
      data_model.getTemplateKeywordLoc1 = arboretum_create_named_node("/clang/DeclRefExpr/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc1);
      data_model.getLAngleLoc1 = arboretum_create_named_node("/clang/DeclRefExpr/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc1);
      data_model.getRAngleLoc1 = arboretum_create_named_node("/clang/DeclRefExpr/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc1);
      data_model.hasTemplateKeyword1 = arboretum_create_named_node("/clang/DeclRefExpr/hasTemplateKeyword");
      methods.push_back(data_model.hasTemplateKeyword1);
      data_model.hasExplicitTemplateArgs1 = arboretum_create_named_node("/clang/DeclRefExpr/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs1);
      data_model.getTemplateArgs1 = arboretum_create_named_node("/clang/DeclRefExpr/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs1);
      data_model.getNumTemplateArgs1 = arboretum_create_named_node("/clang/DeclRefExpr/getNumTemplateArgs");
      methods.push_back(data_model.getNumTemplateArgs1);
      data_model.template_arguments1 = arboretum_create_named_node("/clang/DeclRefExpr/template_arguments");
      methods.push_back(data_model.template_arguments1);
      data_model.hadMultipleCandidates1 = arboretum_create_named_node("/clang/DeclRefExpr/hadMultipleCandidates");
      methods.push_back(data_model.hadMultipleCandidates1);
      data_model.isNonOdrUse1 = arboretum_create_named_node("/clang/DeclRefExpr/isNonOdrUse");
      methods.push_back(data_model.isNonOdrUse1);
      data_model.refersToEnclosingVariableOrCapture = arboretum_create_named_node("/clang/DeclRefExpr/refersToEnclosingVariableOrCapture");
      methods.push_back(data_model.refersToEnclosingVariableOrCapture);
      data_model.isImmediateEscalating = arboretum_create_named_node("/clang/DeclRefExpr/isImmediateEscalating");
      methods.push_back(data_model.isImmediateEscalating);
      data_model.isCapturedByCopyInLambdaWithExplicitObjectParameter = arboretum_create_named_node("/clang/DeclRefExpr/isCapturedByCopyInLambdaWithExplicitObjectParameter");
      methods.push_back(data_model.isCapturedByCopyInLambdaWithExplicitObjectParameter);
      data_model.children66 = arboretum_create_named_node("/clang/DeclRefExpr/children");
      methods.push_back(data_model.children66);
    arboretum_create_edge(data_model.DeclRefExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCancellationPointDirective = arboretum_create_named_node("/clang/OMPCancellationPointDirective");
  arboretum_create_edge(data_model.OMPCancellationPointDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCancellationPointDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FixedPointLiteral = arboretum_create_named_node("/clang/FixedPointLiteral");
  arboretum_create_edge(data_model.FixedPointLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc35 = arboretum_create_named_node("/clang/FixedPointLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc35);
      data_model.getEndLoc35 = arboretum_create_named_node("/clang/FixedPointLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc35);
      data_model.getLocation4 = arboretum_create_named_node("/clang/FixedPointLiteral/getLocation");
      methods.push_back(data_model.getLocation4);
      data_model.getScale = arboretum_create_named_node("/clang/FixedPointLiteral/getScale");
      methods.push_back(data_model.getScale);
      data_model.children68 = arboretum_create_named_node("/clang/FixedPointLiteral/children");
      methods.push_back(data_model.children68);
    arboretum_create_edge(data_model.FixedPointLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAtThrowStmt = arboretum_create_named_node("/clang/ObjCAtThrowStmt");
  arboretum_create_edge(data_model.ObjCAtThrowStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAtThrowStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetExitDataDirective = arboretum_create_named_node("/clang/OMPTargetExitDataDirective");
  arboretum_create_edge(data_model.OMPTargetExitDataDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetExitDataDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetEnterDataDirective = arboretum_create_named_node("/clang/OMPTargetEnterDataDirective");
  arboretum_create_edge(data_model.OMPTargetEnterDataDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetEnterDataDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetTeamsDistributeParallelForDirective = arboretum_create_named_node("/clang/OMPTargetTeamsDistributeParallelForDirective");
  arboretum_create_edge(data_model.OMPTargetTeamsDistributeParallelForDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetTeamsDistributeParallelForDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CompoundStmt = arboretum_create_named_node("/clang/CompoundStmt");
  arboretum_create_edge(data_model.CompoundStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.body_empty = arboretum_create_named_node("/clang/CompoundStmt/body_empty");
      methods.push_back(data_model.body_empty);
      data_model.size = arboretum_create_named_node("/clang/CompoundStmt/size");
      methods.push_back(data_model.size);
      data_model.hasStoredFPFeatures = arboretum_create_named_node("/clang/CompoundStmt/hasStoredFPFeatures");
      methods.push_back(data_model.hasStoredFPFeatures);
      data_model.getStoredFPFeatures = arboretum_create_named_node("/clang/CompoundStmt/getStoredFPFeatures");
      methods.push_back(data_model.getStoredFPFeatures);
      data_model.body1 = arboretum_create_named_node("/clang/CompoundStmt/body");
      methods.push_back(data_model.body1);
      data_model.body_begin1 = arboretum_create_named_node("/clang/CompoundStmt/body_begin");
      methods.push_back(data_model.body_begin1);
      data_model.body_end1 = arboretum_create_named_node("/clang/CompoundStmt/body_end");
      methods.push_back(data_model.body_end1);
      data_model.body_front1 = arboretum_create_named_node("/clang/CompoundStmt/body_front");
      methods.push_back(data_model.body_front1);
      data_model.body_back1 = arboretum_create_named_node("/clang/CompoundStmt/body_back");
      methods.push_back(data_model.body_back1);
      data_model.body_rbegin1 = arboretum_create_named_node("/clang/CompoundStmt/body_rbegin");
      methods.push_back(data_model.body_rbegin1);
      data_model.body_rend1 = arboretum_create_named_node("/clang/CompoundStmt/body_rend");
      methods.push_back(data_model.body_rend1);
      data_model.getStmtExprResult1 = arboretum_create_named_node("/clang/CompoundStmt/getStmtExprResult");
      methods.push_back(data_model.getStmtExprResult1);
      data_model.getBeginLoc37 = arboretum_create_named_node("/clang/CompoundStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc37);
      data_model.getEndLoc37 = arboretum_create_named_node("/clang/CompoundStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc37);
      data_model.getLBracLoc = arboretum_create_named_node("/clang/CompoundStmt/getLBracLoc");
      methods.push_back(data_model.getLBracLoc);
      data_model.getRBracLoc = arboretum_create_named_node("/clang/CompoundStmt/getRBracLoc");
      methods.push_back(data_model.getRBracLoc);
      data_model.children72 = arboretum_create_named_node("/clang/CompoundStmt/children");
      methods.push_back(data_model.children72);
    arboretum_create_edge(data_model.CompoundStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPFlushDirective = arboretum_create_named_node("/clang/OMPFlushDirective");
  arboretum_create_edge(data_model.OMPFlushDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPFlushDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetTeamsDirective = arboretum_create_named_node("/clang/OMPTargetTeamsDirective");
  arboretum_create_edge(data_model.OMPTargetTeamsDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetTeamsDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMetaDirective = arboretum_create_named_node("/clang/OMPMetaDirective");
  arboretum_create_edge(data_model.OMPMetaDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMetaDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPAtomicDirective = arboretum_create_named_node("/clang/OMPAtomicDirective");
  arboretum_create_edge(data_model.OMPAtomicDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPAtomicDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CaseStmt = arboretum_create_named_node("/clang/CaseStmt");
  arboretum_create_edge(data_model.CaseStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.caseStmtIsGNURange = arboretum_create_named_node("/clang/CaseStmt/caseStmtIsGNURange");
      methods.push_back(data_model.caseStmtIsGNURange);
      data_model.getCaseLoc = arboretum_create_named_node("/clang/CaseStmt/getCaseLoc");
      methods.push_back(data_model.getCaseLoc);
      data_model.getEllipsisLoc = arboretum_create_named_node("/clang/CaseStmt/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc);
      data_model.getLHS1 = arboretum_create_named_node("/clang/CaseStmt/getLHS");
      methods.push_back(data_model.getLHS1);
      data_model.getRHS1 = arboretum_create_named_node("/clang/CaseStmt/getRHS");
      methods.push_back(data_model.getRHS1);
      data_model.getSubStmt5 = arboretum_create_named_node("/clang/CaseStmt/getSubStmt");
      methods.push_back(data_model.getSubStmt5);
      data_model.getBeginLoc38 = arboretum_create_named_node("/clang/CaseStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc38);
      data_model.getEndLoc38 = arboretum_create_named_node("/clang/CaseStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc38);
      data_model.children74 = arboretum_create_named_node("/clang/CaseStmt/children");
      methods.push_back(data_model.children74);
    arboretum_create_edge(data_model.CaseStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ValueStmt = arboretum_create_named_node("/clang/ValueStmt");
  arboretum_create_edge(data_model.ValueStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExprStmt = arboretum_create_named_node("/clang/ValueStmt/getExprStmt");
      methods.push_back(data_model.getExprStmt);
    arboretum_create_edge(data_model.ValueStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPExecutableDirective = arboretum_create_named_node("/clang/OMPExecutableDirective");
  arboretum_create_edge(data_model.OMPExecutableDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPExecutableDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelMasterTaskLoopSimdDirective = arboretum_create_named_node("/clang/OMPParallelMasterTaskLoopSimdDirective");
  arboretum_create_edge(data_model.OMPParallelMasterTaskLoopSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelMasterTaskLoopSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExplicitCastExpr = arboretum_create_named_node("/clang/ExplicitCastExpr");
  arboretum_create_edge(data_model.ExplicitCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeInfoAsWritten = arboretum_create_named_node("/clang/ExplicitCastExpr/getTypeInfoAsWritten");
      methods.push_back(data_model.getTypeInfoAsWritten);
      data_model.getTypeAsWritten = arboretum_create_named_node("/clang/ExplicitCastExpr/getTypeAsWritten");
      methods.push_back(data_model.getTypeAsWritten);
    arboretum_create_edge(data_model.ExplicitCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPSectionsDirective = arboretum_create_named_node("/clang/OMPSectionsDirective");
  arboretum_create_edge(data_model.OMPSectionsDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPSectionsDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPLoopBasedDirective = arboretum_create_named_node("/clang/OMPLoopBasedDirective");
  arboretum_create_edge(data_model.OMPLoopBasedDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPLoopBasedDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPLoopDirective = arboretum_create_named_node("/clang/OMPLoopDirective");
  arboretum_create_edge(data_model.OMPLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReturnStmt = arboretum_create_named_node("/clang/ReturnStmt");
  arboretum_create_edge(data_model.ReturnStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getRetValue1 = arboretum_create_named_node("/clang/ReturnStmt/getRetValue");
      methods.push_back(data_model.getRetValue1);
      data_model.getNRVOCandidate = arboretum_create_named_node("/clang/ReturnStmt/getNRVOCandidate");
      methods.push_back(data_model.getNRVOCandidate);
      data_model.getReturnLoc = arboretum_create_named_node("/clang/ReturnStmt/getReturnLoc");
      methods.push_back(data_model.getReturnLoc);
      data_model.getBeginLoc40 = arboretum_create_named_node("/clang/ReturnStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc40);
      data_model.getEndLoc40 = arboretum_create_named_node("/clang/ReturnStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc40);
      data_model.children78 = arboretum_create_named_node("/clang/ReturnStmt/children");
      methods.push_back(data_model.children78);
    arboretum_create_edge(data_model.ReturnStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPArraySectionExpr = arboretum_create_named_node("/clang/OMPArraySectionExpr");
  arboretum_create_edge(data_model.OMPArraySectionExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPArraySectionExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXUnresolvedConstructExpr = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr");
  arboretum_create_edge(data_model.CXXUnresolvedConstructExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeAsWritten1 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getTypeAsWritten");
      methods.push_back(data_model.getTypeAsWritten1);
      data_model.getTypeSourceInfo2 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo2);
      data_model.getLParenLoc4 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc4);
      data_model.getRParenLoc6 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc6);
      data_model.isListInitialization = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/isListInitialization");
      methods.push_back(data_model.isListInitialization);
      data_model.getNumArgs1 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getNumArgs");
      methods.push_back(data_model.getNumArgs1);
      data_model.arg_begin2 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/arg_begin");
      methods.push_back(data_model.arg_begin2);
      data_model.arg_end2 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/arg_end");
      methods.push_back(data_model.arg_end2);
      data_model.arguments1 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/arguments");
      methods.push_back(data_model.arguments1);
      data_model.getBeginLoc42 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc42);
      data_model.getEndLoc42 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc42);
      data_model.children82 = arboretum_create_named_node("/clang/CXXUnresolvedConstructExpr/children");
      methods.push_back(data_model.children82);
    arboretum_create_edge(data_model.CXXUnresolvedConstructExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UserDefinedLiteral = arboretum_create_named_node("/clang/UserDefinedLiteral");
  arboretum_create_edge(data_model.UserDefinedLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLiteralOperatorKind = arboretum_create_named_node("/clang/UserDefinedLiteral/getLiteralOperatorKind");
      methods.push_back(data_model.getLiteralOperatorKind);
      data_model.getCookedLiteral1 = arboretum_create_named_node("/clang/UserDefinedLiteral/getCookedLiteral");
      methods.push_back(data_model.getCookedLiteral1);
      data_model.getBeginLoc43 = arboretum_create_named_node("/clang/UserDefinedLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc43);
      data_model.getEndLoc43 = arboretum_create_named_node("/clang/UserDefinedLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc43);
      data_model.getUDSuffixLoc = arboretum_create_named_node("/clang/UserDefinedLiteral/getUDSuffixLoc");
      methods.push_back(data_model.getUDSuffixLoc);
      data_model.getUDSuffix = arboretum_create_named_node("/clang/UserDefinedLiteral/getUDSuffix");
      methods.push_back(data_model.getUDSuffix);
    arboretum_create_edge(data_model.UserDefinedLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXCatchStmt = arboretum_create_named_node("/clang/CXXCatchStmt");
  arboretum_create_edge(data_model.CXXCatchStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc44 = arboretum_create_named_node("/clang/CXXCatchStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc44);
      data_model.getEndLoc44 = arboretum_create_named_node("/clang/CXXCatchStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc44);
      data_model.getCatchLoc = arboretum_create_named_node("/clang/CXXCatchStmt/getCatchLoc");
      methods.push_back(data_model.getCatchLoc);
      data_model.getExceptionDecl = arboretum_create_named_node("/clang/CXXCatchStmt/getExceptionDecl");
      methods.push_back(data_model.getExceptionDecl);
      data_model.getCaughtType = arboretum_create_named_node("/clang/CXXCatchStmt/getCaughtType");
      methods.push_back(data_model.getCaughtType);
      data_model.getHandlerBlock = arboretum_create_named_node("/clang/CXXCatchStmt/getHandlerBlock");
      methods.push_back(data_model.getHandlerBlock);
      data_model.children84 = arboretum_create_named_node("/clang/CXXCatchStmt/children");
      methods.push_back(data_model.children84);
    arboretum_create_edge(data_model.CXXCatchStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPScopeDirective = arboretum_create_named_node("/clang/OMPScopeDirective");
  arboretum_create_edge(data_model.OMPScopeDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPScopeDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAtTryStmt = arboretum_create_named_node("/clang/ObjCAtTryStmt");
  arboretum_create_edge(data_model.ObjCAtTryStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAtTryStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetTeamsDistributeParallelForSimdDirective = arboretum_create_named_node("/clang/OMPTargetTeamsDistributeParallelForSimdDirective");
  arboretum_create_edge(data_model.OMPTargetTeamsDistributeParallelForSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetTeamsDistributeParallelForSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXAddrspaceCastExpr = arboretum_create_named_node("/clang/CXXAddrspaceCastExpr");
  arboretum_create_edge(data_model.CXXAddrspaceCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CXXAddrspaceCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CharacterLiteral = arboretum_create_named_node("/clang/CharacterLiteral");
  arboretum_create_edge(data_model.CharacterLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLocation5 = arboretum_create_named_node("/clang/CharacterLiteral/getLocation");
      methods.push_back(data_model.getLocation5);
      data_model.getKind = arboretum_create_named_node("/clang/CharacterLiteral/getKind");
      methods.push_back(data_model.getKind);
      data_model.getBeginLoc46 = arboretum_create_named_node("/clang/CharacterLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc46);
      data_model.getEndLoc46 = arboretum_create_named_node("/clang/CharacterLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc46);
      data_model.getValue2 = arboretum_create_named_node("/clang/CharacterLiteral/getValue");
      methods.push_back(data_model.getValue2);
      data_model.children88 = arboretum_create_named_node("/clang/CharacterLiteral/children");
      methods.push_back(data_model.children88);
    arboretum_create_edge(data_model.CharacterLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTeamsDistributeParallelForSimdDirective = arboretum_create_named_node("/clang/OMPTeamsDistributeParallelForSimdDirective");
  arboretum_create_edge(data_model.OMPTeamsDistributeParallelForSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTeamsDistributeParallelForSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPArrayShapingExpr = arboretum_create_named_node("/clang/OMPArrayShapingExpr");
  arboretum_create_edge(data_model.OMPArrayShapingExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPArrayShapingExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedLookupExpr = arboretum_create_named_node("/clang/UnresolvedLookupExpr");
  arboretum_create_edge(data_model.UnresolvedLookupExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.requiresADL = arboretum_create_named_node("/clang/UnresolvedLookupExpr/requiresADL");
      methods.push_back(data_model.requiresADL);
      data_model.isOverloaded = arboretum_create_named_node("/clang/UnresolvedLookupExpr/isOverloaded");
      methods.push_back(data_model.isOverloaded);
      data_model.getNamingClass1 = arboretum_create_named_node("/clang/UnresolvedLookupExpr/getNamingClass");
      methods.push_back(data_model.getNamingClass1);
      data_model.getBeginLoc48 = arboretum_create_named_node("/clang/UnresolvedLookupExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc48);
      data_model.getEndLoc48 = arboretum_create_named_node("/clang/UnresolvedLookupExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc48);
      data_model.children92 = arboretum_create_named_node("/clang/UnresolvedLookupExpr/children");
      methods.push_back(data_model.children92);
    arboretum_create_edge(data_model.UnresolvedLookupExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AbstractConditionalOperator = arboretum_create_named_node("/clang/AbstractConditionalOperator");
  arboretum_create_edge(data_model.AbstractConditionalOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCond7 = arboretum_create_named_node("/clang/AbstractConditionalOperator/getCond");
      methods.push_back(data_model.getCond7);
      data_model.getTrueExpr = arboretum_create_named_node("/clang/AbstractConditionalOperator/getTrueExpr");
      methods.push_back(data_model.getTrueExpr);
      data_model.getFalseExpr = arboretum_create_named_node("/clang/AbstractConditionalOperator/getFalseExpr");
      methods.push_back(data_model.getFalseExpr);
      data_model.getQuestionLoc = arboretum_create_named_node("/clang/AbstractConditionalOperator/getQuestionLoc");
      methods.push_back(data_model.getQuestionLoc);
      data_model.getColonLoc1 = arboretum_create_named_node("/clang/AbstractConditionalOperator/getColonLoc");
      methods.push_back(data_model.getColonLoc1);
    arboretum_create_edge(data_model.AbstractConditionalOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BinaryConditionalOperator = arboretum_create_named_node("/clang/BinaryConditionalOperator");
  arboretum_create_edge(data_model.BinaryConditionalOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCommon = arboretum_create_named_node("/clang/BinaryConditionalOperator/getCommon");
      methods.push_back(data_model.getCommon);
      data_model.getOpaqueValue = arboretum_create_named_node("/clang/BinaryConditionalOperator/getOpaqueValue");
      methods.push_back(data_model.getOpaqueValue);
      data_model.getCond8 = arboretum_create_named_node("/clang/BinaryConditionalOperator/getCond");
      methods.push_back(data_model.getCond8);
      data_model.getTrueExpr1 = arboretum_create_named_node("/clang/BinaryConditionalOperator/getTrueExpr");
      methods.push_back(data_model.getTrueExpr1);
      data_model.getFalseExpr1 = arboretum_create_named_node("/clang/BinaryConditionalOperator/getFalseExpr");
      methods.push_back(data_model.getFalseExpr1);
      data_model.getBeginLoc49 = arboretum_create_named_node("/clang/BinaryConditionalOperator/getBeginLoc");
      methods.push_back(data_model.getBeginLoc49);
      data_model.getEndLoc49 = arboretum_create_named_node("/clang/BinaryConditionalOperator/getEndLoc");
      methods.push_back(data_model.getEndLoc49);
      data_model.children94 = arboretum_create_named_node("/clang/BinaryConditionalOperator/children");
      methods.push_back(data_model.children94);
    arboretum_create_edge(data_model.BinaryConditionalOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPBarrierDirective = arboretum_create_named_node("/clang/OMPBarrierDirective");
  arboretum_create_edge(data_model.OMPBarrierDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPBarrierDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTaskDirective = arboretum_create_named_node("/clang/OMPTaskDirective");
  arboretum_create_edge(data_model.OMPTaskDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTaskDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ShuffleVectorExpr = arboretum_create_named_node("/clang/ShuffleVectorExpr");
  arboretum_create_edge(data_model.ShuffleVectorExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBuiltinLoc = arboretum_create_named_node("/clang/ShuffleVectorExpr/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc);
      data_model.getRParenLoc8 = arboretum_create_named_node("/clang/ShuffleVectorExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc8);
      data_model.getBeginLoc50 = arboretum_create_named_node("/clang/ShuffleVectorExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc50);
      data_model.getEndLoc50 = arboretum_create_named_node("/clang/ShuffleVectorExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc50);
      data_model.getNumSubExprs = arboretum_create_named_node("/clang/ShuffleVectorExpr/getNumSubExprs");
      methods.push_back(data_model.getNumSubExprs);
      data_model.children96 = arboretum_create_named_node("/clang/ShuffleVectorExpr/children");
      methods.push_back(data_model.children96);
    arboretum_create_edge(data_model.ShuffleVectorExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetParallelForSimdDirective = arboretum_create_named_node("/clang/OMPTargetParallelForSimdDirective");
  arboretum_create_edge(data_model.OMPTargetParallelForSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetParallelForSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPForDirective = arboretum_create_named_node("/clang/OMPForDirective");
  arboretum_create_edge(data_model.OMPForDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPForDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConceptSpecializationExpr = arboretum_create_named_node("/clang/ConceptSpecializationExpr");
  arboretum_create_edge(data_model.ConceptSpecializationExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateArguments = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getTemplateArguments");
      methods.push_back(data_model.getTemplateArguments);
      data_model.getConceptReference = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getConceptReference");
      methods.push_back(data_model.getConceptReference);
      data_model.getNamedConcept = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getNamedConcept");
      methods.push_back(data_model.getNamedConcept);
      data_model.hasExplicitTemplateArgs2 = arboretum_create_named_node("/clang/ConceptSpecializationExpr/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs2);
      data_model.getConceptNameLoc = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getConceptNameLoc");
      methods.push_back(data_model.getConceptNameLoc);
      data_model.getTemplateArgsAsWritten = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getTemplateArgsAsWritten");
      methods.push_back(data_model.getTemplateArgsAsWritten);
      data_model.getNestedNameSpecifierLoc = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getNestedNameSpecifierLoc");
      methods.push_back(data_model.getNestedNameSpecifierLoc);
      data_model.getTemplateKWLoc = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getTemplateKWLoc");
      methods.push_back(data_model.getTemplateKWLoc);
      data_model.getFoundDecl3 = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getFoundDecl");
      methods.push_back(data_model.getFoundDecl3);
      data_model.getConceptNameInfo = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getConceptNameInfo");
      methods.push_back(data_model.getConceptNameInfo);
      data_model.getSpecializationDecl = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getSpecializationDecl");
      methods.push_back(data_model.getSpecializationDecl);
      data_model.isSatisfied = arboretum_create_named_node("/clang/ConceptSpecializationExpr/isSatisfied");
      methods.push_back(data_model.isSatisfied);
      data_model.getSatisfaction = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getSatisfaction");
      methods.push_back(data_model.getSatisfaction);
      data_model.getBeginLoc51 = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc51);
      data_model.getEndLoc51 = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc51);
      data_model.getExprLoc4 = arboretum_create_named_node("/clang/ConceptSpecializationExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc4);
      data_model.children98 = arboretum_create_named_node("/clang/ConceptSpecializationExpr/children");
      methods.push_back(data_model.children98);
    arboretum_create_edge(data_model.ConceptSpecializationExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AddrLabelExpr = arboretum_create_named_node("/clang/AddrLabelExpr");
  arboretum_create_edge(data_model.AddrLabelExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAmpAmpLoc = arboretum_create_named_node("/clang/AddrLabelExpr/getAmpAmpLoc");
      methods.push_back(data_model.getAmpAmpLoc);
      data_model.getLabelLoc = arboretum_create_named_node("/clang/AddrLabelExpr/getLabelLoc");
      methods.push_back(data_model.getLabelLoc);
      data_model.getBeginLoc52 = arboretum_create_named_node("/clang/AddrLabelExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc52);
      data_model.getEndLoc52 = arboretum_create_named_node("/clang/AddrLabelExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc52);
      data_model.getLabel = arboretum_create_named_node("/clang/AddrLabelExpr/getLabel");
      methods.push_back(data_model.getLabel);
      data_model.children100 = arboretum_create_named_node("/clang/AddrLabelExpr/children");
      methods.push_back(data_model.children100);
    arboretum_create_edge(data_model.AddrLabelExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXFoldExpr = arboretum_create_named_node("/clang/CXXFoldExpr");
  arboretum_create_edge(data_model.CXXFoldExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCallee = arboretum_create_named_node("/clang/CXXFoldExpr/getCallee");
      methods.push_back(data_model.getCallee);
      data_model.getLHS2 = arboretum_create_named_node("/clang/CXXFoldExpr/getLHS");
      methods.push_back(data_model.getLHS2);
      data_model.getRHS2 = arboretum_create_named_node("/clang/CXXFoldExpr/getRHS");
      methods.push_back(data_model.getRHS2);
      data_model.isRightFold = arboretum_create_named_node("/clang/CXXFoldExpr/isRightFold");
      methods.push_back(data_model.isRightFold);
      data_model.isLeftFold = arboretum_create_named_node("/clang/CXXFoldExpr/isLeftFold");
      methods.push_back(data_model.isLeftFold);
      data_model.getPattern = arboretum_create_named_node("/clang/CXXFoldExpr/getPattern");
      methods.push_back(data_model.getPattern);
      data_model.getInit5 = arboretum_create_named_node("/clang/CXXFoldExpr/getInit");
      methods.push_back(data_model.getInit5);
      data_model.getLParenLoc6 = arboretum_create_named_node("/clang/CXXFoldExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc6);
      data_model.getRParenLoc9 = arboretum_create_named_node("/clang/CXXFoldExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc9);
      data_model.getEllipsisLoc1 = arboretum_create_named_node("/clang/CXXFoldExpr/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc1);
      data_model.getOperator = arboretum_create_named_node("/clang/CXXFoldExpr/getOperator");
      methods.push_back(data_model.getOperator);
      data_model.getNumExpansions1 = arboretum_create_named_node("/clang/CXXFoldExpr/getNumExpansions");
      methods.push_back(data_model.getNumExpansions1);
      data_model.getBeginLoc53 = arboretum_create_named_node("/clang/CXXFoldExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc53);
      data_model.getEndLoc53 = arboretum_create_named_node("/clang/CXXFoldExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc53);
      data_model.children102 = arboretum_create_named_node("/clang/CXXFoldExpr/children");
      methods.push_back(data_model.children102);
    arboretum_create_edge(data_model.CXXFoldExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GNUNullExpr = arboretum_create_named_node("/clang/GNUNullExpr");
  arboretum_create_edge(data_model.GNUNullExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTokenLocation = arboretum_create_named_node("/clang/GNUNullExpr/getTokenLocation");
      methods.push_back(data_model.getTokenLocation);
      data_model.getBeginLoc54 = arboretum_create_named_node("/clang/GNUNullExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc54);
      data_model.getEndLoc54 = arboretum_create_named_node("/clang/GNUNullExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc54);
      data_model.children104 = arboretum_create_named_node("/clang/GNUNullExpr/children");
      methods.push_back(data_model.children104);
    arboretum_create_edge(data_model.GNUNullExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBoolLiteralExpr = arboretum_create_named_node("/clang/ObjCBoolLiteralExpr");
  arboretum_create_edge(data_model.ObjCBoolLiteralExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBoolLiteralExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCStringLiteral = arboretum_create_named_node("/clang/ObjCStringLiteral");
  arboretum_create_edge(data_model.ObjCStringLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCStringLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPInteropDirective = arboretum_create_named_node("/clang/OMPInteropDirective");
  arboretum_create_edge(data_model.OMPInteropDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPInteropDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RequiresExpr = arboretum_create_named_node("/clang/RequiresExpr");
  arboretum_create_edge(data_model.RequiresExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLocalParameters = arboretum_create_named_node("/clang/RequiresExpr/getLocalParameters");
      methods.push_back(data_model.getLocalParameters);
      data_model.getBody11 = arboretum_create_named_node("/clang/RequiresExpr/getBody");
      methods.push_back(data_model.getBody11);
      data_model.getRequirements = arboretum_create_named_node("/clang/RequiresExpr/getRequirements");
      methods.push_back(data_model.getRequirements);
      data_model.isSatisfied1 = arboretum_create_named_node("/clang/RequiresExpr/isSatisfied");
      methods.push_back(data_model.isSatisfied1);
      data_model.getRequiresKWLoc = arboretum_create_named_node("/clang/RequiresExpr/getRequiresKWLoc");
      methods.push_back(data_model.getRequiresKWLoc);
      data_model.getLParenLoc7 = arboretum_create_named_node("/clang/RequiresExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc7);
      data_model.getRParenLoc10 = arboretum_create_named_node("/clang/RequiresExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc10);
      data_model.getRBraceLoc = arboretum_create_named_node("/clang/RequiresExpr/getRBraceLoc");
      methods.push_back(data_model.getRBraceLoc);
      data_model.getBeginLoc57 = arboretum_create_named_node("/clang/RequiresExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc57);
      data_model.getEndLoc57 = arboretum_create_named_node("/clang/RequiresExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc57);
      data_model.children110 = arboretum_create_named_node("/clang/RequiresExpr/children");
      methods.push_back(data_model.children110);
    arboretum_create_edge(data_model.RequiresExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentCoawaitExpr = arboretum_create_named_node("/clang/DependentCoawaitExpr");
  arboretum_create_edge(data_model.DependentCoawaitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOperand = arboretum_create_named_node("/clang/DependentCoawaitExpr/getOperand");
      methods.push_back(data_model.getOperand);
      data_model.getOperatorCoawaitLookup = arboretum_create_named_node("/clang/DependentCoawaitExpr/getOperatorCoawaitLookup");
      methods.push_back(data_model.getOperatorCoawaitLookup);
      data_model.getKeywordLoc = arboretum_create_named_node("/clang/DependentCoawaitExpr/getKeywordLoc");
      methods.push_back(data_model.getKeywordLoc);
      data_model.getBeginLoc58 = arboretum_create_named_node("/clang/DependentCoawaitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc58);
      data_model.getEndLoc58 = arboretum_create_named_node("/clang/DependentCoawaitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc58);
      data_model.children112 = arboretum_create_named_node("/clang/DependentCoawaitExpr/children");
      methods.push_back(data_model.children112);
    arboretum_create_edge(data_model.DependentCoawaitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LambdaExpr = arboretum_create_named_node("/clang/LambdaExpr");
  arboretum_create_edge(data_model.LambdaExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCaptureDefault = arboretum_create_named_node("/clang/LambdaExpr/getCaptureDefault");
      methods.push_back(data_model.getCaptureDefault);
      data_model.getCaptureDefaultLoc = arboretum_create_named_node("/clang/LambdaExpr/getCaptureDefaultLoc");
      methods.push_back(data_model.getCaptureDefaultLoc);
      data_model.captures = arboretum_create_named_node("/clang/LambdaExpr/captures");
      methods.push_back(data_model.captures);
      data_model.capture_begin = arboretum_create_named_node("/clang/LambdaExpr/capture_begin");
      methods.push_back(data_model.capture_begin);
      data_model.capture_end = arboretum_create_named_node("/clang/LambdaExpr/capture_end");
      methods.push_back(data_model.capture_end);
      data_model.capture_size = arboretum_create_named_node("/clang/LambdaExpr/capture_size");
      methods.push_back(data_model.capture_size);
      data_model.explicit_captures = arboretum_create_named_node("/clang/LambdaExpr/explicit_captures");
      methods.push_back(data_model.explicit_captures);
      data_model.explicit_capture_begin = arboretum_create_named_node("/clang/LambdaExpr/explicit_capture_begin");
      methods.push_back(data_model.explicit_capture_begin);
      data_model.explicit_capture_end = arboretum_create_named_node("/clang/LambdaExpr/explicit_capture_end");
      methods.push_back(data_model.explicit_capture_end);
      data_model.implicit_captures = arboretum_create_named_node("/clang/LambdaExpr/implicit_captures");
      methods.push_back(data_model.implicit_captures);
      data_model.implicit_capture_begin = arboretum_create_named_node("/clang/LambdaExpr/implicit_capture_begin");
      methods.push_back(data_model.implicit_capture_begin);
      data_model.implicit_capture_end = arboretum_create_named_node("/clang/LambdaExpr/implicit_capture_end");
      methods.push_back(data_model.implicit_capture_end);
      data_model.capture_inits1 = arboretum_create_named_node("/clang/LambdaExpr/capture_inits");
      methods.push_back(data_model.capture_inits1);
      data_model.capture_init_begin1 = arboretum_create_named_node("/clang/LambdaExpr/capture_init_begin");
      methods.push_back(data_model.capture_init_begin1);
      data_model.capture_init_end1 = arboretum_create_named_node("/clang/LambdaExpr/capture_init_end");
      methods.push_back(data_model.capture_init_end1);
      data_model.getIntroducerRange = arboretum_create_named_node("/clang/LambdaExpr/getIntroducerRange");
      methods.push_back(data_model.getIntroducerRange);
      data_model.getLambdaClass = arboretum_create_named_node("/clang/LambdaExpr/getLambdaClass");
      methods.push_back(data_model.getLambdaClass);
      data_model.getCallOperator = arboretum_create_named_node("/clang/LambdaExpr/getCallOperator");
      methods.push_back(data_model.getCallOperator);
      data_model.getDependentCallOperator = arboretum_create_named_node("/clang/LambdaExpr/getDependentCallOperator");
      methods.push_back(data_model.getDependentCallOperator);
      data_model.getTemplateParameterList = arboretum_create_named_node("/clang/LambdaExpr/getTemplateParameterList");
      methods.push_back(data_model.getTemplateParameterList);
      data_model.getExplicitTemplateParameters = arboretum_create_named_node("/clang/LambdaExpr/getExplicitTemplateParameters");
      methods.push_back(data_model.getExplicitTemplateParameters);
      data_model.getTrailingRequiresClause = arboretum_create_named_node("/clang/LambdaExpr/getTrailingRequiresClause");
      methods.push_back(data_model.getTrailingRequiresClause);
      data_model.isGenericLambda = arboretum_create_named_node("/clang/LambdaExpr/isGenericLambda");
      methods.push_back(data_model.isGenericLambda);
      data_model.getBody12 = arboretum_create_named_node("/clang/LambdaExpr/getBody");
      methods.push_back(data_model.getBody12);
      data_model.getCompoundStmtBody = arboretum_create_named_node("/clang/LambdaExpr/getCompoundStmtBody");
      methods.push_back(data_model.getCompoundStmtBody);
      data_model.isMutable = arboretum_create_named_node("/clang/LambdaExpr/isMutable");
      methods.push_back(data_model.isMutable);
      data_model.hasExplicitParameters = arboretum_create_named_node("/clang/LambdaExpr/hasExplicitParameters");
      methods.push_back(data_model.hasExplicitParameters);
      data_model.hasExplicitResultType = arboretum_create_named_node("/clang/LambdaExpr/hasExplicitResultType");
      methods.push_back(data_model.hasExplicitResultType);
      data_model.getBeginLoc59 = arboretum_create_named_node("/clang/LambdaExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc59);
      data_model.getEndLoc59 = arboretum_create_named_node("/clang/LambdaExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc59);
      data_model.children114 = arboretum_create_named_node("/clang/LambdaExpr/children");
      methods.push_back(data_model.children114);
    arboretum_create_edge(data_model.LambdaExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoyieldExpr = arboretum_create_named_node("/clang/CoyieldExpr");
  arboretum_create_edge(data_model.CoyieldExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CoyieldExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoawaitExpr = arboretum_create_named_node("/clang/CoawaitExpr");
  arboretum_create_edge(data_model.CoawaitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isImplicit = arboretum_create_named_node("/clang/CoawaitExpr/isImplicit");
      methods.push_back(data_model.isImplicit);
    arboretum_create_edge(data_model.CoawaitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MaterializeTemporaryExpr = arboretum_create_named_node("/clang/MaterializeTemporaryExpr");
  arboretum_create_edge(data_model.MaterializeTemporaryExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr6 = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr6);
      data_model.getStorageDuration = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getStorageDuration");
      methods.push_back(data_model.getStorageDuration);
      data_model.getLifetimeExtendedTemporaryDecl1 = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getLifetimeExtendedTemporaryDecl");
      methods.push_back(data_model.getLifetimeExtendedTemporaryDecl1);
      data_model.getExtendingDecl1 = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getExtendingDecl");
      methods.push_back(data_model.getExtendingDecl1);
      data_model.getManglingNumber = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getManglingNumber");
      methods.push_back(data_model.getManglingNumber);
      data_model.isBoundToLvalueReference = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/isBoundToLvalueReference");
      methods.push_back(data_model.isBoundToLvalueReference);
      data_model.getBeginLoc60 = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc60);
      data_model.getEndLoc60 = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc60);
      data_model.children116 = arboretum_create_named_node("/clang/MaterializeTemporaryExpr/children");
      methods.push_back(data_model.children116);
    arboretum_create_edge(data_model.MaterializeTemporaryExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetDirective = arboretum_create_named_node("/clang/OMPTargetDirective");
  arboretum_create_edge(data_model.OMPTargetDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PackExpansionExpr = arboretum_create_named_node("/clang/PackExpansionExpr");
  arboretum_create_edge(data_model.PackExpansionExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPattern2 = arboretum_create_named_node("/clang/PackExpansionExpr/getPattern");
      methods.push_back(data_model.getPattern2);
      data_model.getEllipsisLoc2 = arboretum_create_named_node("/clang/PackExpansionExpr/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc2);
      data_model.getNumExpansions2 = arboretum_create_named_node("/clang/PackExpansionExpr/getNumExpansions");
      methods.push_back(data_model.getNumExpansions2);
      data_model.getBeginLoc61 = arboretum_create_named_node("/clang/PackExpansionExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc61);
      data_model.getEndLoc61 = arboretum_create_named_node("/clang/PackExpansionExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc61);
      data_model.children118 = arboretum_create_named_node("/clang/PackExpansionExpr/children");
      methods.push_back(data_model.children118);
    arboretum_create_edge(data_model.PackExpansionExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXThisExpr = arboretum_create_named_node("/clang/CXXThisExpr");
  arboretum_create_edge(data_model.CXXThisExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLocation7 = arboretum_create_named_node("/clang/CXXThisExpr/getLocation");
      methods.push_back(data_model.getLocation7);
      data_model.getBeginLoc62 = arboretum_create_named_node("/clang/CXXThisExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc62);
      data_model.getEndLoc62 = arboretum_create_named_node("/clang/CXXThisExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc62);
      data_model.isImplicit1 = arboretum_create_named_node("/clang/CXXThisExpr/isImplicit");
      methods.push_back(data_model.isImplicit1);
      data_model.children120 = arboretum_create_named_node("/clang/CXXThisExpr/children");
      methods.push_back(data_model.children120);
    arboretum_create_edge(data_model.CXXThisExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDependentScopeMemberExpr = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr");
  arboretum_create_edge(data_model.CXXDependentScopeMemberExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isImplicitAccess1 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/isImplicitAccess");
      methods.push_back(data_model.isImplicitAccess1);
      data_model.getBase8 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getBase");
      methods.push_back(data_model.getBase8);
      data_model.getBaseType = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getBaseType");
      methods.push_back(data_model.getBaseType);
      data_model.isArrow3 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/isArrow");
      methods.push_back(data_model.isArrow3);
      data_model.getOperatorLoc1 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc1);
      data_model.getQualifier2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getQualifier");
      methods.push_back(data_model.getQualifier2);
      data_model.getQualifierLoc2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc2);
      data_model.getFirstQualifierFoundInScope = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getFirstQualifierFoundInScope");
      methods.push_back(data_model.getFirstQualifierFoundInScope);
      data_model.getMemberNameInfo1 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getMemberNameInfo");
      methods.push_back(data_model.getMemberNameInfo1);
      data_model.getMember = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getMember");
      methods.push_back(data_model.getMember);
      data_model.getMemberLoc1 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getMemberLoc");
      methods.push_back(data_model.getMemberLoc1);
      data_model.getTemplateKeywordLoc2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc2);
      data_model.getLAngleLoc2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc2);
      data_model.getRAngleLoc2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc2);
      data_model.hasTemplateKeyword2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/hasTemplateKeyword");
      methods.push_back(data_model.hasTemplateKeyword2);
      data_model.hasExplicitTemplateArgs3 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs3);
      data_model.getTemplateArgs2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs2);
      data_model.getNumTemplateArgs2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getNumTemplateArgs");
      methods.push_back(data_model.getNumTemplateArgs2);
      data_model.template_arguments2 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/template_arguments");
      methods.push_back(data_model.template_arguments2);
      data_model.getBeginLoc63 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc63);
      data_model.getEndLoc63 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc63);
      data_model.children122 = arboretum_create_named_node("/clang/CXXDependentScopeMemberExpr/children");
      methods.push_back(data_model.children122);
    arboretum_create_edge(data_model.CXXDependentScopeMemberExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OverloadExpr = arboretum_create_named_node("/clang/OverloadExpr");
  arboretum_create_edge(data_model.OverloadExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNamingClass3 = arboretum_create_named_node("/clang/OverloadExpr/getNamingClass");
      methods.push_back(data_model.getNamingClass3);
      data_model.decls_begin = arboretum_create_named_node("/clang/OverloadExpr/decls_begin");
      methods.push_back(data_model.decls_begin);
      data_model.decls_end = arboretum_create_named_node("/clang/OverloadExpr/decls_end");
      methods.push_back(data_model.decls_end);
      data_model.decls = arboretum_create_named_node("/clang/OverloadExpr/decls");
      methods.push_back(data_model.decls);
      data_model.getNumDecls = arboretum_create_named_node("/clang/OverloadExpr/getNumDecls");
      methods.push_back(data_model.getNumDecls);
      data_model.getNameInfo1 = arboretum_create_named_node("/clang/OverloadExpr/getNameInfo");
      methods.push_back(data_model.getNameInfo1);
      data_model.getName1 = arboretum_create_named_node("/clang/OverloadExpr/getName");
      methods.push_back(data_model.getName1);
      data_model.getNameLoc = arboretum_create_named_node("/clang/OverloadExpr/getNameLoc");
      methods.push_back(data_model.getNameLoc);
      data_model.getQualifier3 = arboretum_create_named_node("/clang/OverloadExpr/getQualifier");
      methods.push_back(data_model.getQualifier3);
      data_model.getQualifierLoc3 = arboretum_create_named_node("/clang/OverloadExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc3);
      data_model.getTemplateKeywordLoc3 = arboretum_create_named_node("/clang/OverloadExpr/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc3);
      data_model.getLAngleLoc3 = arboretum_create_named_node("/clang/OverloadExpr/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc3);
      data_model.getRAngleLoc3 = arboretum_create_named_node("/clang/OverloadExpr/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc3);
      data_model.hasTemplateKeyword3 = arboretum_create_named_node("/clang/OverloadExpr/hasTemplateKeyword");
      methods.push_back(data_model.hasTemplateKeyword3);
      data_model.hasExplicitTemplateArgs4 = arboretum_create_named_node("/clang/OverloadExpr/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs4);
      data_model.getTemplateArgs3 = arboretum_create_named_node("/clang/OverloadExpr/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs3);
      data_model.getNumTemplateArgs3 = arboretum_create_named_node("/clang/OverloadExpr/getNumTemplateArgs");
      methods.push_back(data_model.getNumTemplateArgs3);
      data_model.template_arguments3 = arboretum_create_named_node("/clang/OverloadExpr/template_arguments");
      methods.push_back(data_model.template_arguments3);
    arboretum_create_edge(data_model.OverloadExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDepobjDirective = arboretum_create_named_node("/clang/OMPDepobjDirective");
  arboretum_create_edge(data_model.OMPDepobjDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDepobjDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedMemberExpr = arboretum_create_named_node("/clang/UnresolvedMemberExpr");
  arboretum_create_edge(data_model.UnresolvedMemberExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isImplicitAccess2 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/isImplicitAccess");
      methods.push_back(data_model.isImplicitAccess2);
      data_model.getBase10 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getBase");
      methods.push_back(data_model.getBase10);
      data_model.getBaseType1 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getBaseType");
      methods.push_back(data_model.getBaseType1);
      data_model.hasUnresolvedUsing = arboretum_create_named_node("/clang/UnresolvedMemberExpr/hasUnresolvedUsing");
      methods.push_back(data_model.hasUnresolvedUsing);
      data_model.isArrow4 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/isArrow");
      methods.push_back(data_model.isArrow4);
      data_model.getOperatorLoc2 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc2);
      data_model.getNamingClass5 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getNamingClass");
      methods.push_back(data_model.getNamingClass5);
      data_model.getMemberNameInfo2 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getMemberNameInfo");
      methods.push_back(data_model.getMemberNameInfo2);
      data_model.getMemberName = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getMemberName");
      methods.push_back(data_model.getMemberName);
      data_model.getMemberLoc2 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getMemberLoc");
      methods.push_back(data_model.getMemberLoc2);
      data_model.getExprLoc5 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc5);
      data_model.getBeginLoc64 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc64);
      data_model.getEndLoc64 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc64);
      data_model.children124 = arboretum_create_named_node("/clang/UnresolvedMemberExpr/children");
      methods.push_back(data_model.children124);
    arboretum_create_edge(data_model.UnresolvedMemberExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXNewExpr = arboretum_create_named_node("/clang/CXXNewExpr");
  arboretum_create_edge(data_model.CXXNewExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAllocatedType = arboretum_create_named_node("/clang/CXXNewExpr/getAllocatedType");
      methods.push_back(data_model.getAllocatedType);
      data_model.getAllocatedTypeSourceInfo = arboretum_create_named_node("/clang/CXXNewExpr/getAllocatedTypeSourceInfo");
      methods.push_back(data_model.getAllocatedTypeSourceInfo);
      data_model.shouldNullCheckAllocation = arboretum_create_named_node("/clang/CXXNewExpr/shouldNullCheckAllocation");
      methods.push_back(data_model.shouldNullCheckAllocation);
      data_model.getOperatorNew = arboretum_create_named_node("/clang/CXXNewExpr/getOperatorNew");
      methods.push_back(data_model.getOperatorNew);
      data_model.getOperatorDelete = arboretum_create_named_node("/clang/CXXNewExpr/getOperatorDelete");
      methods.push_back(data_model.getOperatorDelete);
      data_model.isArray = arboretum_create_named_node("/clang/CXXNewExpr/isArray");
      methods.push_back(data_model.isArray);
      data_model.getArraySize1 = arboretum_create_named_node("/clang/CXXNewExpr/getArraySize");
      methods.push_back(data_model.getArraySize1);
      data_model.getNumPlacementArgs = arboretum_create_named_node("/clang/CXXNewExpr/getNumPlacementArgs");
      methods.push_back(data_model.getNumPlacementArgs);
      data_model.isParenTypeId = arboretum_create_named_node("/clang/CXXNewExpr/isParenTypeId");
      methods.push_back(data_model.isParenTypeId);
      data_model.getTypeIdParens = arboretum_create_named_node("/clang/CXXNewExpr/getTypeIdParens");
      methods.push_back(data_model.getTypeIdParens);
      data_model.isGlobalNew = arboretum_create_named_node("/clang/CXXNewExpr/isGlobalNew");
      methods.push_back(data_model.isGlobalNew);
      data_model.hasInitializer = arboretum_create_named_node("/clang/CXXNewExpr/hasInitializer");
      methods.push_back(data_model.hasInitializer);
      data_model.getInitializationStyle = arboretum_create_named_node("/clang/CXXNewExpr/getInitializationStyle");
      methods.push_back(data_model.getInitializationStyle);
      data_model.getInitializer1 = arboretum_create_named_node("/clang/CXXNewExpr/getInitializer");
      methods.push_back(data_model.getInitializer1);
      data_model.getConstructExpr = arboretum_create_named_node("/clang/CXXNewExpr/getConstructExpr");
      methods.push_back(data_model.getConstructExpr);
      data_model.passAlignment = arboretum_create_named_node("/clang/CXXNewExpr/passAlignment");
      methods.push_back(data_model.passAlignment);
      data_model.doesUsualArrayDeleteWantSize = arboretum_create_named_node("/clang/CXXNewExpr/doesUsualArrayDeleteWantSize");
      methods.push_back(data_model.doesUsualArrayDeleteWantSize);
      data_model.placement_arguments1 = arboretum_create_named_node("/clang/CXXNewExpr/placement_arguments");
      methods.push_back(data_model.placement_arguments1);
      data_model.placement_arg_begin1 = arboretum_create_named_node("/clang/CXXNewExpr/placement_arg_begin");
      methods.push_back(data_model.placement_arg_begin1);
      data_model.placement_arg_end1 = arboretum_create_named_node("/clang/CXXNewExpr/placement_arg_end");
      methods.push_back(data_model.placement_arg_end1);
      data_model.raw_arg_begin1 = arboretum_create_named_node("/clang/CXXNewExpr/raw_arg_begin");
      methods.push_back(data_model.raw_arg_begin1);
      data_model.raw_arg_end1 = arboretum_create_named_node("/clang/CXXNewExpr/raw_arg_end");
      methods.push_back(data_model.raw_arg_end1);
      data_model.getBeginLoc65 = arboretum_create_named_node("/clang/CXXNewExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc65);
      data_model.getEndLoc65 = arboretum_create_named_node("/clang/CXXNewExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc65);
      data_model.getDirectInitRange = arboretum_create_named_node("/clang/CXXNewExpr/getDirectInitRange");
      methods.push_back(data_model.getDirectInitRange);
      data_model.getSourceRange5 = arboretum_create_named_node("/clang/CXXNewExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange5);
      data_model.children126 = arboretum_create_named_node("/clang/CXXNewExpr/children");
      methods.push_back(data_model.children126);
    arboretum_create_edge(data_model.CXXNewExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ImplicitCastExpr = arboretum_create_named_node("/clang/ImplicitCastExpr");
  arboretum_create_edge(data_model.ImplicitCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isPartOfExplicitCast = arboretum_create_named_node("/clang/ImplicitCastExpr/isPartOfExplicitCast");
      methods.push_back(data_model.isPartOfExplicitCast);
      data_model.getBeginLoc66 = arboretum_create_named_node("/clang/ImplicitCastExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc66);
      data_model.getEndLoc66 = arboretum_create_named_node("/clang/ImplicitCastExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc66);
    arboretum_create_edge(data_model.ImplicitCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CapturedStmt = arboretum_create_named_node("/clang/CapturedStmt");
  arboretum_create_edge(data_model.CapturedStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCapturedStmt2 = arboretum_create_named_node("/clang/CapturedStmt/getCapturedStmt");
      methods.push_back(data_model.getCapturedStmt2);
      data_model.getCapturedDecl1 = arboretum_create_named_node("/clang/CapturedStmt/getCapturedDecl");
      methods.push_back(data_model.getCapturedDecl1);
      data_model.getCapturedRegionKind = arboretum_create_named_node("/clang/CapturedStmt/getCapturedRegionKind");
      methods.push_back(data_model.getCapturedRegionKind);
      data_model.getCapturedRecordDecl = arboretum_create_named_node("/clang/CapturedStmt/getCapturedRecordDecl");
      methods.push_back(data_model.getCapturedRecordDecl);
      data_model.captures2 = arboretum_create_named_node("/clang/CapturedStmt/captures");
      methods.push_back(data_model.captures2);
      data_model.capture_begin2 = arboretum_create_named_node("/clang/CapturedStmt/capture_begin");
      methods.push_back(data_model.capture_begin2);
      data_model.capture_end1 = arboretum_create_named_node("/clang/CapturedStmt/capture_end");
      methods.push_back(data_model.capture_end1);
      data_model.capture_size1 = arboretum_create_named_node("/clang/CapturedStmt/capture_size");
      methods.push_back(data_model.capture_size1);
      data_model.capture_inits3 = arboretum_create_named_node("/clang/CapturedStmt/capture_inits");
      methods.push_back(data_model.capture_inits3);
      data_model.capture_init_begin3 = arboretum_create_named_node("/clang/CapturedStmt/capture_init_begin");
      methods.push_back(data_model.capture_init_begin3);
      data_model.capture_init_end3 = arboretum_create_named_node("/clang/CapturedStmt/capture_init_end");
      methods.push_back(data_model.capture_init_end3);
      data_model.getBeginLoc67 = arboretum_create_named_node("/clang/CapturedStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc67);
      data_model.getEndLoc67 = arboretum_create_named_node("/clang/CapturedStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc67);
      data_model.getSourceRange6 = arboretum_create_named_node("/clang/CapturedStmt/getSourceRange");
      methods.push_back(data_model.getSourceRange6);
      data_model.children128 = arboretum_create_named_node("/clang/CapturedStmt/children");
      methods.push_back(data_model.children128);
    arboretum_create_edge(data_model.CapturedStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXConstructExpr = arboretum_create_named_node("/clang/CXXConstructExpr");
  arboretum_create_edge(data_model.CXXConstructExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getConstructor = arboretum_create_named_node("/clang/CXXConstructExpr/getConstructor");
      methods.push_back(data_model.getConstructor);
      data_model.getLocation8 = arboretum_create_named_node("/clang/CXXConstructExpr/getLocation");
      methods.push_back(data_model.getLocation8);
      data_model.isElidable = arboretum_create_named_node("/clang/CXXConstructExpr/isElidable");
      methods.push_back(data_model.isElidable);
      data_model.hadMultipleCandidates2 = arboretum_create_named_node("/clang/CXXConstructExpr/hadMultipleCandidates");
      methods.push_back(data_model.hadMultipleCandidates2);
      data_model.isListInitialization1 = arboretum_create_named_node("/clang/CXXConstructExpr/isListInitialization");
      methods.push_back(data_model.isListInitialization1);
      data_model.isStdInitListInitialization = arboretum_create_named_node("/clang/CXXConstructExpr/isStdInitListInitialization");
      methods.push_back(data_model.isStdInitListInitialization);
      data_model.requiresZeroInitialization = arboretum_create_named_node("/clang/CXXConstructExpr/requiresZeroInitialization");
      methods.push_back(data_model.requiresZeroInitialization);
      data_model.getConstructionKind = arboretum_create_named_node("/clang/CXXConstructExpr/getConstructionKind");
      methods.push_back(data_model.getConstructionKind);
      data_model.arguments3 = arboretum_create_named_node("/clang/CXXConstructExpr/arguments");
      methods.push_back(data_model.arguments3);
      data_model.arg_begin4 = arboretum_create_named_node("/clang/CXXConstructExpr/arg_begin");
      methods.push_back(data_model.arg_begin4);
      data_model.arg_end4 = arboretum_create_named_node("/clang/CXXConstructExpr/arg_end");
      methods.push_back(data_model.arg_end4);
      data_model.getArgs1 = arboretum_create_named_node("/clang/CXXConstructExpr/getArgs");
      methods.push_back(data_model.getArgs1);
      data_model.getNumArgs2 = arboretum_create_named_node("/clang/CXXConstructExpr/getNumArgs");
      methods.push_back(data_model.getNumArgs2);
      data_model.isImmediateEscalating1 = arboretum_create_named_node("/clang/CXXConstructExpr/isImmediateEscalating");
      methods.push_back(data_model.isImmediateEscalating1);
      data_model.getBeginLoc68 = arboretum_create_named_node("/clang/CXXConstructExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc68);
      data_model.getEndLoc68 = arboretum_create_named_node("/clang/CXXConstructExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc68);
      data_model.getParenOrBraceRange = arboretum_create_named_node("/clang/CXXConstructExpr/getParenOrBraceRange");
      methods.push_back(data_model.getParenOrBraceRange);
      data_model.children130 = arboretum_create_named_node("/clang/CXXConstructExpr/children");
      methods.push_back(data_model.children130);
    arboretum_create_edge(data_model.CXXConstructExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CompoundLiteralExpr = arboretum_create_named_node("/clang/CompoundLiteralExpr");
  arboretum_create_edge(data_model.CompoundLiteralExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInitializer2 = arboretum_create_named_node("/clang/CompoundLiteralExpr/getInitializer");
      methods.push_back(data_model.getInitializer2);
      data_model.isFileScope = arboretum_create_named_node("/clang/CompoundLiteralExpr/isFileScope");
      methods.push_back(data_model.isFileScope);
      data_model.getLParenLoc8 = arboretum_create_named_node("/clang/CompoundLiteralExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc8);
      data_model.getTypeSourceInfo3 = arboretum_create_named_node("/clang/CompoundLiteralExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo3);
      data_model.getBeginLoc69 = arboretum_create_named_node("/clang/CompoundLiteralExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc69);
      data_model.getEndLoc69 = arboretum_create_named_node("/clang/CompoundLiteralExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc69);
      data_model.children132 = arboretum_create_named_node("/clang/CompoundLiteralExpr/children");
      methods.push_back(data_model.children132);
    arboretum_create_edge(data_model.CompoundLiteralExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDefaultInitExpr = arboretum_create_named_node("/clang/CXXDefaultInitExpr");
  arboretum_create_edge(data_model.CXXDefaultInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.hasRewrittenInit = arboretum_create_named_node("/clang/CXXDefaultInitExpr/hasRewrittenInit");
      methods.push_back(data_model.hasRewrittenInit);
      data_model.getField1 = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getField");
      methods.push_back(data_model.getField1);
      data_model.getExpr5 = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getExpr");
      methods.push_back(data_model.getExpr5);
      data_model.getRewrittenExpr = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getRewrittenExpr");
      methods.push_back(data_model.getRewrittenExpr);
      data_model.getUsedContext = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getUsedContext");
      methods.push_back(data_model.getUsedContext);
      data_model.getUsedLocation = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getUsedLocation");
      methods.push_back(data_model.getUsedLocation);
      data_model.getBeginLoc70 = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc70);
      data_model.getEndLoc70 = arboretum_create_named_node("/clang/CXXDefaultInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc70);
      data_model.children134 = arboretum_create_named_node("/clang/CXXDefaultInitExpr/children");
      methods.push_back(data_model.children134);
    arboretum_create_edge(data_model.CXXDefaultInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDefaultArgExpr = arboretum_create_named_node("/clang/CXXDefaultArgExpr");
  arboretum_create_edge(data_model.CXXDefaultArgExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getParam = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getParam");
      methods.push_back(data_model.getParam);
      data_model.hasRewrittenInit1 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/hasRewrittenInit");
      methods.push_back(data_model.hasRewrittenInit1);
      data_model.getExpr7 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getExpr");
      methods.push_back(data_model.getExpr7);
      data_model.getRewrittenExpr3 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getRewrittenExpr");
      methods.push_back(data_model.getRewrittenExpr3);
      data_model.getAdjustedRewrittenExpr1 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getAdjustedRewrittenExpr");
      methods.push_back(data_model.getAdjustedRewrittenExpr1);
      data_model.getUsedContext2 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getUsedContext");
      methods.push_back(data_model.getUsedContext2);
      data_model.getUsedLocation1 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getUsedLocation");
      methods.push_back(data_model.getUsedLocation1);
      data_model.getBeginLoc71 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc71);
      data_model.getEndLoc71 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc71);
      data_model.getExprLoc6 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc6);
      data_model.children136 = arboretum_create_named_node("/clang/CXXDefaultArgExpr/children");
      methods.push_back(data_model.children136);
    arboretum_create_edge(data_model.CXXDefaultArgExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPSectionDirective = arboretum_create_named_node("/clang/OMPSectionDirective");
  arboretum_create_edge(data_model.OMPSectionDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPSectionDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXThrowExpr = arboretum_create_named_node("/clang/CXXThrowExpr");
  arboretum_create_edge(data_model.CXXThrowExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr7 = arboretum_create_named_node("/clang/CXXThrowExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr7);
      data_model.getThrowLoc1 = arboretum_create_named_node("/clang/CXXThrowExpr/getThrowLoc");
      methods.push_back(data_model.getThrowLoc1);
      data_model.isThrownVariableInScope = arboretum_create_named_node("/clang/CXXThrowExpr/isThrownVariableInScope");
      methods.push_back(data_model.isThrownVariableInScope);
      data_model.getBeginLoc72 = arboretum_create_named_node("/clang/CXXThrowExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc72);
      data_model.getEndLoc72 = arboretum_create_named_node("/clang/CXXThrowExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc72);
      data_model.children138 = arboretum_create_named_node("/clang/CXXThrowExpr/children");
      methods.push_back(data_model.children138);
    arboretum_create_edge(data_model.CXXThrowExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSPropertySubscriptExpr = arboretum_create_named_node("/clang/MSPropertySubscriptExpr");
  arboretum_create_edge(data_model.MSPropertySubscriptExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBase12 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/getBase");
      methods.push_back(data_model.getBase12);
      data_model.getIdx1 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/getIdx");
      methods.push_back(data_model.getIdx1);
      data_model.getBeginLoc73 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc73);
      data_model.getEndLoc73 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc73);
      data_model.getRBracketLoc1 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/getRBracketLoc");
      methods.push_back(data_model.getRBracketLoc1);
      data_model.getExprLoc7 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc7);
      data_model.children140 = arboretum_create_named_node("/clang/MSPropertySubscriptExpr/children");
      methods.push_back(data_model.children140);
    arboretum_create_edge(data_model.MSPropertySubscriptExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXRewrittenBinaryOperator = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator");
  arboretum_create_edge(data_model.CXXRewrittenBinaryOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSemanticForm1 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getSemanticForm");
      methods.push_back(data_model.getSemanticForm1);
      data_model.getDecomposedForm = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getDecomposedForm");
      methods.push_back(data_model.getDecomposedForm);
      data_model.isReversed = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/isReversed");
      methods.push_back(data_model.isReversed);
      data_model.getOperator1 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getOperator");
      methods.push_back(data_model.getOperator1);
      data_model.getOpcode = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getOpcode");
      methods.push_back(data_model.getOpcode);
      data_model.getOpcodeStr1 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getOpcodeStr");
      methods.push_back(data_model.getOpcodeStr1);
      data_model.isComparisonOp = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/isComparisonOp");
      methods.push_back(data_model.isComparisonOp);
      data_model.isAssignmentOp = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/isAssignmentOp");
      methods.push_back(data_model.isAssignmentOp);
      data_model.getLHS3 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getLHS");
      methods.push_back(data_model.getLHS3);
      data_model.getRHS3 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getRHS");
      methods.push_back(data_model.getRHS3);
      data_model.getOperatorLoc3 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc3);
      data_model.getExprLoc8 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getExprLoc");
      methods.push_back(data_model.getExprLoc8);
      data_model.getBeginLoc74 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getBeginLoc");
      methods.push_back(data_model.getBeginLoc74);
      data_model.getEndLoc74 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getEndLoc");
      methods.push_back(data_model.getEndLoc74);
      data_model.getSourceRange7 = arboretum_create_named_node("/clang/CXXRewrittenBinaryOperator/getSourceRange");
      methods.push_back(data_model.getSourceRange7);
    arboretum_create_edge(data_model.CXXRewrittenBinaryOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MatrixSubscriptExpr = arboretum_create_named_node("/clang/MatrixSubscriptExpr");
  arboretum_create_edge(data_model.MatrixSubscriptExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isIncomplete = arboretum_create_named_node("/clang/MatrixSubscriptExpr/isIncomplete");
      methods.push_back(data_model.isIncomplete);
      data_model.getBase14 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getBase");
      methods.push_back(data_model.getBase14);
      data_model.getRowIdx1 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getRowIdx");
      methods.push_back(data_model.getRowIdx1);
      data_model.getColumnIdx1 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getColumnIdx");
      methods.push_back(data_model.getColumnIdx1);
      data_model.getBeginLoc75 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc75);
      data_model.getEndLoc75 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc75);
      data_model.getExprLoc9 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc9);
      data_model.getRBracketLoc2 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/getRBracketLoc");
      methods.push_back(data_model.getRBracketLoc2);
      data_model.children143 = arboretum_create_named_node("/clang/MatrixSubscriptExpr/children");
      methods.push_back(data_model.children143);
    arboretum_create_edge(data_model.MatrixSubscriptExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAtSynchronizedStmt = arboretum_create_named_node("/clang/ObjCAtSynchronizedStmt");
  arboretum_create_edge(data_model.ObjCAtSynchronizedStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAtSynchronizedStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AtomicExpr = arboretum_create_named_node("/clang/AtomicExpr");
  arboretum_create_edge(data_model.AtomicExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPtr = arboretum_create_named_node("/clang/AtomicExpr/getPtr");
      methods.push_back(data_model.getPtr);
      data_model.getOrder = arboretum_create_named_node("/clang/AtomicExpr/getOrder");
      methods.push_back(data_model.getOrder);
      data_model.getScope = arboretum_create_named_node("/clang/AtomicExpr/getScope");
      methods.push_back(data_model.getScope);
      data_model.getVal1 = arboretum_create_named_node("/clang/AtomicExpr/getVal1");
      methods.push_back(data_model.getVal1);
      data_model.getOrderFail = arboretum_create_named_node("/clang/AtomicExpr/getOrderFail");
      methods.push_back(data_model.getOrderFail);
      data_model.getVal2 = arboretum_create_named_node("/clang/AtomicExpr/getVal2");
      methods.push_back(data_model.getVal2);
      data_model.getWeak = arboretum_create_named_node("/clang/AtomicExpr/getWeak");
      methods.push_back(data_model.getWeak);
      data_model.getValueType = arboretum_create_named_node("/clang/AtomicExpr/getValueType");
      methods.push_back(data_model.getValueType);
      data_model.getOp = arboretum_create_named_node("/clang/AtomicExpr/getOp");
      methods.push_back(data_model.getOp);
      data_model.getOpAsString = arboretum_create_named_node("/clang/AtomicExpr/getOpAsString");
      methods.push_back(data_model.getOpAsString);
      data_model.getNumSubExprs2 = arboretum_create_named_node("/clang/AtomicExpr/getNumSubExprs");
      methods.push_back(data_model.getNumSubExprs2);
      data_model.getSubExprs2 = arboretum_create_named_node("/clang/AtomicExpr/getSubExprs");
      methods.push_back(data_model.getSubExprs2);
      data_model.isVolatile1 = arboretum_create_named_node("/clang/AtomicExpr/isVolatile");
      methods.push_back(data_model.isVolatile1);
      data_model.isCmpXChg = arboretum_create_named_node("/clang/AtomicExpr/isCmpXChg");
      methods.push_back(data_model.isCmpXChg);
      data_model.isOpenCL = arboretum_create_named_node("/clang/AtomicExpr/isOpenCL");
      methods.push_back(data_model.isOpenCL);
      data_model.getBuiltinLoc1 = arboretum_create_named_node("/clang/AtomicExpr/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc1);
      data_model.getRParenLoc11 = arboretum_create_named_node("/clang/AtomicExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc11);
      data_model.getBeginLoc77 = arboretum_create_named_node("/clang/AtomicExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc77);
      data_model.getEndLoc77 = arboretum_create_named_node("/clang/AtomicExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc77);
      data_model.children147 = arboretum_create_named_node("/clang/AtomicExpr/children");
      methods.push_back(data_model.children147);
      data_model.getScopeModel1 = arboretum_create_named_node("/clang/AtomicExpr/getScopeModel");
      methods.push_back(data_model.getScopeModel1);
    arboretum_create_edge(data_model.AtomicExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PseudoObjectExpr = arboretum_create_named_node("/clang/PseudoObjectExpr");
  arboretum_create_edge(data_model.PseudoObjectExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSyntacticForm1 = arboretum_create_named_node("/clang/PseudoObjectExpr/getSyntacticForm");
      methods.push_back(data_model.getSyntacticForm1);
      data_model.getResultExprIndex = arboretum_create_named_node("/clang/PseudoObjectExpr/getResultExprIndex");
      methods.push_back(data_model.getResultExprIndex);
      data_model.getResultExpr1 = arboretum_create_named_node("/clang/PseudoObjectExpr/getResultExpr");
      methods.push_back(data_model.getResultExpr1);
      data_model.getNumSemanticExprs = arboretum_create_named_node("/clang/PseudoObjectExpr/getNumSemanticExprs");
      methods.push_back(data_model.getNumSemanticExprs);
      data_model.semantics_begin1 = arboretum_create_named_node("/clang/PseudoObjectExpr/semantics_begin");
      methods.push_back(data_model.semantics_begin1);
      data_model.semantics_end1 = arboretum_create_named_node("/clang/PseudoObjectExpr/semantics_end");
      methods.push_back(data_model.semantics_end1);
      data_model.semantics1 = arboretum_create_named_node("/clang/PseudoObjectExpr/semantics");
      methods.push_back(data_model.semantics1);
      data_model.getExprLoc10 = arboretum_create_named_node("/clang/PseudoObjectExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc10);
      data_model.getBeginLoc78 = arboretum_create_named_node("/clang/PseudoObjectExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc78);
      data_model.getEndLoc78 = arboretum_create_named_node("/clang/PseudoObjectExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc78);
      data_model.children149 = arboretum_create_named_node("/clang/PseudoObjectExpr/children");
      methods.push_back(data_model.children149);
    arboretum_create_edge(data_model.PseudoObjectExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParenExpr = arboretum_create_named_node("/clang/ParenExpr");
  arboretum_create_edge(data_model.ParenExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr9 = arboretum_create_named_node("/clang/ParenExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr9);
      data_model.getBeginLoc79 = arboretum_create_named_node("/clang/ParenExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc79);
      data_model.getEndLoc79 = arboretum_create_named_node("/clang/ParenExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc79);
      data_model.getLParen = arboretum_create_named_node("/clang/ParenExpr/getLParen");
      methods.push_back(data_model.getLParen);
      data_model.getRParen = arboretum_create_named_node("/clang/ParenExpr/getRParen");
      methods.push_back(data_model.getRParen);
      data_model.children151 = arboretum_create_named_node("/clang/ParenExpr/children");
      methods.push_back(data_model.children151);
    arboretum_create_edge(data_model.ParenExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AsTypeExpr = arboretum_create_named_node("/clang/AsTypeExpr");
  arboretum_create_edge(data_model.AsTypeExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSrcExpr = arboretum_create_named_node("/clang/AsTypeExpr/getSrcExpr");
      methods.push_back(data_model.getSrcExpr);
      data_model.getBuiltinLoc2 = arboretum_create_named_node("/clang/AsTypeExpr/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc2);
      data_model.getRParenLoc12 = arboretum_create_named_node("/clang/AsTypeExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc12);
      data_model.getBeginLoc80 = arboretum_create_named_node("/clang/AsTypeExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc80);
      data_model.getEndLoc80 = arboretum_create_named_node("/clang/AsTypeExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc80);
      data_model.children153 = arboretum_create_named_node("/clang/AsTypeExpr/children");
      methods.push_back(data_model.children153);
    arboretum_create_edge(data_model.AsTypeExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExtVectorElementExpr = arboretum_create_named_node("/clang/ExtVectorElementExpr");
  arboretum_create_edge(data_model.ExtVectorElementExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBase15 = arboretum_create_named_node("/clang/ExtVectorElementExpr/getBase");
      methods.push_back(data_model.getBase15);
      data_model.getAccessor = arboretum_create_named_node("/clang/ExtVectorElementExpr/getAccessor");
      methods.push_back(data_model.getAccessor);
      data_model.getAccessorLoc = arboretum_create_named_node("/clang/ExtVectorElementExpr/getAccessorLoc");
      methods.push_back(data_model.getAccessorLoc);
      data_model.getNumElements1 = arboretum_create_named_node("/clang/ExtVectorElementExpr/getNumElements");
      methods.push_back(data_model.getNumElements1);
      data_model.containsDuplicateElements = arboretum_create_named_node("/clang/ExtVectorElementExpr/containsDuplicateElements");
      methods.push_back(data_model.containsDuplicateElements);
      data_model.getBeginLoc81 = arboretum_create_named_node("/clang/ExtVectorElementExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc81);
      data_model.getEndLoc81 = arboretum_create_named_node("/clang/ExtVectorElementExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc81);
      data_model.isArrow5 = arboretum_create_named_node("/clang/ExtVectorElementExpr/isArrow");
      methods.push_back(data_model.isArrow5);
      data_model.children155 = arboretum_create_named_node("/clang/ExtVectorElementExpr/children");
      methods.push_back(data_model.children155);
    arboretum_create_edge(data_model.ExtVectorElementExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParenListExpr = arboretum_create_named_node("/clang/ParenListExpr");
  arboretum_create_edge(data_model.ParenListExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNumExprs = arboretum_create_named_node("/clang/ParenListExpr/getNumExprs");
      methods.push_back(data_model.getNumExprs);
      data_model.getLParenLoc9 = arboretum_create_named_node("/clang/ParenListExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc9);
      data_model.getRParenLoc13 = arboretum_create_named_node("/clang/ParenListExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc13);
      data_model.getBeginLoc82 = arboretum_create_named_node("/clang/ParenListExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc82);
      data_model.getEndLoc82 = arboretum_create_named_node("/clang/ParenListExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc82);
      data_model.children157 = arboretum_create_named_node("/clang/ParenListExpr/children");
      methods.push_back(data_model.children157);
    arboretum_create_edge(data_model.ParenListExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoInitExpr = arboretum_create_named_node("/clang/NoInitExpr");
  arboretum_create_edge(data_model.NoInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc83 = arboretum_create_named_node("/clang/NoInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc83);
      data_model.getEndLoc83 = arboretum_create_named_node("/clang/NoInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc83);
      data_model.children159 = arboretum_create_named_node("/clang/NoInitExpr/children");
      methods.push_back(data_model.children159);
    arboretum_create_edge(data_model.NoInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArrayInitIndexExpr = arboretum_create_named_node("/clang/ArrayInitIndexExpr");
  arboretum_create_edge(data_model.ArrayInitIndexExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc84 = arboretum_create_named_node("/clang/ArrayInitIndexExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc84);
      data_model.getEndLoc84 = arboretum_create_named_node("/clang/ArrayInitIndexExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc84);
      data_model.children161 = arboretum_create_named_node("/clang/ArrayInitIndexExpr/children");
      methods.push_back(data_model.children161);
    arboretum_create_edge(data_model.ArrayInitIndexExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArrayInitLoopExpr = arboretum_create_named_node("/clang/ArrayInitLoopExpr");
  arboretum_create_edge(data_model.ArrayInitLoopExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCommonExpr = arboretum_create_named_node("/clang/ArrayInitLoopExpr/getCommonExpr");
      methods.push_back(data_model.getCommonExpr);
      data_model.getSubExpr11 = arboretum_create_named_node("/clang/ArrayInitLoopExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr11);
      data_model.getArraySize2 = arboretum_create_named_node("/clang/ArrayInitLoopExpr/getArraySize");
      methods.push_back(data_model.getArraySize2);
      data_model.getBeginLoc85 = arboretum_create_named_node("/clang/ArrayInitLoopExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc85);
      data_model.getEndLoc85 = arboretum_create_named_node("/clang/ArrayInitLoopExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc85);
      data_model.children163 = arboretum_create_named_node("/clang/ArrayInitLoopExpr/children");
      methods.push_back(data_model.children163);
    arboretum_create_edge(data_model.ArrayInitLoopExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConvertVectorExpr = arboretum_create_named_node("/clang/ConvertVectorExpr");
  arboretum_create_edge(data_model.ConvertVectorExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSrcExpr1 = arboretum_create_named_node("/clang/ConvertVectorExpr/getSrcExpr");
      methods.push_back(data_model.getSrcExpr1);
      data_model.getTypeSourceInfo4 = arboretum_create_named_node("/clang/ConvertVectorExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo4);
      data_model.getBuiltinLoc3 = arboretum_create_named_node("/clang/ConvertVectorExpr/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc3);
      data_model.getRParenLoc14 = arboretum_create_named_node("/clang/ConvertVectorExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc14);
      data_model.getBeginLoc86 = arboretum_create_named_node("/clang/ConvertVectorExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc86);
      data_model.getEndLoc86 = arboretum_create_named_node("/clang/ConvertVectorExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc86);
      data_model.children165 = arboretum_create_named_node("/clang/ConvertVectorExpr/children");
      methods.push_back(data_model.children165);
    arboretum_create_edge(data_model.ConvertVectorExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConditionalOperator = arboretum_create_named_node("/clang/ConditionalOperator");
  arboretum_create_edge(data_model.ConditionalOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCond9 = arboretum_create_named_node("/clang/ConditionalOperator/getCond");
      methods.push_back(data_model.getCond9);
      data_model.getTrueExpr2 = arboretum_create_named_node("/clang/ConditionalOperator/getTrueExpr");
      methods.push_back(data_model.getTrueExpr2);
      data_model.getFalseExpr2 = arboretum_create_named_node("/clang/ConditionalOperator/getFalseExpr");
      methods.push_back(data_model.getFalseExpr2);
      data_model.getLHS4 = arboretum_create_named_node("/clang/ConditionalOperator/getLHS");
      methods.push_back(data_model.getLHS4);
      data_model.getRHS4 = arboretum_create_named_node("/clang/ConditionalOperator/getRHS");
      methods.push_back(data_model.getRHS4);
      data_model.getBeginLoc87 = arboretum_create_named_node("/clang/ConditionalOperator/getBeginLoc");
      methods.push_back(data_model.getBeginLoc87);
      data_model.getEndLoc87 = arboretum_create_named_node("/clang/ConditionalOperator/getEndLoc");
      methods.push_back(data_model.getEndLoc87);
      data_model.children167 = arboretum_create_named_node("/clang/ConditionalOperator/children");
      methods.push_back(data_model.children167);
    arboretum_create_edge(data_model.ConditionalOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BinaryOperator = arboretum_create_named_node("/clang/BinaryOperator");
  arboretum_create_edge(data_model.BinaryOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExprLoc11 = arboretum_create_named_node("/clang/BinaryOperator/getExprLoc");
      methods.push_back(data_model.getExprLoc11);
      data_model.getOperatorLoc4 = arboretum_create_named_node("/clang/BinaryOperator/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc4);
      data_model.getOpcode1 = arboretum_create_named_node("/clang/BinaryOperator/getOpcode");
      methods.push_back(data_model.getOpcode1);
      data_model.getLHS5 = arboretum_create_named_node("/clang/BinaryOperator/getLHS");
      methods.push_back(data_model.getLHS5);
      data_model.getRHS5 = arboretum_create_named_node("/clang/BinaryOperator/getRHS");
      methods.push_back(data_model.getRHS5);
      data_model.getBeginLoc88 = arboretum_create_named_node("/clang/BinaryOperator/getBeginLoc");
      methods.push_back(data_model.getBeginLoc88);
      data_model.getEndLoc88 = arboretum_create_named_node("/clang/BinaryOperator/getEndLoc");
      methods.push_back(data_model.getEndLoc88);
      data_model.getOpcodeStr3 = arboretum_create_named_node("/clang/BinaryOperator/getOpcodeStr");
      methods.push_back(data_model.getOpcodeStr3);
      data_model.isPtrMemOp1 = arboretum_create_named_node("/clang/BinaryOperator/isPtrMemOp");
      methods.push_back(data_model.isPtrMemOp1);
      data_model.isMultiplicativeOp1 = arboretum_create_named_node("/clang/BinaryOperator/isMultiplicativeOp");
      methods.push_back(data_model.isMultiplicativeOp1);
      data_model.isAdditiveOp1 = arboretum_create_named_node("/clang/BinaryOperator/isAdditiveOp");
      methods.push_back(data_model.isAdditiveOp1);
      data_model.isShiftOp1 = arboretum_create_named_node("/clang/BinaryOperator/isShiftOp");
      methods.push_back(data_model.isShiftOp1);
      data_model.isBitwiseOp1 = arboretum_create_named_node("/clang/BinaryOperator/isBitwiseOp");
      methods.push_back(data_model.isBitwiseOp1);
      data_model.isRelationalOp1 = arboretum_create_named_node("/clang/BinaryOperator/isRelationalOp");
      methods.push_back(data_model.isRelationalOp1);
      data_model.isEqualityOp1 = arboretum_create_named_node("/clang/BinaryOperator/isEqualityOp");
      methods.push_back(data_model.isEqualityOp1);
      data_model.isComparisonOp2 = arboretum_create_named_node("/clang/BinaryOperator/isComparisonOp");
      methods.push_back(data_model.isComparisonOp2);
      data_model.isCommaOp1 = arboretum_create_named_node("/clang/BinaryOperator/isCommaOp");
      methods.push_back(data_model.isCommaOp1);
      data_model.isLogicalOp1 = arboretum_create_named_node("/clang/BinaryOperator/isLogicalOp");
      methods.push_back(data_model.isLogicalOp1);
      data_model.isAssignmentOp2 = arboretum_create_named_node("/clang/BinaryOperator/isAssignmentOp");
      methods.push_back(data_model.isAssignmentOp2);
      data_model.isCompoundAssignmentOp1 = arboretum_create_named_node("/clang/BinaryOperator/isCompoundAssignmentOp");
      methods.push_back(data_model.isCompoundAssignmentOp1);
      data_model.isShiftAssignOp1 = arboretum_create_named_node("/clang/BinaryOperator/isShiftAssignOp");
      methods.push_back(data_model.isShiftAssignOp1);
      data_model.children169 = arboretum_create_named_node("/clang/BinaryOperator/children");
      methods.push_back(data_model.children169);
      data_model.hasStoredFPFeatures1 = arboretum_create_named_node("/clang/BinaryOperator/hasStoredFPFeatures");
      methods.push_back(data_model.hasStoredFPFeatures1);
      data_model.getStoredFPFeatures1 = arboretum_create_named_node("/clang/BinaryOperator/getStoredFPFeatures");
      methods.push_back(data_model.getStoredFPFeatures1);
      data_model.getFPFeatures = arboretum_create_named_node("/clang/BinaryOperator/getFPFeatures");
      methods.push_back(data_model.getFPFeatures);
    arboretum_create_edge(data_model.BinaryOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXFunctionalCastExpr = arboretum_create_named_node("/clang/CXXFunctionalCastExpr");
  arboretum_create_edge(data_model.CXXFunctionalCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLParenLoc10 = arboretum_create_named_node("/clang/CXXFunctionalCastExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc10);
      data_model.getRParenLoc15 = arboretum_create_named_node("/clang/CXXFunctionalCastExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc15);
      data_model.isListInitialization2 = arboretum_create_named_node("/clang/CXXFunctionalCastExpr/isListInitialization");
      methods.push_back(data_model.isListInitialization2);
      data_model.getBeginLoc89 = arboretum_create_named_node("/clang/CXXFunctionalCastExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc89);
      data_model.getEndLoc89 = arboretum_create_named_node("/clang/CXXFunctionalCastExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc89);
    arboretum_create_edge(data_model.CXXFunctionalCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnaryOperator = arboretum_create_named_node("/clang/UnaryOperator");
  arboretum_create_edge(data_model.UnaryOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOpcode2 = arboretum_create_named_node("/clang/UnaryOperator/getOpcode");
      methods.push_back(data_model.getOpcode2);
      data_model.getSubExpr12 = arboretum_create_named_node("/clang/UnaryOperator/getSubExpr");
      methods.push_back(data_model.getSubExpr12);
      data_model.getOperatorLoc5 = arboretum_create_named_node("/clang/UnaryOperator/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc5);
      data_model.canOverflow = arboretum_create_named_node("/clang/UnaryOperator/canOverflow");
      methods.push_back(data_model.canOverflow);
      data_model.isPrefix1 = arboretum_create_named_node("/clang/UnaryOperator/isPrefix");
      methods.push_back(data_model.isPrefix1);
      data_model.isPostfix1 = arboretum_create_named_node("/clang/UnaryOperator/isPostfix");
      methods.push_back(data_model.isPostfix1);
      data_model.isIncrementOp1 = arboretum_create_named_node("/clang/UnaryOperator/isIncrementOp");
      methods.push_back(data_model.isIncrementOp1);
      data_model.isDecrementOp1 = arboretum_create_named_node("/clang/UnaryOperator/isDecrementOp");
      methods.push_back(data_model.isDecrementOp1);
      data_model.isIncrementDecrementOp1 = arboretum_create_named_node("/clang/UnaryOperator/isIncrementDecrementOp");
      methods.push_back(data_model.isIncrementDecrementOp1);
      data_model.isArithmeticOp1 = arboretum_create_named_node("/clang/UnaryOperator/isArithmeticOp");
      methods.push_back(data_model.isArithmeticOp1);
      data_model.getBeginLoc90 = arboretum_create_named_node("/clang/UnaryOperator/getBeginLoc");
      methods.push_back(data_model.getBeginLoc90);
      data_model.getEndLoc90 = arboretum_create_named_node("/clang/UnaryOperator/getEndLoc");
      methods.push_back(data_model.getEndLoc90);
      data_model.getExprLoc12 = arboretum_create_named_node("/clang/UnaryOperator/getExprLoc");
      methods.push_back(data_model.getExprLoc12);
      data_model.children171 = arboretum_create_named_node("/clang/UnaryOperator/children");
      methods.push_back(data_model.children171);
      data_model.hasStoredFPFeatures2 = arboretum_create_named_node("/clang/UnaryOperator/hasStoredFPFeatures");
      methods.push_back(data_model.hasStoredFPFeatures2);
      data_model.getStoredFPFeatures2 = arboretum_create_named_node("/clang/UnaryOperator/getStoredFPFeatures");
      methods.push_back(data_model.getStoredFPFeatures2);
      data_model.getFPOptionsOverride = arboretum_create_named_node("/clang/UnaryOperator/getFPOptionsOverride");
      methods.push_back(data_model.getFPOptionsOverride);
    arboretum_create_edge(data_model.UnaryOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDynamicCastExpr = arboretum_create_named_node("/clang/CXXDynamicCastExpr");
  arboretum_create_edge(data_model.CXXDynamicCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isAlwaysNull = arboretum_create_named_node("/clang/CXXDynamicCastExpr/isAlwaysNull");
      methods.push_back(data_model.isAlwaysNull);
    arboretum_create_edge(data_model.CXXDynamicCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXScalarValueInitExpr = arboretum_create_named_node("/clang/CXXScalarValueInitExpr");
  arboretum_create_edge(data_model.CXXScalarValueInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeSourceInfo5 = arboretum_create_named_node("/clang/CXXScalarValueInitExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo5);
      data_model.getRParenLoc16 = arboretum_create_named_node("/clang/CXXScalarValueInitExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc16);
      data_model.getBeginLoc91 = arboretum_create_named_node("/clang/CXXScalarValueInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc91);
      data_model.getEndLoc91 = arboretum_create_named_node("/clang/CXXScalarValueInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc91);
      data_model.children173 = arboretum_create_named_node("/clang/CXXScalarValueInitExpr/children");
      methods.push_back(data_model.children173);
    arboretum_create_edge(data_model.CXXScalarValueInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CStyleCastExpr = arboretum_create_named_node("/clang/CStyleCastExpr");
  arboretum_create_edge(data_model.CStyleCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLParenLoc11 = arboretum_create_named_node("/clang/CStyleCastExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc11);
      data_model.getRParenLoc17 = arboretum_create_named_node("/clang/CStyleCastExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc17);
      data_model.getBeginLoc92 = arboretum_create_named_node("/clang/CStyleCastExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc92);
      data_model.getEndLoc92 = arboretum_create_named_node("/clang/CStyleCastExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc92);
    arboretum_create_edge(data_model.CStyleCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IntegerLiteral = arboretum_create_named_node("/clang/IntegerLiteral");
  arboretum_create_edge(data_model.IntegerLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc93 = arboretum_create_named_node("/clang/IntegerLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc93);
      data_model.getEndLoc93 = arboretum_create_named_node("/clang/IntegerLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc93);
      data_model.getLocation9 = arboretum_create_named_node("/clang/IntegerLiteral/getLocation");
      methods.push_back(data_model.getLocation9);
      data_model.children175 = arboretum_create_named_node("/clang/IntegerLiteral/children");
      methods.push_back(data_model.children175);
    arboretum_create_edge(data_model.IntegerLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXConstCastExpr = arboretum_create_named_node("/clang/CXXConstCastExpr");
  arboretum_create_edge(data_model.CXXConstCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CXXConstCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CallExpr = arboretum_create_named_node("/clang/CallExpr");
  arboretum_create_edge(data_model.CallExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCallee2 = arboretum_create_named_node("/clang/CallExpr/getCallee");
      methods.push_back(data_model.getCallee2);
      data_model.getADLCallKind = arboretum_create_named_node("/clang/CallExpr/getADLCallKind");
      methods.push_back(data_model.getADLCallKind);
      data_model.usesADL = arboretum_create_named_node("/clang/CallExpr/usesADL");
      methods.push_back(data_model.usesADL);
      data_model.hasStoredFPFeatures3 = arboretum_create_named_node("/clang/CallExpr/hasStoredFPFeatures");
      methods.push_back(data_model.hasStoredFPFeatures3);
      data_model.getCalleeDecl1 = arboretum_create_named_node("/clang/CallExpr/getCalleeDecl");
      methods.push_back(data_model.getCalleeDecl1);
      data_model.getDirectCallee1 = arboretum_create_named_node("/clang/CallExpr/getDirectCallee");
      methods.push_back(data_model.getDirectCallee1);
      data_model.getNumArgs3 = arboretum_create_named_node("/clang/CallExpr/getNumArgs");
      methods.push_back(data_model.getNumArgs3);
      data_model.getArgs3 = arboretum_create_named_node("/clang/CallExpr/getArgs");
      methods.push_back(data_model.getArgs3);
      data_model.arguments5 = arboretum_create_named_node("/clang/CallExpr/arguments");
      methods.push_back(data_model.arguments5);
      data_model.arg_begin6 = arboretum_create_named_node("/clang/CallExpr/arg_begin");
      methods.push_back(data_model.arg_begin6);
      data_model.arg_end6 = arboretum_create_named_node("/clang/CallExpr/arg_end");
      methods.push_back(data_model.arg_end6);
      data_model.getStoredFPFeatures3 = arboretum_create_named_node("/clang/CallExpr/getStoredFPFeatures");
      methods.push_back(data_model.getStoredFPFeatures3);
      data_model.getFPFeatures1 = arboretum_create_named_node("/clang/CallExpr/getFPFeatures");
      methods.push_back(data_model.getFPFeatures1);
      data_model.getBuiltinCallee = arboretum_create_named_node("/clang/CallExpr/getBuiltinCallee");
      methods.push_back(data_model.getBuiltinCallee);
      data_model.getRParenLoc18 = arboretum_create_named_node("/clang/CallExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc18);
      data_model.getBeginLoc94 = arboretum_create_named_node("/clang/CallExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc94);
      data_model.getEndLoc94 = arboretum_create_named_node("/clang/CallExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc94);
      data_model.isCallToStdMove = arboretum_create_named_node("/clang/CallExpr/isCallToStdMove");
      methods.push_back(data_model.isCallToStdMove);
      data_model.children177 = arboretum_create_named_node("/clang/CallExpr/children");
      methods.push_back(data_model.children177);
    arboretum_create_edge(data_model.CallExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnaryExprOrTypeTraitExpr = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr");
  arboretum_create_edge(data_model.UnaryExprOrTypeTraitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getKind1 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getKind");
      methods.push_back(data_model.getKind1);
      data_model.isArgumentType = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/isArgumentType");
      methods.push_back(data_model.isArgumentType);
      data_model.getArgumentType = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getArgumentType");
      methods.push_back(data_model.getArgumentType);
      data_model.getArgumentTypeInfo = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getArgumentTypeInfo");
      methods.push_back(data_model.getArgumentTypeInfo);
      data_model.getArgumentExpr1 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getArgumentExpr");
      methods.push_back(data_model.getArgumentExpr1);
      data_model.getTypeOfArgument = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getTypeOfArgument");
      methods.push_back(data_model.getTypeOfArgument);
      data_model.getOperatorLoc6 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc6);
      data_model.getRParenLoc19 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc19);
      data_model.getBeginLoc95 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc95);
      data_model.getEndLoc95 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc95);
      data_model.children179 = arboretum_create_named_node("/clang/UnaryExprOrTypeTraitExpr/children");
      methods.push_back(data_model.children179);
    arboretum_create_edge(data_model.UnaryExprOrTypeTraitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OffsetOfExpr = arboretum_create_named_node("/clang/OffsetOfExpr");
  arboretum_create_edge(data_model.OffsetOfExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOperatorLoc7 = arboretum_create_named_node("/clang/OffsetOfExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc7);
      data_model.getRParenLoc20 = arboretum_create_named_node("/clang/OffsetOfExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc20);
      data_model.getTypeSourceInfo6 = arboretum_create_named_node("/clang/OffsetOfExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo6);
      data_model.getNumComponents = arboretum_create_named_node("/clang/OffsetOfExpr/getNumComponents");
      methods.push_back(data_model.getNumComponents);
      data_model.getNumExpressions = arboretum_create_named_node("/clang/OffsetOfExpr/getNumExpressions");
      methods.push_back(data_model.getNumExpressions);
      data_model.getBeginLoc96 = arboretum_create_named_node("/clang/OffsetOfExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc96);
      data_model.getEndLoc96 = arboretum_create_named_node("/clang/OffsetOfExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc96);
      data_model.children181 = arboretum_create_named_node("/clang/OffsetOfExpr/children");
      methods.push_back(data_model.children181);
    arboretum_create_edge(data_model.OffsetOfExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PredefinedExpr = arboretum_create_named_node("/clang/PredefinedExpr");
  arboretum_create_edge(data_model.PredefinedExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getIdentKind = arboretum_create_named_node("/clang/PredefinedExpr/getIdentKind");
      methods.push_back(data_model.getIdentKind);
      data_model.isTransparent = arboretum_create_named_node("/clang/PredefinedExpr/isTransparent");
      methods.push_back(data_model.isTransparent);
      data_model.getLocation10 = arboretum_create_named_node("/clang/PredefinedExpr/getLocation");
      methods.push_back(data_model.getLocation10);
      data_model.getFunctionName1 = arboretum_create_named_node("/clang/PredefinedExpr/getFunctionName");
      methods.push_back(data_model.getFunctionName1);
      data_model.getIdentKindName1 = arboretum_create_named_node("/clang/PredefinedExpr/getIdentKindName");
      methods.push_back(data_model.getIdentKindName1);
      data_model.getBeginLoc97 = arboretum_create_named_node("/clang/PredefinedExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc97);
      data_model.getEndLoc97 = arboretum_create_named_node("/clang/PredefinedExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc97);
      data_model.children183 = arboretum_create_named_node("/clang/PredefinedExpr/children");
      methods.push_back(data_model.children183);
    arboretum_create_edge(data_model.PredefinedExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StringLiteral = arboretum_create_named_node("/clang/StringLiteral");
  arboretum_create_edge(data_model.StringLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getString2 = arboretum_create_named_node("/clang/StringLiteral/getString");
      methods.push_back(data_model.getString2);
      data_model.getBytes = arboretum_create_named_node("/clang/StringLiteral/getBytes");
      methods.push_back(data_model.getBytes);
      data_model.getByteLength = arboretum_create_named_node("/clang/StringLiteral/getByteLength");
      methods.push_back(data_model.getByteLength);
      data_model.getLength2 = arboretum_create_named_node("/clang/StringLiteral/getLength");
      methods.push_back(data_model.getLength2);
      data_model.getCharByteWidth = arboretum_create_named_node("/clang/StringLiteral/getCharByteWidth");
      methods.push_back(data_model.getCharByteWidth);
      data_model.getKind2 = arboretum_create_named_node("/clang/StringLiteral/getKind");
      methods.push_back(data_model.getKind2);
      data_model.isOrdinary = arboretum_create_named_node("/clang/StringLiteral/isOrdinary");
      methods.push_back(data_model.isOrdinary);
      data_model.isWide = arboretum_create_named_node("/clang/StringLiteral/isWide");
      methods.push_back(data_model.isWide);
      data_model.isUTF8 = arboretum_create_named_node("/clang/StringLiteral/isUTF8");
      methods.push_back(data_model.isUTF8);
      data_model.isUTF16 = arboretum_create_named_node("/clang/StringLiteral/isUTF16");
      methods.push_back(data_model.isUTF16);
      data_model.isUTF32 = arboretum_create_named_node("/clang/StringLiteral/isUTF32");
      methods.push_back(data_model.isUTF32);
      data_model.isUnevaluated = arboretum_create_named_node("/clang/StringLiteral/isUnevaluated");
      methods.push_back(data_model.isUnevaluated);
      data_model.isPascal = arboretum_create_named_node("/clang/StringLiteral/isPascal");
      methods.push_back(data_model.isPascal);
      data_model.containsNonAscii = arboretum_create_named_node("/clang/StringLiteral/containsNonAscii");
      methods.push_back(data_model.containsNonAscii);
      data_model.containsNonAsciiOrNull = arboretum_create_named_node("/clang/StringLiteral/containsNonAsciiOrNull");
      methods.push_back(data_model.containsNonAsciiOrNull);
      data_model.getNumConcatenated = arboretum_create_named_node("/clang/StringLiteral/getNumConcatenated");
      methods.push_back(data_model.getNumConcatenated);
      data_model.tokloc_begin = arboretum_create_named_node("/clang/StringLiteral/tokloc_begin");
      methods.push_back(data_model.tokloc_begin);
      data_model.tokloc_end = arboretum_create_named_node("/clang/StringLiteral/tokloc_end");
      methods.push_back(data_model.tokloc_end);
      data_model.getBeginLoc98 = arboretum_create_named_node("/clang/StringLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc98);
      data_model.getEndLoc98 = arboretum_create_named_node("/clang/StringLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc98);
      data_model.children185 = arboretum_create_named_node("/clang/StringLiteral/children");
      methods.push_back(data_model.children185);
    arboretum_create_edge(data_model.StringLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FloatingLiteral = arboretum_create_named_node("/clang/FloatingLiteral");
  arboretum_create_edge(data_model.FloatingLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValue4 = arboretum_create_named_node("/clang/FloatingLiteral/getValue");
      methods.push_back(data_model.getValue4);
      data_model.getRawSemantics = arboretum_create_named_node("/clang/FloatingLiteral/getRawSemantics");
      methods.push_back(data_model.getRawSemantics);
      data_model.getSemantics = arboretum_create_named_node("/clang/FloatingLiteral/getSemantics");
      methods.push_back(data_model.getSemantics);
      data_model.isExact = arboretum_create_named_node("/clang/FloatingLiteral/isExact");
      methods.push_back(data_model.isExact);
      data_model.getValueAsApproximateDouble = arboretum_create_named_node("/clang/FloatingLiteral/getValueAsApproximateDouble");
      methods.push_back(data_model.getValueAsApproximateDouble);
      data_model.getLocation11 = arboretum_create_named_node("/clang/FloatingLiteral/getLocation");
      methods.push_back(data_model.getLocation11);
      data_model.getBeginLoc99 = arboretum_create_named_node("/clang/FloatingLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc99);
      data_model.getEndLoc99 = arboretum_create_named_node("/clang/FloatingLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc99);
      data_model.children187 = arboretum_create_named_node("/clang/FloatingLiteral/children");
      methods.push_back(data_model.children187);
    arboretum_create_edge(data_model.FloatingLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpaqueValueExpr = arboretum_create_named_node("/clang/OpaqueValueExpr");
  arboretum_create_edge(data_model.OpaqueValueExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLocation12 = arboretum_create_named_node("/clang/OpaqueValueExpr/getLocation");
      methods.push_back(data_model.getLocation12);
      data_model.getBeginLoc100 = arboretum_create_named_node("/clang/OpaqueValueExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc100);
      data_model.getEndLoc100 = arboretum_create_named_node("/clang/OpaqueValueExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc100);
      data_model.getExprLoc13 = arboretum_create_named_node("/clang/OpaqueValueExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc13);
      data_model.children189 = arboretum_create_named_node("/clang/OpaqueValueExpr/children");
      methods.push_back(data_model.children189);
      data_model.getSourceExpr = arboretum_create_named_node("/clang/OpaqueValueExpr/getSourceExpr");
      methods.push_back(data_model.getSourceExpr);
      data_model.isUnique = arboretum_create_named_node("/clang/OpaqueValueExpr/isUnique");
      methods.push_back(data_model.isUnique);
    arboretum_create_edge(data_model.OpaqueValueExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DesignatedInitUpdateExpr = arboretum_create_named_node("/clang/DesignatedInitUpdateExpr");
  arboretum_create_edge(data_model.DesignatedInitUpdateExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc101 = arboretum_create_named_node("/clang/DesignatedInitUpdateExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc101);
      data_model.getEndLoc101 = arboretum_create_named_node("/clang/DesignatedInitUpdateExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc101);
      data_model.getBase17 = arboretum_create_named_node("/clang/DesignatedInitUpdateExpr/getBase");
      methods.push_back(data_model.getBase17);
      data_model.getUpdater = arboretum_create_named_node("/clang/DesignatedInitUpdateExpr/getUpdater");
      methods.push_back(data_model.getUpdater);
      data_model.children191 = arboretum_create_named_node("/clang/DesignatedInitUpdateExpr/children");
      methods.push_back(data_model.children191);
    arboretum_create_edge(data_model.DesignatedInitUpdateExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FullExpr = arboretum_create_named_node("/clang/FullExpr");
  arboretum_create_edge(data_model.FullExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr13 = arboretum_create_named_node("/clang/FullExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr13);
    arboretum_create_edge(data_model.FullExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExprWithCleanups = arboretum_create_named_node("/clang/ExprWithCleanups");
  arboretum_create_edge(data_model.ExprWithCleanups, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getObjects = arboretum_create_named_node("/clang/ExprWithCleanups/getObjects");
      methods.push_back(data_model.getObjects);
      data_model.getNumObjects = arboretum_create_named_node("/clang/ExprWithCleanups/getNumObjects");
      methods.push_back(data_model.getNumObjects);
      data_model.cleanupsHaveSideEffects = arboretum_create_named_node("/clang/ExprWithCleanups/cleanupsHaveSideEffects");
      methods.push_back(data_model.cleanupsHaveSideEffects);
      data_model.getBeginLoc102 = arboretum_create_named_node("/clang/ExprWithCleanups/getBeginLoc");
      methods.push_back(data_model.getBeginLoc102);
      data_model.getEndLoc102 = arboretum_create_named_node("/clang/ExprWithCleanups/getEndLoc");
      methods.push_back(data_model.getEndLoc102);
      data_model.children193 = arboretum_create_named_node("/clang/ExprWithCleanups/children");
      methods.push_back(data_model.children193);
    arboretum_create_edge(data_model.ExprWithCleanups, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DefaultStmt = arboretum_create_named_node("/clang/DefaultStmt");
  arboretum_create_edge(data_model.DefaultStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubStmt7 = arboretum_create_named_node("/clang/DefaultStmt/getSubStmt");
      methods.push_back(data_model.getSubStmt7);
      data_model.getDefaultLoc = arboretum_create_named_node("/clang/DefaultStmt/getDefaultLoc");
      methods.push_back(data_model.getDefaultLoc);
      data_model.getBeginLoc103 = arboretum_create_named_node("/clang/DefaultStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc103);
      data_model.getEndLoc103 = arboretum_create_named_node("/clang/DefaultStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc103);
      data_model.children195 = arboretum_create_named_node("/clang/DefaultStmt/children");
      methods.push_back(data_model.children195);
    arboretum_create_edge(data_model.DefaultStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArraySubscriptExpr = arboretum_create_named_node("/clang/ArraySubscriptExpr");
  arboretum_create_edge(data_model.ArraySubscriptExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLHS7 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getLHS");
      methods.push_back(data_model.getLHS7);
      data_model.getRHS7 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getRHS");
      methods.push_back(data_model.getRHS7);
      data_model.getBase19 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getBase");
      methods.push_back(data_model.getBase19);
      data_model.getIdx3 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getIdx");
      methods.push_back(data_model.getIdx3);
      data_model.getBeginLoc104 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc104);
      data_model.getEndLoc104 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc104);
      data_model.getRBracketLoc3 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getRBracketLoc");
      methods.push_back(data_model.getRBracketLoc3);
      data_model.getExprLoc14 = arboretum_create_named_node("/clang/ArraySubscriptExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc14);
      data_model.children197 = arboretum_create_named_node("/clang/ArraySubscriptExpr/children");
      methods.push_back(data_model.children197);
    arboretum_create_edge(data_model.ArraySubscriptExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeclStmt = arboretum_create_named_node("/clang/DeclStmt");
  arboretum_create_edge(data_model.DeclStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSingleDecl = arboretum_create_named_node("/clang/DeclStmt/isSingleDecl");
      methods.push_back(data_model.isSingleDecl);
      data_model.getSingleDecl = arboretum_create_named_node("/clang/DeclStmt/getSingleDecl");
      methods.push_back(data_model.getSingleDecl);
      data_model.getDeclGroup = arboretum_create_named_node("/clang/DeclStmt/getDeclGroup");
      methods.push_back(data_model.getDeclGroup);
      data_model.getEndLoc105 = arboretum_create_named_node("/clang/DeclStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc105);
      data_model.getBeginLoc105 = arboretum_create_named_node("/clang/DeclStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc105);
      data_model.children199 = arboretum_create_named_node("/clang/DeclStmt/children");
      methods.push_back(data_model.children199);
      data_model.decls2 = arboretum_create_named_node("/clang/DeclStmt/decls");
      methods.push_back(data_model.decls2);
      data_model.decl_begin1 = arboretum_create_named_node("/clang/DeclStmt/decl_begin");
      methods.push_back(data_model.decl_begin1);
      data_model.decl_end1 = arboretum_create_named_node("/clang/DeclStmt/decl_end");
      methods.push_back(data_model.decl_end1);
    arboretum_create_edge(data_model.DeclStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXRecordDecl = arboretum_create_named_node("/clang/CXXRecordDecl");
  arboretum_create_edge(data_model.CXXRecordDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCanonicalDecl1 = arboretum_create_named_node("/clang/CXXRecordDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl1);
      data_model.getPreviousDecl1 = arboretum_create_named_node("/clang/CXXRecordDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl1);
      data_model.getMostRecentDecl1 = arboretum_create_named_node("/clang/CXXRecordDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl1);
      data_model.getMostRecentNonInjectedDecl1 = arboretum_create_named_node("/clang/CXXRecordDecl/getMostRecentNonInjectedDecl");
      methods.push_back(data_model.getMostRecentNonInjectedDecl1);
      data_model.getDefinition = arboretum_create_named_node("/clang/CXXRecordDecl/getDefinition");
      methods.push_back(data_model.getDefinition);
      data_model.hasDefinition = arboretum_create_named_node("/clang/CXXRecordDecl/hasDefinition");
      methods.push_back(data_model.hasDefinition);
      data_model.isDynamicClass = arboretum_create_named_node("/clang/CXXRecordDecl/isDynamicClass");
      methods.push_back(data_model.isDynamicClass);
      data_model.mayBeDynamicClass = arboretum_create_named_node("/clang/CXXRecordDecl/mayBeDynamicClass");
      methods.push_back(data_model.mayBeDynamicClass);
      data_model.mayBeNonDynamicClass = arboretum_create_named_node("/clang/CXXRecordDecl/mayBeNonDynamicClass");
      methods.push_back(data_model.mayBeNonDynamicClass);
      data_model.isParsingBaseSpecifiers = arboretum_create_named_node("/clang/CXXRecordDecl/isParsingBaseSpecifiers");
      methods.push_back(data_model.isParsingBaseSpecifiers);
      data_model.getODRHash = arboretum_create_named_node("/clang/CXXRecordDecl/getODRHash");
      methods.push_back(data_model.getODRHash);
      data_model.getNumBases = arboretum_create_named_node("/clang/CXXRecordDecl/getNumBases");
      methods.push_back(data_model.getNumBases);
      data_model.bases1 = arboretum_create_named_node("/clang/CXXRecordDecl/bases");
      methods.push_back(data_model.bases1);
      data_model.bases_begin1 = arboretum_create_named_node("/clang/CXXRecordDecl/bases_begin");
      methods.push_back(data_model.bases_begin1);
      data_model.bases_end1 = arboretum_create_named_node("/clang/CXXRecordDecl/bases_end");
      methods.push_back(data_model.bases_end1);
      data_model.getNumVBases = arboretum_create_named_node("/clang/CXXRecordDecl/getNumVBases");
      methods.push_back(data_model.getNumVBases);
      data_model.vbases1 = arboretum_create_named_node("/clang/CXXRecordDecl/vbases");
      methods.push_back(data_model.vbases1);
      data_model.vbases_begin1 = arboretum_create_named_node("/clang/CXXRecordDecl/vbases_begin");
      methods.push_back(data_model.vbases_begin1);
      data_model.vbases_end1 = arboretum_create_named_node("/clang/CXXRecordDecl/vbases_end");
      methods.push_back(data_model.vbases_end1);
      data_model.hasAnyDependentBases = arboretum_create_named_node("/clang/CXXRecordDecl/hasAnyDependentBases");
      methods.push_back(data_model.hasAnyDependentBases);
      data_model.methods = arboretum_create_named_node("/clang/CXXRecordDecl/methods");
      methods.push_back(data_model.methods);
      data_model.method_begin = arboretum_create_named_node("/clang/CXXRecordDecl/method_begin");
      methods.push_back(data_model.method_begin);
      data_model.method_end = arboretum_create_named_node("/clang/CXXRecordDecl/method_end");
      methods.push_back(data_model.method_end);
      data_model.ctors = arboretum_create_named_node("/clang/CXXRecordDecl/ctors");
      methods.push_back(data_model.ctors);
      data_model.ctor_begin = arboretum_create_named_node("/clang/CXXRecordDecl/ctor_begin");
      methods.push_back(data_model.ctor_begin);
      data_model.ctor_end = arboretum_create_named_node("/clang/CXXRecordDecl/ctor_end");
      methods.push_back(data_model.ctor_end);
      data_model.friends = arboretum_create_named_node("/clang/CXXRecordDecl/friends");
      methods.push_back(data_model.friends);
      data_model.friend_begin = arboretum_create_named_node("/clang/CXXRecordDecl/friend_begin");
      methods.push_back(data_model.friend_begin);
      data_model.friend_end = arboretum_create_named_node("/clang/CXXRecordDecl/friend_end");
      methods.push_back(data_model.friend_end);
      data_model.hasFriends = arboretum_create_named_node("/clang/CXXRecordDecl/hasFriends");
      methods.push_back(data_model.hasFriends);
      data_model.defaultedCopyConstructorIsDeleted = arboretum_create_named_node("/clang/CXXRecordDecl/defaultedCopyConstructorIsDeleted");
      methods.push_back(data_model.defaultedCopyConstructorIsDeleted);
      data_model.defaultedMoveConstructorIsDeleted = arboretum_create_named_node("/clang/CXXRecordDecl/defaultedMoveConstructorIsDeleted");
      methods.push_back(data_model.defaultedMoveConstructorIsDeleted);
      data_model.defaultedDestructorIsDeleted = arboretum_create_named_node("/clang/CXXRecordDecl/defaultedDestructorIsDeleted");
      methods.push_back(data_model.defaultedDestructorIsDeleted);
      data_model.hasSimpleCopyConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasSimpleCopyConstructor");
      methods.push_back(data_model.hasSimpleCopyConstructor);
      data_model.hasSimpleMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasSimpleMoveConstructor");
      methods.push_back(data_model.hasSimpleMoveConstructor);
      data_model.hasSimpleCopyAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasSimpleCopyAssignment");
      methods.push_back(data_model.hasSimpleCopyAssignment);
      data_model.hasSimpleMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasSimpleMoveAssignment");
      methods.push_back(data_model.hasSimpleMoveAssignment);
      data_model.hasSimpleDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasSimpleDestructor");
      methods.push_back(data_model.hasSimpleDestructor);
      data_model.hasDefaultConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasDefaultConstructor");
      methods.push_back(data_model.hasDefaultConstructor);
      data_model.needsImplicitDefaultConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsImplicitDefaultConstructor");
      methods.push_back(data_model.needsImplicitDefaultConstructor);
      data_model.hasUserDeclaredConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredConstructor");
      methods.push_back(data_model.hasUserDeclaredConstructor);
      data_model.hasUserProvidedDefaultConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserProvidedDefaultConstructor");
      methods.push_back(data_model.hasUserProvidedDefaultConstructor);
      data_model.hasUserDeclaredCopyConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredCopyConstructor");
      methods.push_back(data_model.hasUserDeclaredCopyConstructor);
      data_model.needsImplicitCopyConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsImplicitCopyConstructor");
      methods.push_back(data_model.needsImplicitCopyConstructor);
      data_model.needsOverloadResolutionForCopyConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsOverloadResolutionForCopyConstructor");
      methods.push_back(data_model.needsOverloadResolutionForCopyConstructor);
      data_model.implicitCopyConstructorHasConstParam = arboretum_create_named_node("/clang/CXXRecordDecl/implicitCopyConstructorHasConstParam");
      methods.push_back(data_model.implicitCopyConstructorHasConstParam);
      data_model.hasCopyConstructorWithConstParam = arboretum_create_named_node("/clang/CXXRecordDecl/hasCopyConstructorWithConstParam");
      methods.push_back(data_model.hasCopyConstructorWithConstParam);
      data_model.hasUserDeclaredMoveOperation = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredMoveOperation");
      methods.push_back(data_model.hasUserDeclaredMoveOperation);
      data_model.hasUserDeclaredMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredMoveConstructor");
      methods.push_back(data_model.hasUserDeclaredMoveConstructor);
      data_model.hasMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasMoveConstructor");
      methods.push_back(data_model.hasMoveConstructor);
      data_model.needsImplicitMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsImplicitMoveConstructor");
      methods.push_back(data_model.needsImplicitMoveConstructor);
      data_model.needsOverloadResolutionForMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsOverloadResolutionForMoveConstructor");
      methods.push_back(data_model.needsOverloadResolutionForMoveConstructor);
      data_model.hasUserDeclaredCopyAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredCopyAssignment");
      methods.push_back(data_model.hasUserDeclaredCopyAssignment);
      data_model.needsImplicitCopyAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/needsImplicitCopyAssignment");
      methods.push_back(data_model.needsImplicitCopyAssignment);
      data_model.needsOverloadResolutionForCopyAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/needsOverloadResolutionForCopyAssignment");
      methods.push_back(data_model.needsOverloadResolutionForCopyAssignment);
      data_model.implicitCopyAssignmentHasConstParam = arboretum_create_named_node("/clang/CXXRecordDecl/implicitCopyAssignmentHasConstParam");
      methods.push_back(data_model.implicitCopyAssignmentHasConstParam);
      data_model.hasCopyAssignmentWithConstParam = arboretum_create_named_node("/clang/CXXRecordDecl/hasCopyAssignmentWithConstParam");
      methods.push_back(data_model.hasCopyAssignmentWithConstParam);
      data_model.hasUserDeclaredMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredMoveAssignment");
      methods.push_back(data_model.hasUserDeclaredMoveAssignment);
      data_model.hasMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasMoveAssignment");
      methods.push_back(data_model.hasMoveAssignment);
      data_model.needsImplicitMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/needsImplicitMoveAssignment");
      methods.push_back(data_model.needsImplicitMoveAssignment);
      data_model.needsOverloadResolutionForMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/needsOverloadResolutionForMoveAssignment");
      methods.push_back(data_model.needsOverloadResolutionForMoveAssignment);
      data_model.hasUserDeclaredDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasUserDeclaredDestructor");
      methods.push_back(data_model.hasUserDeclaredDestructor);
      data_model.needsImplicitDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsImplicitDestructor");
      methods.push_back(data_model.needsImplicitDestructor);
      data_model.needsOverloadResolutionForDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/needsOverloadResolutionForDestructor");
      methods.push_back(data_model.needsOverloadResolutionForDestructor);
      data_model.isLambda = arboretum_create_named_node("/clang/CXXRecordDecl/isLambda");
      methods.push_back(data_model.isLambda);
      data_model.isGenericLambda1 = arboretum_create_named_node("/clang/CXXRecordDecl/isGenericLambda");
      methods.push_back(data_model.isGenericLambda1);
      data_model.lambdaIsDefaultConstructibleAndAssignable = arboretum_create_named_node("/clang/CXXRecordDecl/lambdaIsDefaultConstructibleAndAssignable");
      methods.push_back(data_model.lambdaIsDefaultConstructibleAndAssignable);
      data_model.getLambdaCallOperator = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaCallOperator");
      methods.push_back(data_model.getLambdaCallOperator);
      data_model.getDependentLambdaCallOperator = arboretum_create_named_node("/clang/CXXRecordDecl/getDependentLambdaCallOperator");
      methods.push_back(data_model.getDependentLambdaCallOperator);
      data_model.getLambdaStaticInvoker = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaStaticInvoker");
      methods.push_back(data_model.getLambdaStaticInvoker);
      data_model.getGenericLambdaTemplateParameterList = arboretum_create_named_node("/clang/CXXRecordDecl/getGenericLambdaTemplateParameterList");
      methods.push_back(data_model.getGenericLambdaTemplateParameterList);
      data_model.getLambdaExplicitTemplateParameters = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaExplicitTemplateParameters");
      methods.push_back(data_model.getLambdaExplicitTemplateParameters);
      data_model.getLambdaCaptureDefault = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaCaptureDefault");
      methods.push_back(data_model.getLambdaCaptureDefault);
      data_model.isCapturelessLambda = arboretum_create_named_node("/clang/CXXRecordDecl/isCapturelessLambda");
      methods.push_back(data_model.isCapturelessLambda);
      data_model.captures3 = arboretum_create_named_node("/clang/CXXRecordDecl/captures");
      methods.push_back(data_model.captures3);
      data_model.captures_begin = arboretum_create_named_node("/clang/CXXRecordDecl/captures_begin");
      methods.push_back(data_model.captures_begin);
      data_model.captures_end = arboretum_create_named_node("/clang/CXXRecordDecl/captures_end");
      methods.push_back(data_model.captures_end);
      data_model.capture_size2 = arboretum_create_named_node("/clang/CXXRecordDecl/capture_size");
      methods.push_back(data_model.capture_size2);
      data_model.conversion_begin = arboretum_create_named_node("/clang/CXXRecordDecl/conversion_begin");
      methods.push_back(data_model.conversion_begin);
      data_model.conversion_end = arboretum_create_named_node("/clang/CXXRecordDecl/conversion_end");
      methods.push_back(data_model.conversion_end);
      data_model.getVisibleConversionFunctions = arboretum_create_named_node("/clang/CXXRecordDecl/getVisibleConversionFunctions");
      methods.push_back(data_model.getVisibleConversionFunctions);
      data_model.isAggregate = arboretum_create_named_node("/clang/CXXRecordDecl/isAggregate");
      methods.push_back(data_model.isAggregate);
      data_model.hasInClassInitializer = arboretum_create_named_node("/clang/CXXRecordDecl/hasInClassInitializer");
      methods.push_back(data_model.hasInClassInitializer);
      data_model.hasUninitializedReferenceMember = arboretum_create_named_node("/clang/CXXRecordDecl/hasUninitializedReferenceMember");
      methods.push_back(data_model.hasUninitializedReferenceMember);
      data_model.isPOD = arboretum_create_named_node("/clang/CXXRecordDecl/isPOD");
      methods.push_back(data_model.isPOD);
      data_model.isCLike = arboretum_create_named_node("/clang/CXXRecordDecl/isCLike");
      methods.push_back(data_model.isCLike);
      data_model.isEmpty = arboretum_create_named_node("/clang/CXXRecordDecl/isEmpty");
      methods.push_back(data_model.isEmpty);
      data_model.hasInitMethod = arboretum_create_named_node("/clang/CXXRecordDecl/hasInitMethod");
      methods.push_back(data_model.hasInitMethod);
      data_model.hasPrivateFields = arboretum_create_named_node("/clang/CXXRecordDecl/hasPrivateFields");
      methods.push_back(data_model.hasPrivateFields);
      data_model.hasProtectedFields = arboretum_create_named_node("/clang/CXXRecordDecl/hasProtectedFields");
      methods.push_back(data_model.hasProtectedFields);
      data_model.hasDirectFields = arboretum_create_named_node("/clang/CXXRecordDecl/hasDirectFields");
      methods.push_back(data_model.hasDirectFields);
      data_model.isPolymorphic = arboretum_create_named_node("/clang/CXXRecordDecl/isPolymorphic");
      methods.push_back(data_model.isPolymorphic);
      data_model.isAbstract = arboretum_create_named_node("/clang/CXXRecordDecl/isAbstract");
      methods.push_back(data_model.isAbstract);
      data_model.isStandardLayout = arboretum_create_named_node("/clang/CXXRecordDecl/isStandardLayout");
      methods.push_back(data_model.isStandardLayout);
      data_model.isCXX11StandardLayout = arboretum_create_named_node("/clang/CXXRecordDecl/isCXX11StandardLayout");
      methods.push_back(data_model.isCXX11StandardLayout);
      data_model.hasMutableFields = arboretum_create_named_node("/clang/CXXRecordDecl/hasMutableFields");
      methods.push_back(data_model.hasMutableFields);
      data_model.hasVariantMembers = arboretum_create_named_node("/clang/CXXRecordDecl/hasVariantMembers");
      methods.push_back(data_model.hasVariantMembers);
      data_model.hasTrivialDefaultConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialDefaultConstructor");
      methods.push_back(data_model.hasTrivialDefaultConstructor);
      data_model.hasNonTrivialDefaultConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialDefaultConstructor");
      methods.push_back(data_model.hasNonTrivialDefaultConstructor);
      data_model.hasConstexprNonCopyMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasConstexprNonCopyMoveConstructor");
      methods.push_back(data_model.hasConstexprNonCopyMoveConstructor);
      data_model.defaultedDefaultConstructorIsConstexpr = arboretum_create_named_node("/clang/CXXRecordDecl/defaultedDefaultConstructorIsConstexpr");
      methods.push_back(data_model.defaultedDefaultConstructorIsConstexpr);
      data_model.hasConstexprDefaultConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasConstexprDefaultConstructor");
      methods.push_back(data_model.hasConstexprDefaultConstructor);
      data_model.hasTrivialCopyConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialCopyConstructor");
      methods.push_back(data_model.hasTrivialCopyConstructor);
      data_model.hasTrivialCopyConstructorForCall = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialCopyConstructorForCall");
      methods.push_back(data_model.hasTrivialCopyConstructorForCall);
      data_model.hasNonTrivialCopyConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialCopyConstructor");
      methods.push_back(data_model.hasNonTrivialCopyConstructor);
      data_model.hasNonTrivialCopyConstructorForCall = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialCopyConstructorForCall");
      methods.push_back(data_model.hasNonTrivialCopyConstructorForCall);
      data_model.hasTrivialMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialMoveConstructor");
      methods.push_back(data_model.hasTrivialMoveConstructor);
      data_model.hasTrivialMoveConstructorForCall = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialMoveConstructorForCall");
      methods.push_back(data_model.hasTrivialMoveConstructorForCall);
      data_model.hasNonTrivialMoveConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialMoveConstructor");
      methods.push_back(data_model.hasNonTrivialMoveConstructor);
      data_model.hasNonTrivialMoveConstructorForCall = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialMoveConstructorForCall");
      methods.push_back(data_model.hasNonTrivialMoveConstructorForCall);
      data_model.hasTrivialCopyAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialCopyAssignment");
      methods.push_back(data_model.hasTrivialCopyAssignment);
      data_model.hasNonTrivialCopyAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialCopyAssignment");
      methods.push_back(data_model.hasNonTrivialCopyAssignment);
      data_model.hasTrivialMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialMoveAssignment");
      methods.push_back(data_model.hasTrivialMoveAssignment);
      data_model.hasNonTrivialMoveAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialMoveAssignment");
      methods.push_back(data_model.hasNonTrivialMoveAssignment);
      data_model.defaultedDestructorIsConstexpr = arboretum_create_named_node("/clang/CXXRecordDecl/defaultedDestructorIsConstexpr");
      methods.push_back(data_model.defaultedDestructorIsConstexpr);
      data_model.hasConstexprDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasConstexprDestructor");
      methods.push_back(data_model.hasConstexprDestructor);
      data_model.hasTrivialDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialDestructor");
      methods.push_back(data_model.hasTrivialDestructor);
      data_model.hasTrivialDestructorForCall = arboretum_create_named_node("/clang/CXXRecordDecl/hasTrivialDestructorForCall");
      methods.push_back(data_model.hasTrivialDestructorForCall);
      data_model.hasNonTrivialDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialDestructor");
      methods.push_back(data_model.hasNonTrivialDestructor);
      data_model.hasNonTrivialDestructorForCall = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonTrivialDestructorForCall");
      methods.push_back(data_model.hasNonTrivialDestructorForCall);
      data_model.allowConstDefaultInit = arboretum_create_named_node("/clang/CXXRecordDecl/allowConstDefaultInit");
      methods.push_back(data_model.allowConstDefaultInit);
      data_model.hasIrrelevantDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasIrrelevantDestructor");
      methods.push_back(data_model.hasIrrelevantDestructor);
      data_model.hasNonLiteralTypeFieldsOrBases = arboretum_create_named_node("/clang/CXXRecordDecl/hasNonLiteralTypeFieldsOrBases");
      methods.push_back(data_model.hasNonLiteralTypeFieldsOrBases);
      data_model.hasInheritedConstructor = arboretum_create_named_node("/clang/CXXRecordDecl/hasInheritedConstructor");
      methods.push_back(data_model.hasInheritedConstructor);
      data_model.hasInheritedAssignment = arboretum_create_named_node("/clang/CXXRecordDecl/hasInheritedAssignment");
      methods.push_back(data_model.hasInheritedAssignment);
      data_model.isTriviallyCopyable = arboretum_create_named_node("/clang/CXXRecordDecl/isTriviallyCopyable");
      methods.push_back(data_model.isTriviallyCopyable);
      data_model.isTriviallyCopyConstructible = arboretum_create_named_node("/clang/CXXRecordDecl/isTriviallyCopyConstructible");
      methods.push_back(data_model.isTriviallyCopyConstructible);
      data_model.isTrivial = arboretum_create_named_node("/clang/CXXRecordDecl/isTrivial");
      methods.push_back(data_model.isTrivial);
      data_model.isLiteral = arboretum_create_named_node("/clang/CXXRecordDecl/isLiteral");
      methods.push_back(data_model.isLiteral);
      data_model.isStructural = arboretum_create_named_node("/clang/CXXRecordDecl/isStructural");
      methods.push_back(data_model.isStructural);
      data_model.getInstantiatedFromMemberClass = arboretum_create_named_node("/clang/CXXRecordDecl/getInstantiatedFromMemberClass");
      methods.push_back(data_model.getInstantiatedFromMemberClass);
      data_model.getMemberSpecializationInfo = arboretum_create_named_node("/clang/CXXRecordDecl/getMemberSpecializationInfo");
      methods.push_back(data_model.getMemberSpecializationInfo);
      data_model.getDescribedClassTemplate = arboretum_create_named_node("/clang/CXXRecordDecl/getDescribedClassTemplate");
      methods.push_back(data_model.getDescribedClassTemplate);
      data_model.getTemplateSpecializationKind = arboretum_create_named_node("/clang/CXXRecordDecl/getTemplateSpecializationKind");
      methods.push_back(data_model.getTemplateSpecializationKind);
      data_model.getTemplateInstantiationPattern = arboretum_create_named_node("/clang/CXXRecordDecl/getTemplateInstantiationPattern");
      methods.push_back(data_model.getTemplateInstantiationPattern);
      data_model.getDestructor = arboretum_create_named_node("/clang/CXXRecordDecl/getDestructor");
      methods.push_back(data_model.getDestructor);
      data_model.isAnyDestructorNoReturn = arboretum_create_named_node("/clang/CXXRecordDecl/isAnyDestructorNoReturn");
      methods.push_back(data_model.isAnyDestructorNoReturn);
      data_model.isLocalClass = arboretum_create_named_node("/clang/CXXRecordDecl/isLocalClass");
      methods.push_back(data_model.isLocalClass);
      data_model.mayBeAbstract = arboretum_create_named_node("/clang/CXXRecordDecl/mayBeAbstract");
      methods.push_back(data_model.mayBeAbstract);
      data_model.isEffectivelyFinal = arboretum_create_named_node("/clang/CXXRecordDecl/isEffectivelyFinal");
      methods.push_back(data_model.isEffectivelyFinal);
      data_model.getLambdaManglingNumber = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaManglingNumber");
      methods.push_back(data_model.getLambdaManglingNumber);
      data_model.hasKnownLambdaInternalLinkage = arboretum_create_named_node("/clang/CXXRecordDecl/hasKnownLambdaInternalLinkage");
      methods.push_back(data_model.hasKnownLambdaInternalLinkage);
      data_model.getLambdaContextDecl = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaContextDecl");
      methods.push_back(data_model.getLambdaContextDecl);
      data_model.getLambdaIndexInContext = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaIndexInContext");
      methods.push_back(data_model.getLambdaIndexInContext);
      data_model.getLambdaNumbering = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaNumbering");
      methods.push_back(data_model.getLambdaNumbering);
      data_model.getDeviceLambdaManglingNumber = arboretum_create_named_node("/clang/CXXRecordDecl/getDeviceLambdaManglingNumber");
      methods.push_back(data_model.getDeviceLambdaManglingNumber);
      data_model.getMSInheritanceModel = arboretum_create_named_node("/clang/CXXRecordDecl/getMSInheritanceModel");
      methods.push_back(data_model.getMSInheritanceModel);
      data_model.calculateInheritanceModel = arboretum_create_named_node("/clang/CXXRecordDecl/calculateInheritanceModel");
      methods.push_back(data_model.calculateInheritanceModel);
      data_model.nullFieldOffsetIsZero = arboretum_create_named_node("/clang/CXXRecordDecl/nullFieldOffsetIsZero");
      methods.push_back(data_model.nullFieldOffsetIsZero);
      data_model.getMSVtorDispMode = arboretum_create_named_node("/clang/CXXRecordDecl/getMSVtorDispMode");
      methods.push_back(data_model.getMSVtorDispMode);
      data_model.isDependentLambda = arboretum_create_named_node("/clang/CXXRecordDecl/isDependentLambda");
      methods.push_back(data_model.isDependentLambda);
      data_model.isNeverDependentLambda = arboretum_create_named_node("/clang/CXXRecordDecl/isNeverDependentLambda");
      methods.push_back(data_model.isNeverDependentLambda);
      data_model.getLambdaDependencyKind = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaDependencyKind");
      methods.push_back(data_model.getLambdaDependencyKind);
      data_model.getLambdaTypeInfo = arboretum_create_named_node("/clang/CXXRecordDecl/getLambdaTypeInfo");
      methods.push_back(data_model.getLambdaTypeInfo);
      data_model.isInterfaceLike = arboretum_create_named_node("/clang/CXXRecordDecl/isInterfaceLike");
      methods.push_back(data_model.isInterfaceLike);
    arboretum_create_edge(data_model.CXXRecordDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EmptyDecl = arboretum_create_named_node("/clang/EmptyDecl");
  arboretum_create_edge(data_model.EmptyDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.EmptyDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InitListExpr = arboretum_create_named_node("/clang/InitListExpr");
  arboretum_create_edge(data_model.InitListExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNumInits = arboretum_create_named_node("/clang/InitListExpr/getNumInits");
      methods.push_back(data_model.getNumInits);
      data_model.getInits2 = arboretum_create_named_node("/clang/InitListExpr/getInits");
      methods.push_back(data_model.getInits2);
      data_model.inits3 = arboretum_create_named_node("/clang/InitListExpr/inits");
      methods.push_back(data_model.inits3);
      data_model.getArrayFiller3 = arboretum_create_named_node("/clang/InitListExpr/getArrayFiller");
      methods.push_back(data_model.getArrayFiller3);
      data_model.hasArrayFiller = arboretum_create_named_node("/clang/InitListExpr/hasArrayFiller");
      methods.push_back(data_model.hasArrayFiller);
      data_model.hasDesignatedInit = arboretum_create_named_node("/clang/InitListExpr/hasDesignatedInit");
      methods.push_back(data_model.hasDesignatedInit);
      data_model.getInitializedFieldInUnion3 = arboretum_create_named_node("/clang/InitListExpr/getInitializedFieldInUnion");
      methods.push_back(data_model.getInitializedFieldInUnion3);
      data_model.isExplicit = arboretum_create_named_node("/clang/InitListExpr/isExplicit");
      methods.push_back(data_model.isExplicit);
      data_model.isStringLiteralInit = arboretum_create_named_node("/clang/InitListExpr/isStringLiteralInit");
      methods.push_back(data_model.isStringLiteralInit);
      data_model.isTransparent1 = arboretum_create_named_node("/clang/InitListExpr/isTransparent");
      methods.push_back(data_model.isTransparent1);
      data_model.getLBraceLoc1 = arboretum_create_named_node("/clang/InitListExpr/getLBraceLoc");
      methods.push_back(data_model.getLBraceLoc1);
      data_model.getRBraceLoc1 = arboretum_create_named_node("/clang/InitListExpr/getRBraceLoc");
      methods.push_back(data_model.getRBraceLoc1);
      data_model.isSemanticForm = arboretum_create_named_node("/clang/InitListExpr/isSemanticForm");
      methods.push_back(data_model.isSemanticForm);
      data_model.getSemanticForm2 = arboretum_create_named_node("/clang/InitListExpr/getSemanticForm");
      methods.push_back(data_model.getSemanticForm2);
      data_model.isSyntacticForm = arboretum_create_named_node("/clang/InitListExpr/isSyntacticForm");
      methods.push_back(data_model.isSyntacticForm);
      data_model.getSyntacticForm2 = arboretum_create_named_node("/clang/InitListExpr/getSyntacticForm");
      methods.push_back(data_model.getSyntacticForm2);
      data_model.hadArrayRangeDesignator = arboretum_create_named_node("/clang/InitListExpr/hadArrayRangeDesignator");
      methods.push_back(data_model.hadArrayRangeDesignator);
      data_model.getBeginLoc106 = arboretum_create_named_node("/clang/InitListExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc106);
      data_model.getEndLoc106 = arboretum_create_named_node("/clang/InitListExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc106);
      data_model.children201 = arboretum_create_named_node("/clang/InitListExpr/children");
      methods.push_back(data_model.children201);
      data_model.begin2 = arboretum_create_named_node("/clang/InitListExpr/begin");
      methods.push_back(data_model.begin2);
      data_model.end2 = arboretum_create_named_node("/clang/InitListExpr/end");
      methods.push_back(data_model.end2);
      data_model.rbegin1 = arboretum_create_named_node("/clang/InitListExpr/rbegin");
      methods.push_back(data_model.rbegin1);
      data_model.rend1 = arboretum_create_named_node("/clang/InitListExpr/rend");
      methods.push_back(data_model.rend1);
    arboretum_create_edge(data_model.InitListExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TagDecl = arboretum_create_named_node("/clang/TagDecl");
  arboretum_create_edge(data_model.TagDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBraceRange = arboretum_create_named_node("/clang/TagDecl/getBraceRange");
      methods.push_back(data_model.getBraceRange);
      data_model.getInnerLocStart = arboretum_create_named_node("/clang/TagDecl/getInnerLocStart");
      methods.push_back(data_model.getInnerLocStart);
      data_model.getOuterLocStart = arboretum_create_named_node("/clang/TagDecl/getOuterLocStart");
      methods.push_back(data_model.getOuterLocStart);
      data_model.getSourceRange8 = arboretum_create_named_node("/clang/TagDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange8);
      data_model.getCanonicalDecl3 = arboretum_create_named_node("/clang/TagDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl3);
      data_model.isThisDeclarationADefinition = arboretum_create_named_node("/clang/TagDecl/isThisDeclarationADefinition");
      methods.push_back(data_model.isThisDeclarationADefinition);
      data_model.isCompleteDefinition = arboretum_create_named_node("/clang/TagDecl/isCompleteDefinition");
      methods.push_back(data_model.isCompleteDefinition);
      data_model.isCompleteDefinitionRequired = arboretum_create_named_node("/clang/TagDecl/isCompleteDefinitionRequired");
      methods.push_back(data_model.isCompleteDefinitionRequired);
      data_model.isBeingDefined = arboretum_create_named_node("/clang/TagDecl/isBeingDefined");
      methods.push_back(data_model.isBeingDefined);
      data_model.isEmbeddedInDeclarator = arboretum_create_named_node("/clang/TagDecl/isEmbeddedInDeclarator");
      methods.push_back(data_model.isEmbeddedInDeclarator);
      data_model.isFreeStanding = arboretum_create_named_node("/clang/TagDecl/isFreeStanding");
      methods.push_back(data_model.isFreeStanding);
      data_model.mayHaveOutOfDateDef = arboretum_create_named_node("/clang/TagDecl/mayHaveOutOfDateDef");
      methods.push_back(data_model.mayHaveOutOfDateDef);
      data_model.isDependentType = arboretum_create_named_node("/clang/TagDecl/isDependentType");
      methods.push_back(data_model.isDependentType);
      data_model.isThisDeclarationADemotedDefinition = arboretum_create_named_node("/clang/TagDecl/isThisDeclarationADemotedDefinition");
      methods.push_back(data_model.isThisDeclarationADemotedDefinition);
      data_model.getDefinition1 = arboretum_create_named_node("/clang/TagDecl/getDefinition");
      methods.push_back(data_model.getDefinition1);
      data_model.getKindName = arboretum_create_named_node("/clang/TagDecl/getKindName");
      methods.push_back(data_model.getKindName);
      data_model.getTagKind = arboretum_create_named_node("/clang/TagDecl/getTagKind");
      methods.push_back(data_model.getTagKind);
      data_model.isStruct = arboretum_create_named_node("/clang/TagDecl/isStruct");
      methods.push_back(data_model.isStruct);
      data_model.isInterface = arboretum_create_named_node("/clang/TagDecl/isInterface");
      methods.push_back(data_model.isInterface);
      data_model.isClass = arboretum_create_named_node("/clang/TagDecl/isClass");
      methods.push_back(data_model.isClass);
      data_model.isUnion = arboretum_create_named_node("/clang/TagDecl/isUnion");
      methods.push_back(data_model.isUnion);
      data_model.isEnum = arboretum_create_named_node("/clang/TagDecl/isEnum");
      methods.push_back(data_model.isEnum);
      data_model.hasNameForLinkage = arboretum_create_named_node("/clang/TagDecl/hasNameForLinkage");
      methods.push_back(data_model.hasNameForLinkage);
      data_model.getTypedefNameForAnonDecl = arboretum_create_named_node("/clang/TagDecl/getTypedefNameForAnonDecl");
      methods.push_back(data_model.getTypedefNameForAnonDecl);
      data_model.getQualifier4 = arboretum_create_named_node("/clang/TagDecl/getQualifier");
      methods.push_back(data_model.getQualifier4);
      data_model.getQualifierLoc4 = arboretum_create_named_node("/clang/TagDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc4);
      data_model.getNumTemplateParameterLists = arboretum_create_named_node("/clang/TagDecl/getNumTemplateParameterLists");
      methods.push_back(data_model.getNumTemplateParameterLists);
    arboretum_create_edge(data_model.TagDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateParamObjectDecl = arboretum_create_named_node("/clang/TemplateParamObjectDecl");
  arboretum_create_edge(data_model.TemplateParamObjectDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValue5 = arboretum_create_named_node("/clang/TemplateParamObjectDecl/getValue");
      methods.push_back(data_model.getValue5);
      data_model.getCanonicalDecl5 = arboretum_create_named_node("/clang/TemplateParamObjectDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl5);
    arboretum_create_edge(data_model.TemplateParamObjectDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingShadowDecl = arboretum_create_named_node("/clang/UsingShadowDecl");
  arboretum_create_edge(data_model.UsingShadowDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCanonicalDecl7 = arboretum_create_named_node("/clang/UsingShadowDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl7);
      data_model.getTargetDecl = arboretum_create_named_node("/clang/UsingShadowDecl/getTargetDecl");
      methods.push_back(data_model.getTargetDecl);
      data_model.getIntroducer = arboretum_create_named_node("/clang/UsingShadowDecl/getIntroducer");
      methods.push_back(data_model.getIntroducer);
      data_model.getNextUsingShadowDecl = arboretum_create_named_node("/clang/UsingShadowDecl/getNextUsingShadowDecl");
      methods.push_back(data_model.getNextUsingShadowDecl);
    arboretum_create_edge(data_model.UsingShadowDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingEnumDecl = arboretum_create_named_node("/clang/UsingEnumDecl");
  arboretum_create_edge(data_model.UsingEnumDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUsingLoc = arboretum_create_named_node("/clang/UsingEnumDecl/getUsingLoc");
      methods.push_back(data_model.getUsingLoc);
      data_model.getEnumLoc = arboretum_create_named_node("/clang/UsingEnumDecl/getEnumLoc");
      methods.push_back(data_model.getEnumLoc);
      data_model.getQualifier5 = arboretum_create_named_node("/clang/UsingEnumDecl/getQualifier");
      methods.push_back(data_model.getQualifier5);
      data_model.getQualifierLoc5 = arboretum_create_named_node("/clang/UsingEnumDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc5);
      data_model.getEnumTypeLoc = arboretum_create_named_node("/clang/UsingEnumDecl/getEnumTypeLoc");
      methods.push_back(data_model.getEnumTypeLoc);
      data_model.getEnumType = arboretum_create_named_node("/clang/UsingEnumDecl/getEnumType");
      methods.push_back(data_model.getEnumType);
      data_model.getEnumDecl = arboretum_create_named_node("/clang/UsingEnumDecl/getEnumDecl");
      methods.push_back(data_model.getEnumDecl);
      data_model.getSourceRange9 = arboretum_create_named_node("/clang/UsingEnumDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange9);
      data_model.getCanonicalDecl9 = arboretum_create_named_node("/clang/UsingEnumDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl9);
    arboretum_create_edge(data_model.UsingEnumDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPErrorDirective = arboretum_create_named_node("/clang/OMPErrorDirective");
  arboretum_create_edge(data_model.OMPErrorDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPErrorDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BaseUsingDecl = arboretum_create_named_node("/clang/BaseUsingDecl");
  arboretum_create_edge(data_model.BaseUsingDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.shadows = arboretum_create_named_node("/clang/BaseUsingDecl/shadows");
      methods.push_back(data_model.shadows);
      data_model.shadow_begin = arboretum_create_named_node("/clang/BaseUsingDecl/shadow_begin");
      methods.push_back(data_model.shadow_begin);
      data_model.shadow_end = arboretum_create_named_node("/clang/BaseUsingDecl/shadow_end");
      methods.push_back(data_model.shadow_end);
      data_model.shadow_size = arboretum_create_named_node("/clang/BaseUsingDecl/shadow_size");
      methods.push_back(data_model.shadow_size);
    arboretum_create_edge(data_model.BaseUsingDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ClassTemplateDecl = arboretum_create_named_node("/clang/ClassTemplateDecl");
  arboretum_create_edge(data_model.ClassTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplatedDecl = arboretum_create_named_node("/clang/ClassTemplateDecl/getTemplatedDecl");
      methods.push_back(data_model.getTemplatedDecl);
      data_model.isThisDeclarationADefinition1 = arboretum_create_named_node("/clang/ClassTemplateDecl/isThisDeclarationADefinition");
      methods.push_back(data_model.isThisDeclarationADefinition1);
      data_model.getCanonicalDecl11 = arboretum_create_named_node("/clang/ClassTemplateDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl11);
      data_model.getPreviousDecl3 = arboretum_create_named_node("/clang/ClassTemplateDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl3);
      data_model.getMostRecentDecl3 = arboretum_create_named_node("/clang/ClassTemplateDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl3);
      data_model.getInstantiatedFromMemberTemplate = arboretum_create_named_node("/clang/ClassTemplateDecl/getInstantiatedFromMemberTemplate");
      methods.push_back(data_model.getInstantiatedFromMemberTemplate);
      data_model.specializations = arboretum_create_named_node("/clang/ClassTemplateDecl/specializations");
      methods.push_back(data_model.specializations);
      data_model.spec_begin = arboretum_create_named_node("/clang/ClassTemplateDecl/spec_begin");
      methods.push_back(data_model.spec_begin);
      data_model.spec_end = arboretum_create_named_node("/clang/ClassTemplateDecl/spec_end");
      methods.push_back(data_model.spec_end);
    arboretum_create_edge(data_model.ClassTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateTemplateParmDecl = arboretum_create_named_node("/clang/TemplateTemplateParmDecl");
  arboretum_create_edge(data_model.TemplateTemplateParmDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isParameterPack = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/isParameterPack");
      methods.push_back(data_model.isParameterPack);
      data_model.isPackExpansion = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/isPackExpansion");
      methods.push_back(data_model.isPackExpansion);
      data_model.isExpandedParameterPack = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/isExpandedParameterPack");
      methods.push_back(data_model.isExpandedParameterPack);
      data_model.getNumExpansionTemplateParameters = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/getNumExpansionTemplateParameters");
      methods.push_back(data_model.getNumExpansionTemplateParameters);
      data_model.getDefaultArgStorage = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/getDefaultArgStorage");
      methods.push_back(data_model.getDefaultArgStorage);
      data_model.hasDefaultArgument = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/hasDefaultArgument");
      methods.push_back(data_model.hasDefaultArgument);
      data_model.getDefaultArgument = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/getDefaultArgument");
      methods.push_back(data_model.getDefaultArgument);
      data_model.getDefaultArgumentLoc = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/getDefaultArgumentLoc");
      methods.push_back(data_model.getDefaultArgumentLoc);
      data_model.defaultArgumentWasInherited = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/defaultArgumentWasInherited");
      methods.push_back(data_model.defaultArgumentWasInherited);
      data_model.getSourceRange10 = arboretum_create_named_node("/clang/TemplateTemplateParmDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange10);
    arboretum_create_edge(data_model.TemplateTemplateParmDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCContainerDecl = arboretum_create_named_node("/clang/ObjCContainerDecl");
  arboretum_create_edge(data_model.ObjCContainerDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCContainerDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateDecl = arboretum_create_named_node("/clang/TemplateDecl");
  arboretum_create_edge(data_model.TemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateParameters = arboretum_create_named_node("/clang/TemplateDecl/getTemplateParameters");
      methods.push_back(data_model.getTemplateParameters);
      data_model.hasAssociatedConstraints = arboretum_create_named_node("/clang/TemplateDecl/hasAssociatedConstraints");
      methods.push_back(data_model.hasAssociatedConstraints);
      data_model.getTemplatedDecl1 = arboretum_create_named_node("/clang/TemplateDecl/getTemplatedDecl");
      methods.push_back(data_model.getTemplatedDecl1);
      data_model.isTypeAlias = arboretum_create_named_node("/clang/TemplateDecl/isTypeAlias");
      methods.push_back(data_model.isTypeAlias);
      data_model.getSourceRange12 = arboretum_create_named_node("/clang/TemplateDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange12);
    arboretum_create_edge(data_model.TemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedUsingIfExistsDecl = arboretum_create_named_node("/clang/UnresolvedUsingIfExistsDecl");
  arboretum_create_edge(data_model.UnresolvedUsingIfExistsDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UnresolvedUsingIfExistsDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCProtocolDecl = arboretum_create_named_node("/clang/ObjCProtocolDecl");
  arboretum_create_edge(data_model.ObjCProtocolDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCProtocolDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCInterfaceDecl = arboretum_create_named_node("/clang/ObjCInterfaceDecl");
  arboretum_create_edge(data_model.ObjCInterfaceDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCInterfaceDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPOrderedDirective = arboretum_create_named_node("/clang/OMPOrderedDirective");
  arboretum_create_edge(data_model.OMPOrderedDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPOrderedDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDeleteExpr = arboretum_create_named_node("/clang/CXXDeleteExpr");
  arboretum_create_edge(data_model.CXXDeleteExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isGlobalDelete = arboretum_create_named_node("/clang/CXXDeleteExpr/isGlobalDelete");
      methods.push_back(data_model.isGlobalDelete);
      data_model.isArrayForm = arboretum_create_named_node("/clang/CXXDeleteExpr/isArrayForm");
      methods.push_back(data_model.isArrayForm);
      data_model.isArrayFormAsWritten = arboretum_create_named_node("/clang/CXXDeleteExpr/isArrayFormAsWritten");
      methods.push_back(data_model.isArrayFormAsWritten);
      data_model.doesUsualArrayDeleteWantSize1 = arboretum_create_named_node("/clang/CXXDeleteExpr/doesUsualArrayDeleteWantSize");
      methods.push_back(data_model.doesUsualArrayDeleteWantSize1);
      data_model.getOperatorDelete1 = arboretum_create_named_node("/clang/CXXDeleteExpr/getOperatorDelete");
      methods.push_back(data_model.getOperatorDelete1);
      data_model.getArgument1 = arboretum_create_named_node("/clang/CXXDeleteExpr/getArgument");
      methods.push_back(data_model.getArgument1);
      data_model.getDestroyedType = arboretum_create_named_node("/clang/CXXDeleteExpr/getDestroyedType");
      methods.push_back(data_model.getDestroyedType);
      data_model.getBeginLoc107 = arboretum_create_named_node("/clang/CXXDeleteExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc107);
      data_model.getEndLoc107 = arboretum_create_named_node("/clang/CXXDeleteExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc107);
      data_model.children203 = arboretum_create_named_node("/clang/CXXDeleteExpr/children");
      methods.push_back(data_model.children203);
    arboretum_create_edge(data_model.CXXDeleteExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StaticAssertDecl = arboretum_create_named_node("/clang/StaticAssertDecl");
  arboretum_create_edge(data_model.StaticAssertDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAssertExpr1 = arboretum_create_named_node("/clang/StaticAssertDecl/getAssertExpr");
      methods.push_back(data_model.getAssertExpr1);
      data_model.getMessage1 = arboretum_create_named_node("/clang/StaticAssertDecl/getMessage");
      methods.push_back(data_model.getMessage1);
      data_model.isFailed = arboretum_create_named_node("/clang/StaticAssertDecl/isFailed");
      methods.push_back(data_model.isFailed);
      data_model.getRParenLoc21 = arboretum_create_named_node("/clang/StaticAssertDecl/getRParenLoc");
      methods.push_back(data_model.getRParenLoc21);
      data_model.getSourceRange15 = arboretum_create_named_node("/clang/StaticAssertDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange15);
    arboretum_create_edge(data_model.StaticAssertDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXMethodDecl = arboretum_create_named_node("/clang/CXXMethodDecl");
  arboretum_create_edge(data_model.CXXMethodDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isStatic = arboretum_create_named_node("/clang/CXXMethodDecl/isStatic");
      methods.push_back(data_model.isStatic);
      data_model.isInstance = arboretum_create_named_node("/clang/CXXMethodDecl/isInstance");
      methods.push_back(data_model.isInstance);
      data_model.isExplicitObjectMemberFunction = arboretum_create_named_node("/clang/CXXMethodDecl/isExplicitObjectMemberFunction");
      methods.push_back(data_model.isExplicitObjectMemberFunction);
      data_model.isImplicitObjectMemberFunction = arboretum_create_named_node("/clang/CXXMethodDecl/isImplicitObjectMemberFunction");
      methods.push_back(data_model.isImplicitObjectMemberFunction);
      data_model.isConst = arboretum_create_named_node("/clang/CXXMethodDecl/isConst");
      methods.push_back(data_model.isConst);
      data_model.isVolatile2 = arboretum_create_named_node("/clang/CXXMethodDecl/isVolatile");
      methods.push_back(data_model.isVolatile2);
      data_model.isVirtual = arboretum_create_named_node("/clang/CXXMethodDecl/isVirtual");
      methods.push_back(data_model.isVirtual);
      data_model.isCopyAssignmentOperator = arboretum_create_named_node("/clang/CXXMethodDecl/isCopyAssignmentOperator");
      methods.push_back(data_model.isCopyAssignmentOperator);
      data_model.isMoveAssignmentOperator = arboretum_create_named_node("/clang/CXXMethodDecl/isMoveAssignmentOperator");
      methods.push_back(data_model.isMoveAssignmentOperator);
      data_model.getCanonicalDecl17 = arboretum_create_named_node("/clang/CXXMethodDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl17);
      data_model.getMostRecentDecl5 = arboretum_create_named_node("/clang/CXXMethodDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl5);
      data_model.begin_overridden_methods = arboretum_create_named_node("/clang/CXXMethodDecl/begin_overridden_methods");
      methods.push_back(data_model.begin_overridden_methods);
      data_model.end_overridden_methods = arboretum_create_named_node("/clang/CXXMethodDecl/end_overridden_methods");
      methods.push_back(data_model.end_overridden_methods);
      data_model.size_overridden_methods = arboretum_create_named_node("/clang/CXXMethodDecl/size_overridden_methods");
      methods.push_back(data_model.size_overridden_methods);
      data_model.overridden_methods = arboretum_create_named_node("/clang/CXXMethodDecl/overridden_methods");
      methods.push_back(data_model.overridden_methods);
      data_model.getParent = arboretum_create_named_node("/clang/CXXMethodDecl/getParent");
      methods.push_back(data_model.getParent);
      data_model.getThisType = arboretum_create_named_node("/clang/CXXMethodDecl/getThisType");
      methods.push_back(data_model.getThisType);
      data_model.getFunctionObjectParameterReferenceType = arboretum_create_named_node("/clang/CXXMethodDecl/getFunctionObjectParameterReferenceType");
      methods.push_back(data_model.getFunctionObjectParameterReferenceType);
      data_model.getFunctionObjectParameterType = arboretum_create_named_node("/clang/CXXMethodDecl/getFunctionObjectParameterType");
      methods.push_back(data_model.getFunctionObjectParameterType);
      data_model.getNumExplicitParams = arboretum_create_named_node("/clang/CXXMethodDecl/getNumExplicitParams");
      methods.push_back(data_model.getNumExplicitParams);
      data_model.getMethodQualifiers = arboretum_create_named_node("/clang/CXXMethodDecl/getMethodQualifiers");
      methods.push_back(data_model.getMethodQualifiers);
      data_model.getRefQualifier = arboretum_create_named_node("/clang/CXXMethodDecl/getRefQualifier");
      methods.push_back(data_model.getRefQualifier);
      data_model.hasInlineBody = arboretum_create_named_node("/clang/CXXMethodDecl/hasInlineBody");
      methods.push_back(data_model.hasInlineBody);
      data_model.isLambdaStaticInvoker = arboretum_create_named_node("/clang/CXXMethodDecl/isLambdaStaticInvoker");
      methods.push_back(data_model.isLambdaStaticInvoker);
    arboretum_create_edge(data_model.CXXMethodDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetParallelGenericLoopDirective = arboretum_create_named_node("/clang/OMPTargetParallelGenericLoopDirective");
  arboretum_create_edge(data_model.OMPTargetParallelGenericLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetParallelGenericLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPThreadPrivateDecl = arboretum_create_named_node("/clang/OMPThreadPrivateDecl");
  arboretum_create_edge(data_model.OMPThreadPrivateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPThreadPrivateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BindingDecl = arboretum_create_named_node("/clang/BindingDecl");
  arboretum_create_edge(data_model.BindingDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBinding = arboretum_create_named_node("/clang/BindingDecl/getBinding");
      methods.push_back(data_model.getBinding);
      data_model.getDecomposedDecl = arboretum_create_named_node("/clang/BindingDecl/getDecomposedDecl");
      methods.push_back(data_model.getDecomposedDecl);
      data_model.getHoldingVar = arboretum_create_named_node("/clang/BindingDecl/getHoldingVar");
      methods.push_back(data_model.getHoldingVar);
    arboretum_create_edge(data_model.BindingDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingDirectiveDecl = arboretum_create_named_node("/clang/UsingDirectiveDecl");
  arboretum_create_edge(data_model.UsingDirectiveDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getQualifierLoc6 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc6);
      data_model.getQualifier6 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getQualifier");
      methods.push_back(data_model.getQualifier6);
      data_model.getNominatedNamespaceAsWritten1 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getNominatedNamespaceAsWritten");
      methods.push_back(data_model.getNominatedNamespaceAsWritten1);
      data_model.getNominatedNamespace1 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getNominatedNamespace");
      methods.push_back(data_model.getNominatedNamespace1);
      data_model.getCommonAncestor1 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getCommonAncestor");
      methods.push_back(data_model.getCommonAncestor1);
      data_model.getUsingLoc1 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getUsingLoc");
      methods.push_back(data_model.getUsingLoc1);
      data_model.getNamespaceKeyLocation = arboretum_create_named_node("/clang/UsingDirectiveDecl/getNamespaceKeyLocation");
      methods.push_back(data_model.getNamespaceKeyLocation);
      data_model.getIdentLocation = arboretum_create_named_node("/clang/UsingDirectiveDecl/getIdentLocation");
      methods.push_back(data_model.getIdentLocation);
      data_model.getSourceRange16 = arboretum_create_named_node("/clang/UsingDirectiveDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange16);
    arboretum_create_edge(data_model.UsingDirectiveDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCCategoryDecl = arboretum_create_named_node("/clang/ObjCCategoryDecl");
  arboretum_create_edge(data_model.ObjCCategoryDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCCategoryDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TranslationUnitDecl = arboretum_create_named_node("/clang/TranslationUnitDecl");
  arboretum_create_edge(data_model.TranslationUnitDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getASTContext = arboretum_create_named_node("/clang/TranslationUnitDecl/getASTContext");
      methods.push_back(data_model.getASTContext);
      data_model.getAnonymousNamespace = arboretum_create_named_node("/clang/TranslationUnitDecl/getAnonymousNamespace");
      methods.push_back(data_model.getAnonymousNamespace);
    arboretum_create_edge(data_model.TranslationUnitDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ImplicitConceptSpecializationDecl = arboretum_create_named_node("/clang/ImplicitConceptSpecializationDecl");
  arboretum_create_edge(data_model.ImplicitConceptSpecializationDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateArguments1 = arboretum_create_named_node("/clang/ImplicitConceptSpecializationDecl/getTemplateArguments");
      methods.push_back(data_model.getTemplateArguments1);
    arboretum_create_edge(data_model.ImplicitConceptSpecializationDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VarTemplateSpecializationDecl = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl");
  arboretum_create_edge(data_model.VarTemplateSpecializationDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSpecializedTemplate = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getSpecializedTemplate");
      methods.push_back(data_model.getSpecializedTemplate);
      data_model.getTemplateArgs4 = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs4);
      data_model.getTemplateArgsInfo = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getTemplateArgsInfo");
      methods.push_back(data_model.getTemplateArgsInfo);
      data_model.getSpecializationKind = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getSpecializationKind");
      methods.push_back(data_model.getSpecializationKind);
      data_model.isExplicitSpecialization = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/isExplicitSpecialization");
      methods.push_back(data_model.isExplicitSpecialization);
      data_model.isClassScopeExplicitSpecialization = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/isClassScopeExplicitSpecialization");
      methods.push_back(data_model.isClassScopeExplicitSpecialization);
      data_model.isExplicitInstantiationOrSpecialization = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/isExplicitInstantiationOrSpecialization");
      methods.push_back(data_model.isExplicitInstantiationOrSpecialization);
      data_model.getPointOfInstantiation = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getPointOfInstantiation");
      methods.push_back(data_model.getPointOfInstantiation);
      data_model.getInstantiatedFrom = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getInstantiatedFrom");
      methods.push_back(data_model.getInstantiatedFrom);
      data_model.getSpecializedTemplateOrPartial = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getSpecializedTemplateOrPartial");
      methods.push_back(data_model.getSpecializedTemplateOrPartial);
      data_model.getTemplateInstantiationArgs = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getTemplateInstantiationArgs");
      methods.push_back(data_model.getTemplateInstantiationArgs);
      data_model.getTypeAsWritten2 = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getTypeAsWritten");
      methods.push_back(data_model.getTypeAsWritten2);
      data_model.getExternLoc = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getExternLoc");
      methods.push_back(data_model.getExternLoc);
      data_model.getTemplateKeywordLoc4 = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc4);
      data_model.getSourceRange17 = arboretum_create_named_node("/clang/VarTemplateSpecializationDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange17);
    arboretum_create_edge(data_model.VarTemplateSpecializationDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateTypeParmDecl = arboretum_create_named_node("/clang/TemplateTypeParmDecl");
  arboretum_create_edge(data_model.TemplateTypeParmDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.wasDeclaredWithTypename = arboretum_create_named_node("/clang/TemplateTypeParmDecl/wasDeclaredWithTypename");
      methods.push_back(data_model.wasDeclaredWithTypename);
      data_model.getDefaultArgStorage1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getDefaultArgStorage");
      methods.push_back(data_model.getDefaultArgStorage1);
      data_model.hasDefaultArgument1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/hasDefaultArgument");
      methods.push_back(data_model.hasDefaultArgument1);
      data_model.getDefaultArgument1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getDefaultArgument");
      methods.push_back(data_model.getDefaultArgument1);
      data_model.getDefaultArgumentInfo = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getDefaultArgumentInfo");
      methods.push_back(data_model.getDefaultArgumentInfo);
      data_model.getDefaultArgumentLoc1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getDefaultArgumentLoc");
      methods.push_back(data_model.getDefaultArgumentLoc1);
      data_model.defaultArgumentWasInherited1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/defaultArgumentWasInherited");
      methods.push_back(data_model.defaultArgumentWasInherited1);
      data_model.getDepth = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getDepth");
      methods.push_back(data_model.getDepth);
      data_model.getIndex = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getIndex");
      methods.push_back(data_model.getIndex);
      data_model.isParameterPack1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/isParameterPack");
      methods.push_back(data_model.isParameterPack1);
      data_model.isPackExpansion1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/isPackExpansion");
      methods.push_back(data_model.isPackExpansion1);
      data_model.isExpandedParameterPack1 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/isExpandedParameterPack");
      methods.push_back(data_model.isExpandedParameterPack1);
      data_model.getNumExpansionParameters = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getNumExpansionParameters");
      methods.push_back(data_model.getNumExpansionParameters);
      data_model.getTypeConstraint = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getTypeConstraint");
      methods.push_back(data_model.getTypeConstraint);
      data_model.hasTypeConstraint = arboretum_create_named_node("/clang/TemplateTypeParmDecl/hasTypeConstraint");
      methods.push_back(data_model.hasTypeConstraint);
      data_model.getSourceRange18 = arboretum_create_named_node("/clang/TemplateTypeParmDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange18);
    arboretum_create_edge(data_model.TemplateTypeParmDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Stmt2 = arboretum_create_named_node("/clang/Stmt");
  arboretum_create_edge(data_model.Stmt2, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getStmtClass = arboretum_create_named_node("/clang/Stmt/getStmtClass");
      methods.push_back(data_model.getStmtClass);
      data_model.getStmtClassName = arboretum_create_named_node("/clang/Stmt/getStmtClassName");
      methods.push_back(data_model.getStmtClassName);
      data_model.getSourceRange19 = arboretum_create_named_node("/clang/Stmt/getSourceRange");
      methods.push_back(data_model.getSourceRange19);
      data_model.getBeginLoc108 = arboretum_create_named_node("/clang/Stmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc108);
      data_model.getEndLoc108 = arboretum_create_named_node("/clang/Stmt/getEndLoc");
      methods.push_back(data_model.getEndLoc108);
      data_model.stripLabelLikeStatements = arboretum_create_named_node("/clang/Stmt/stripLabelLikeStatements");
      methods.push_back(data_model.stripLabelLikeStatements);
      data_model.children205 = arboretum_create_named_node("/clang/Stmt/children");
      methods.push_back(data_model.children205);
      data_model.child_begin1 = arboretum_create_named_node("/clang/Stmt/child_begin");
      methods.push_back(data_model.child_begin1);
      data_model.child_end1 = arboretum_create_named_node("/clang/Stmt/child_end");
      methods.push_back(data_model.child_end1);
    arboretum_create_edge(data_model.Stmt2, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionTemplateDecl = arboretum_create_named_node("/clang/FunctionTemplateDecl");
  arboretum_create_edge(data_model.FunctionTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplatedDecl2 = arboretum_create_named_node("/clang/FunctionTemplateDecl/getTemplatedDecl");
      methods.push_back(data_model.getTemplatedDecl2);
      data_model.isThisDeclarationADefinition4 = arboretum_create_named_node("/clang/FunctionTemplateDecl/isThisDeclarationADefinition");
      methods.push_back(data_model.isThisDeclarationADefinition4);
      data_model.getCanonicalDecl19 = arboretum_create_named_node("/clang/FunctionTemplateDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl19);
      data_model.getPreviousDecl5 = arboretum_create_named_node("/clang/FunctionTemplateDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl5);
      data_model.getMostRecentDecl8 = arboretum_create_named_node("/clang/FunctionTemplateDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl8);
      data_model.getInstantiatedFromMemberTemplate1 = arboretum_create_named_node("/clang/FunctionTemplateDecl/getInstantiatedFromMemberTemplate");
      methods.push_back(data_model.getInstantiatedFromMemberTemplate1);
      data_model.specializations1 = arboretum_create_named_node("/clang/FunctionTemplateDecl/specializations");
      methods.push_back(data_model.specializations1);
      data_model.spec_begin1 = arboretum_create_named_node("/clang/FunctionTemplateDecl/spec_begin");
      methods.push_back(data_model.spec_begin1);
      data_model.spec_end1 = arboretum_create_named_node("/clang/FunctionTemplateDecl/spec_end");
      methods.push_back(data_model.spec_end1);
      data_model.isAbbreviated = arboretum_create_named_node("/clang/FunctionTemplateDecl/isAbbreviated");
      methods.push_back(data_model.isAbbreviated);
    arboretum_create_edge(data_model.FunctionTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AccessSpecDecl = arboretum_create_named_node("/clang/AccessSpecDecl");
  arboretum_create_edge(data_model.AccessSpecDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAccessSpecifierLoc = arboretum_create_named_node("/clang/AccessSpecDecl/getAccessSpecifierLoc");
      methods.push_back(data_model.getAccessSpecifierLoc);
      data_model.getColonLoc2 = arboretum_create_named_node("/clang/AccessSpecDecl/getColonLoc");
      methods.push_back(data_model.getColonLoc2);
      data_model.getSourceRange20 = arboretum_create_named_node("/clang/AccessSpecDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange20);
    arboretum_create_edge(data_model.AccessSpecDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LifetimeExtendedTemporaryDecl = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl");
  arboretum_create_edge(data_model.LifetimeExtendedTemporaryDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExtendingDecl3 = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl/getExtendingDecl");
      methods.push_back(data_model.getExtendingDecl3);
      data_model.getStorageDuration1 = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl/getStorageDuration");
      methods.push_back(data_model.getStorageDuration1);
      data_model.getTemporaryExpr1 = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl/getTemporaryExpr");
      methods.push_back(data_model.getTemporaryExpr1);
      data_model.getManglingNumber1 = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl/getManglingNumber");
      methods.push_back(data_model.getManglingNumber1);
      data_model.getValue6 = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl/getValue");
      methods.push_back(data_model.getValue6);
      data_model.childrenExpr1 = arboretum_create_named_node("/clang/LifetimeExtendedTemporaryDecl/childrenExpr");
      methods.push_back(data_model.childrenExpr1);
    arboretum_create_edge(data_model.LifetimeExtendedTemporaryDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FileScopeAsmDecl = arboretum_create_named_node("/clang/FileScopeAsmDecl");
  arboretum_create_edge(data_model.FileScopeAsmDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAsmLoc1 = arboretum_create_named_node("/clang/FileScopeAsmDecl/getAsmLoc");
      methods.push_back(data_model.getAsmLoc1);
      data_model.getRParenLoc22 = arboretum_create_named_node("/clang/FileScopeAsmDecl/getRParenLoc");
      methods.push_back(data_model.getRParenLoc22);
      data_model.getSourceRange21 = arboretum_create_named_node("/clang/FileScopeAsmDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange21);
      data_model.getAsmString3 = arboretum_create_named_node("/clang/FileScopeAsmDecl/getAsmString");
      methods.push_back(data_model.getAsmString3);
    arboretum_create_edge(data_model.FileScopeAsmDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VarDecl = arboretum_create_named_node("/clang/VarDecl");
  arboretum_create_edge(data_model.VarDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange22 = arboretum_create_named_node("/clang/VarDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange22);
      data_model.getStorageClass = arboretum_create_named_node("/clang/VarDecl/getStorageClass");
      methods.push_back(data_model.getStorageClass);
      data_model.getTSCSpec = arboretum_create_named_node("/clang/VarDecl/getTSCSpec");
      methods.push_back(data_model.getTSCSpec);
      data_model.getTLSKind = arboretum_create_named_node("/clang/VarDecl/getTLSKind");
      methods.push_back(data_model.getTLSKind);
      data_model.hasLocalStorage = arboretum_create_named_node("/clang/VarDecl/hasLocalStorage");
      methods.push_back(data_model.hasLocalStorage);
      data_model.isStaticLocal = arboretum_create_named_node("/clang/VarDecl/isStaticLocal");
      methods.push_back(data_model.isStaticLocal);
      data_model.hasExternalStorage = arboretum_create_named_node("/clang/VarDecl/hasExternalStorage");
      methods.push_back(data_model.hasExternalStorage);
      data_model.hasGlobalStorage = arboretum_create_named_node("/clang/VarDecl/hasGlobalStorage");
      methods.push_back(data_model.hasGlobalStorage);
      data_model.getStorageDuration2 = arboretum_create_named_node("/clang/VarDecl/getStorageDuration");
      methods.push_back(data_model.getStorageDuration2);
      data_model.getLanguageLinkage = arboretum_create_named_node("/clang/VarDecl/getLanguageLinkage");
      methods.push_back(data_model.getLanguageLinkage);
      data_model.isExternC = arboretum_create_named_node("/clang/VarDecl/isExternC");
      methods.push_back(data_model.isExternC);
      data_model.isInExternCContext = arboretum_create_named_node("/clang/VarDecl/isInExternCContext");
      methods.push_back(data_model.isInExternCContext);
      data_model.isInExternCXXContext = arboretum_create_named_node("/clang/VarDecl/isInExternCXXContext");
      methods.push_back(data_model.isInExternCXXContext);
      data_model.isLocalVarDecl = arboretum_create_named_node("/clang/VarDecl/isLocalVarDecl");
      methods.push_back(data_model.isLocalVarDecl);
      data_model.isLocalVarDeclOrParm = arboretum_create_named_node("/clang/VarDecl/isLocalVarDeclOrParm");
      methods.push_back(data_model.isLocalVarDeclOrParm);
      data_model.isFunctionOrMethodVarDecl = arboretum_create_named_node("/clang/VarDecl/isFunctionOrMethodVarDecl");
      methods.push_back(data_model.isFunctionOrMethodVarDecl);
      data_model.isStaticDataMember = arboretum_create_named_node("/clang/VarDecl/isStaticDataMember");
      methods.push_back(data_model.isStaticDataMember);
      data_model.getCanonicalDecl21 = arboretum_create_named_node("/clang/VarDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl21);
      data_model.isThisDeclarationADefinition6 = arboretum_create_named_node("/clang/VarDecl/isThisDeclarationADefinition");
      methods.push_back(data_model.isThisDeclarationADefinition6);
      data_model.hasDefinition4 = arboretum_create_named_node("/clang/VarDecl/hasDefinition");
      methods.push_back(data_model.hasDefinition4);
      data_model.getActingDefinition1 = arboretum_create_named_node("/clang/VarDecl/getActingDefinition");
      methods.push_back(data_model.getActingDefinition1);
      data_model.getDefinition9 = arboretum_create_named_node("/clang/VarDecl/getDefinition");
      methods.push_back(data_model.getDefinition9);
      data_model.isOutOfLine = arboretum_create_named_node("/clang/VarDecl/isOutOfLine");
      methods.push_back(data_model.isOutOfLine);
      data_model.isFileVarDecl = arboretum_create_named_node("/clang/VarDecl/isFileVarDecl");
      methods.push_back(data_model.isFileVarDecl);
      data_model.getAnyInitializer = arboretum_create_named_node("/clang/VarDecl/getAnyInitializer");
      methods.push_back(data_model.getAnyInitializer);
      data_model.hasInit = arboretum_create_named_node("/clang/VarDecl/hasInit");
      methods.push_back(data_model.hasInit);
      data_model.getInit8 = arboretum_create_named_node("/clang/VarDecl/getInit");
      methods.push_back(data_model.getInit8);
      data_model.getInitializingDeclaration1 = arboretum_create_named_node("/clang/VarDecl/getInitializingDeclaration");
      methods.push_back(data_model.getInitializingDeclaration1);
      data_model.ensureEvaluatedStmt = arboretum_create_named_node("/clang/VarDecl/ensureEvaluatedStmt");
      methods.push_back(data_model.ensureEvaluatedStmt);
      data_model.getEvaluatedStmt = arboretum_create_named_node("/clang/VarDecl/getEvaluatedStmt");
      methods.push_back(data_model.getEvaluatedStmt);
      data_model.evaluateValue = arboretum_create_named_node("/clang/VarDecl/evaluateValue");
      methods.push_back(data_model.evaluateValue);
      data_model.getEvaluatedValue = arboretum_create_named_node("/clang/VarDecl/getEvaluatedValue");
      methods.push_back(data_model.getEvaluatedValue);
      data_model.hasConstantInitialization = arboretum_create_named_node("/clang/VarDecl/hasConstantInitialization");
      methods.push_back(data_model.hasConstantInitialization);
      data_model.getInitStyle = arboretum_create_named_node("/clang/VarDecl/getInitStyle");
      methods.push_back(data_model.getInitStyle);
      data_model.isDirectInit = arboretum_create_named_node("/clang/VarDecl/isDirectInit");
      methods.push_back(data_model.isDirectInit);
      data_model.isThisDeclarationADemotedDefinition1 = arboretum_create_named_node("/clang/VarDecl/isThisDeclarationADemotedDefinition");
      methods.push_back(data_model.isThisDeclarationADemotedDefinition1);
      data_model.isExceptionVariable = arboretum_create_named_node("/clang/VarDecl/isExceptionVariable");
      methods.push_back(data_model.isExceptionVariable);
      data_model.isNRVOVariable = arboretum_create_named_node("/clang/VarDecl/isNRVOVariable");
      methods.push_back(data_model.isNRVOVariable);
      data_model.isCXXForRangeDecl = arboretum_create_named_node("/clang/VarDecl/isCXXForRangeDecl");
      methods.push_back(data_model.isCXXForRangeDecl);
      data_model.isObjCForDecl = arboretum_create_named_node("/clang/VarDecl/isObjCForDecl");
      methods.push_back(data_model.isObjCForDecl);
      data_model.isARCPseudoStrong = arboretum_create_named_node("/clang/VarDecl/isARCPseudoStrong");
      methods.push_back(data_model.isARCPseudoStrong);
      data_model.isInline = arboretum_create_named_node("/clang/VarDecl/isInline");
      methods.push_back(data_model.isInline);
      data_model.isInlineSpecified = arboretum_create_named_node("/clang/VarDecl/isInlineSpecified");
      methods.push_back(data_model.isInlineSpecified);
      data_model.isConstexpr = arboretum_create_named_node("/clang/VarDecl/isConstexpr");
      methods.push_back(data_model.isConstexpr);
      data_model.isInitCapture1 = arboretum_create_named_node("/clang/VarDecl/isInitCapture");
      methods.push_back(data_model.isInitCapture1);
      data_model.isParameterPack2 = arboretum_create_named_node("/clang/VarDecl/isParameterPack");
      methods.push_back(data_model.isParameterPack2);
      data_model.isPreviousDeclInSameBlockScope = arboretum_create_named_node("/clang/VarDecl/isPreviousDeclInSameBlockScope");
      methods.push_back(data_model.isPreviousDeclInSameBlockScope);
      data_model.isEscapingByref = arboretum_create_named_node("/clang/VarDecl/isEscapingByref");
      methods.push_back(data_model.isEscapingByref);
      data_model.isNonEscapingByref = arboretum_create_named_node("/clang/VarDecl/isNonEscapingByref");
      methods.push_back(data_model.isNonEscapingByref);
      data_model.hasDependentAlignment = arboretum_create_named_node("/clang/VarDecl/hasDependentAlignment");
      methods.push_back(data_model.hasDependentAlignment);
      data_model.getTemplateInstantiationPattern2 = arboretum_create_named_node("/clang/VarDecl/getTemplateInstantiationPattern");
      methods.push_back(data_model.getTemplateInstantiationPattern2);
      data_model.getInstantiatedFromStaticDataMember = arboretum_create_named_node("/clang/VarDecl/getInstantiatedFromStaticDataMember");
      methods.push_back(data_model.getInstantiatedFromStaticDataMember);
      data_model.getTemplateSpecializationKind1 = arboretum_create_named_node("/clang/VarDecl/getTemplateSpecializationKind");
      methods.push_back(data_model.getTemplateSpecializationKind1);
      data_model.getTemplateSpecializationKindForInstantiation = arboretum_create_named_node("/clang/VarDecl/getTemplateSpecializationKindForInstantiation");
      methods.push_back(data_model.getTemplateSpecializationKindForInstantiation);
      data_model.getPointOfInstantiation1 = arboretum_create_named_node("/clang/VarDecl/getPointOfInstantiation");
      methods.push_back(data_model.getPointOfInstantiation1);
      data_model.getMemberSpecializationInfo1 = arboretum_create_named_node("/clang/VarDecl/getMemberSpecializationInfo");
      methods.push_back(data_model.getMemberSpecializationInfo1);
      data_model.getDescribedVarTemplate = arboretum_create_named_node("/clang/VarDecl/getDescribedVarTemplate");
      methods.push_back(data_model.getDescribedVarTemplate);
      data_model.isKnownToBeDefined = arboretum_create_named_node("/clang/VarDecl/isKnownToBeDefined");
      methods.push_back(data_model.isKnownToBeDefined);
    arboretum_create_edge(data_model.VarDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCImplementationDecl = arboretum_create_named_node("/clang/ObjCImplementationDecl");
  arboretum_create_edge(data_model.ObjCImplementationDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCImplementationDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExternCContextDecl = arboretum_create_named_node("/clang/ExternCContextDecl");
  arboretum_create_edge(data_model.ExternCContextDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ExternCContextDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPRequiresDecl = arboretum_create_named_node("/clang/OMPRequiresDecl");
  arboretum_create_edge(data_model.OMPRequiresDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPRequiresDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ValueDecl = arboretum_create_named_node("/clang/ValueDecl");
  arboretum_create_edge(data_model.ValueDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getType1 = arboretum_create_named_node("/clang/ValueDecl/getType");
      methods.push_back(data_model.getType1);
      data_model.isWeak = arboretum_create_named_node("/clang/ValueDecl/isWeak");
      methods.push_back(data_model.isWeak);
      data_model.isInitCapture2 = arboretum_create_named_node("/clang/ValueDecl/isInitCapture");
      methods.push_back(data_model.isInitCapture2);
      data_model.getPotentiallyDecomposedVarDecl1 = arboretum_create_named_node("/clang/ValueDecl/getPotentiallyDecomposedVarDecl");
      methods.push_back(data_model.getPotentiallyDecomposedVarDecl1);
    arboretum_create_edge(data_model.ValueDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExportDecl = arboretum_create_named_node("/clang/ExportDecl");
  arboretum_create_edge(data_model.ExportDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExportLoc = arboretum_create_named_node("/clang/ExportDecl/getExportLoc");
      methods.push_back(data_model.getExportLoc);
      data_model.getRBraceLoc2 = arboretum_create_named_node("/clang/ExportDecl/getRBraceLoc");
      methods.push_back(data_model.getRBraceLoc2);
      data_model.hasBraces1 = arboretum_create_named_node("/clang/ExportDecl/hasBraces");
      methods.push_back(data_model.hasBraces1);
      data_model.getEndLoc109 = arboretum_create_named_node("/clang/ExportDecl/getEndLoc");
      methods.push_back(data_model.getEndLoc109);
      data_model.getSourceRange23 = arboretum_create_named_node("/clang/ExportDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange23);
    arboretum_create_edge(data_model.ExportDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VarTemplateDecl = arboretum_create_named_node("/clang/VarTemplateDecl");
  arboretum_create_edge(data_model.VarTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplatedDecl3 = arboretum_create_named_node("/clang/VarTemplateDecl/getTemplatedDecl");
      methods.push_back(data_model.getTemplatedDecl3);
      data_model.isThisDeclarationADefinition7 = arboretum_create_named_node("/clang/VarTemplateDecl/isThisDeclarationADefinition");
      methods.push_back(data_model.isThisDeclarationADefinition7);
      data_model.getCanonicalDecl23 = arboretum_create_named_node("/clang/VarTemplateDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl23);
      data_model.getPreviousDecl7 = arboretum_create_named_node("/clang/VarTemplateDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl7);
      data_model.getMostRecentDecl10 = arboretum_create_named_node("/clang/VarTemplateDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl10);
      data_model.getInstantiatedFromMemberTemplate2 = arboretum_create_named_node("/clang/VarTemplateDecl/getInstantiatedFromMemberTemplate");
      methods.push_back(data_model.getInstantiatedFromMemberTemplate2);
      data_model.specializations2 = arboretum_create_named_node("/clang/VarTemplateDecl/specializations");
      methods.push_back(data_model.specializations2);
      data_model.spec_begin2 = arboretum_create_named_node("/clang/VarTemplateDecl/spec_begin");
      methods.push_back(data_model.spec_begin2);
      data_model.spec_end2 = arboretum_create_named_node("/clang/VarTemplateDecl/spec_end");
      methods.push_back(data_model.spec_end2);
    arboretum_create_edge(data_model.VarTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TopLevelStmtDecl = arboretum_create_named_node("/clang/TopLevelStmtDecl");
  arboretum_create_edge(data_model.TopLevelStmtDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange24 = arboretum_create_named_node("/clang/TopLevelStmtDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange24);
      data_model.getStmt1 = arboretum_create_named_node("/clang/TopLevelStmtDecl/getStmt");
      methods.push_back(data_model.getStmt1);
      data_model.isSemiMissing = arboretum_create_named_node("/clang/TopLevelStmtDecl/isSemiMissing");
      methods.push_back(data_model.isSemiMissing);
    arboretum_create_edge(data_model.TopLevelStmtDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Decl = arboretum_create_named_node("/clang/Decl");
  arboretum_create_edge(data_model.Decl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange25 = arboretum_create_named_node("/clang/Decl/getSourceRange");
      methods.push_back(data_model.getSourceRange25);
      data_model.getBeginLoc109 = arboretum_create_named_node("/clang/Decl/getBeginLoc");
      methods.push_back(data_model.getBeginLoc109);
      data_model.getEndLoc110 = arboretum_create_named_node("/clang/Decl/getEndLoc");
      methods.push_back(data_model.getEndLoc110);
      data_model.getLocation13 = arboretum_create_named_node("/clang/Decl/getLocation");
      methods.push_back(data_model.getLocation13);
      data_model.getKind3 = arboretum_create_named_node("/clang/Decl/getKind");
      methods.push_back(data_model.getKind3);
      data_model.getDeclKindName = arboretum_create_named_node("/clang/Decl/getDeclKindName");
      methods.push_back(data_model.getDeclKindName);
      data_model.getNextDeclInContext1 = arboretum_create_named_node("/clang/Decl/getNextDeclInContext");
      methods.push_back(data_model.getNextDeclInContext1);
      data_model.getDeclContext1 = arboretum_create_named_node("/clang/Decl/getDeclContext");
      methods.push_back(data_model.getDeclContext1);
      data_model.getNonTransparentDeclContext1 = arboretum_create_named_node("/clang/Decl/getNonTransparentDeclContext");
      methods.push_back(data_model.getNonTransparentDeclContext1);
      data_model.getNonClosureContext1 = arboretum_create_named_node("/clang/Decl/getNonClosureContext");
      methods.push_back(data_model.getNonClosureContext1);
      data_model.getTranslationUnitDecl1 = arboretum_create_named_node("/clang/Decl/getTranslationUnitDecl");
      methods.push_back(data_model.getTranslationUnitDecl1);
      data_model.isInAnonymousNamespace = arboretum_create_named_node("/clang/Decl/isInAnonymousNamespace");
      methods.push_back(data_model.isInAnonymousNamespace);
      data_model.isInStdNamespace = arboretum_create_named_node("/clang/Decl/isInStdNamespace");
      methods.push_back(data_model.isInStdNamespace);
      data_model.isFileContextDecl = arboretum_create_named_node("/clang/Decl/isFileContextDecl");
      methods.push_back(data_model.isFileContextDecl);
      data_model.getASTContext1 = arboretum_create_named_node("/clang/Decl/getASTContext");
      methods.push_back(data_model.getASTContext1);
      data_model.getLangOpts = arboretum_create_named_node("/clang/Decl/getLangOpts");
      methods.push_back(data_model.getLangOpts);
      data_model.getAccess = arboretum_create_named_node("/clang/Decl/getAccess");
      methods.push_back(data_model.getAccess);
      data_model.getAccessUnsafe = arboretum_create_named_node("/clang/Decl/getAccessUnsafe");
      methods.push_back(data_model.getAccessUnsafe);
      data_model.hasAttrs = arboretum_create_named_node("/clang/Decl/hasAttrs");
      methods.push_back(data_model.hasAttrs);
      data_model.getAttrs1 = arboretum_create_named_node("/clang/Decl/getAttrs");
      methods.push_back(data_model.getAttrs1);
      data_model.attrs = arboretum_create_named_node("/clang/Decl/attrs");
      methods.push_back(data_model.attrs);
      data_model.attr_begin = arboretum_create_named_node("/clang/Decl/attr_begin");
      methods.push_back(data_model.attr_begin);
      data_model.attr_end = arboretum_create_named_node("/clang/Decl/attr_end");
      methods.push_back(data_model.attr_end);
      data_model.getMaxAlignment = arboretum_create_named_node("/clang/Decl/getMaxAlignment");
      methods.push_back(data_model.getMaxAlignment);
      data_model.isInvalidDecl = arboretum_create_named_node("/clang/Decl/isInvalidDecl");
      methods.push_back(data_model.isInvalidDecl);
      data_model.isImplicit2 = arboretum_create_named_node("/clang/Decl/isImplicit");
      methods.push_back(data_model.isImplicit2);
      data_model.isReferenced = arboretum_create_named_node("/clang/Decl/isReferenced");
      methods.push_back(data_model.isReferenced);
      data_model.isThisDeclarationReferenced = arboretum_create_named_node("/clang/Decl/isThisDeclarationReferenced");
      methods.push_back(data_model.isThisDeclarationReferenced);
      data_model.isTopLevelDeclInObjCContainer = arboretum_create_named_node("/clang/Decl/isTopLevelDeclInObjCContainer");
      methods.push_back(data_model.isTopLevelDeclInObjCContainer);
      data_model.getExternalSourceSymbolAttr = arboretum_create_named_node("/clang/Decl/getExternalSourceSymbolAttr");
      methods.push_back(data_model.getExternalSourceSymbolAttr);
      data_model.isModulePrivate = arboretum_create_named_node("/clang/Decl/isModulePrivate");
      methods.push_back(data_model.isModulePrivate);
      data_model.isInExportDeclContext = arboretum_create_named_node("/clang/Decl/isInExportDeclContext");
      methods.push_back(data_model.isInExportDeclContext);
      data_model.isInvisibleOutsideTheOwningModule = arboretum_create_named_node("/clang/Decl/isInvisibleOutsideTheOwningModule");
      methods.push_back(data_model.isInvisibleOutsideTheOwningModule);
      data_model.isInAnotherModuleUnit = arboretum_create_named_node("/clang/Decl/isInAnotherModuleUnit");
      methods.push_back(data_model.isInAnotherModuleUnit);
      data_model.isDiscardedInGlobalModuleFragment = arboretum_create_named_node("/clang/Decl/isDiscardedInGlobalModuleFragment");
      methods.push_back(data_model.isDiscardedInGlobalModuleFragment);
      data_model.shouldSkipCheckingODR = arboretum_create_named_node("/clang/Decl/shouldSkipCheckingODR");
      methods.push_back(data_model.shouldSkipCheckingODR);
      data_model.hasDefiningAttr = arboretum_create_named_node("/clang/Decl/hasDefiningAttr");
      methods.push_back(data_model.hasDefiningAttr);
      data_model.getDefiningAttr = arboretum_create_named_node("/clang/Decl/getDefiningAttr");
      methods.push_back(data_model.getDefiningAttr);
      data_model.getVersionIntroduced = arboretum_create_named_node("/clang/Decl/getVersionIntroduced");
      methods.push_back(data_model.getVersionIntroduced);
      data_model.isWeakImported = arboretum_create_named_node("/clang/Decl/isWeakImported");
      methods.push_back(data_model.isWeakImported);
      data_model.isFromASTFile = arboretum_create_named_node("/clang/Decl/isFromASTFile");
      methods.push_back(data_model.isFromASTFile);
      data_model.getGlobalID = arboretum_create_named_node("/clang/Decl/getGlobalID");
      methods.push_back(data_model.getGlobalID);
      data_model.getOwningModuleID = arboretum_create_named_node("/clang/Decl/getOwningModuleID");
      methods.push_back(data_model.getOwningModuleID);
      data_model.getImportedOwningModule = arboretum_create_named_node("/clang/Decl/getImportedOwningModule");
      methods.push_back(data_model.getImportedOwningModule);
      data_model.getLocalOwningModule = arboretum_create_named_node("/clang/Decl/getLocalOwningModule");
      methods.push_back(data_model.getLocalOwningModule);
      data_model.hasOwningModule = arboretum_create_named_node("/clang/Decl/hasOwningModule");
      methods.push_back(data_model.hasOwningModule);
      data_model.getOwningModule = arboretum_create_named_node("/clang/Decl/getOwningModule");
      methods.push_back(data_model.getOwningModule);
      data_model.isUnconditionallyVisible = arboretum_create_named_node("/clang/Decl/isUnconditionallyVisible");
      methods.push_back(data_model.isUnconditionallyVisible);
      data_model.isReachable = arboretum_create_named_node("/clang/Decl/isReachable");
      methods.push_back(data_model.isReachable);
      data_model.getModuleOwnershipKind = arboretum_create_named_node("/clang/Decl/getModuleOwnershipKind");
      methods.push_back(data_model.getModuleOwnershipKind);
      data_model.getIdentifierNamespace = arboretum_create_named_node("/clang/Decl/getIdentifierNamespace");
      methods.push_back(data_model.getIdentifierNamespace);
      data_model.hasTagIdentifierNamespace = arboretum_create_named_node("/clang/Decl/hasTagIdentifierNamespace");
      methods.push_back(data_model.hasTagIdentifierNamespace);
      data_model.getLexicalDeclContext1 = arboretum_create_named_node("/clang/Decl/getLexicalDeclContext");
      methods.push_back(data_model.getLexicalDeclContext1);
      data_model.isOutOfLine1 = arboretum_create_named_node("/clang/Decl/isOutOfLine");
      methods.push_back(data_model.isOutOfLine1);
      data_model.isTemplated = arboretum_create_named_node("/clang/Decl/isTemplated");
      methods.push_back(data_model.isTemplated);
      data_model.getTemplateDepth = arboretum_create_named_node("/clang/Decl/getTemplateDepth");
      methods.push_back(data_model.getTemplateDepth);
      data_model.isDefinedOutsideFunctionOrMethod = arboretum_create_named_node("/clang/Decl/isDefinedOutsideFunctionOrMethod");
      methods.push_back(data_model.isDefinedOutsideFunctionOrMethod);
      data_model.isInLocalScopeForInstantiation = arboretum_create_named_node("/clang/Decl/isInLocalScopeForInstantiation");
      methods.push_back(data_model.isInLocalScopeForInstantiation);
      data_model.getCanonicalDecl25 = arboretum_create_named_node("/clang/Decl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl25);
      data_model.isCanonicalDecl = arboretum_create_named_node("/clang/Decl/isCanonicalDecl");
      methods.push_back(data_model.isCanonicalDecl);
      data_model.redecls = arboretum_create_named_node("/clang/Decl/redecls");
      methods.push_back(data_model.redecls);
      data_model.redecls_begin = arboretum_create_named_node("/clang/Decl/redecls_begin");
      methods.push_back(data_model.redecls_begin);
      data_model.redecls_end = arboretum_create_named_node("/clang/Decl/redecls_end");
      methods.push_back(data_model.redecls_end);
      data_model.getPreviousDecl9 = arboretum_create_named_node("/clang/Decl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl9);
      data_model.isFirstDecl = arboretum_create_named_node("/clang/Decl/isFirstDecl");
      methods.push_back(data_model.isFirstDecl);
      data_model.getMostRecentDecl12 = arboretum_create_named_node("/clang/Decl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl12);
      data_model.getBody13 = arboretum_create_named_node("/clang/Decl/getBody");
      methods.push_back(data_model.getBody13);
      data_model.hasBody = arboretum_create_named_node("/clang/Decl/hasBody");
      methods.push_back(data_model.hasBody);
      data_model.getBodyRBrace = arboretum_create_named_node("/clang/Decl/getBodyRBrace");
      methods.push_back(data_model.getBodyRBrace);
      data_model.isTemplateParameter = arboretum_create_named_node("/clang/Decl/isTemplateParameter");
      methods.push_back(data_model.isTemplateParameter);
      data_model.isTemplateParameterPack = arboretum_create_named_node("/clang/Decl/isTemplateParameterPack");
      methods.push_back(data_model.isTemplateParameterPack);
      data_model.isParameterPack3 = arboretum_create_named_node("/clang/Decl/isParameterPack");
      methods.push_back(data_model.isParameterPack3);
      data_model.isTemplateDecl = arboretum_create_named_node("/clang/Decl/isTemplateDecl");
      methods.push_back(data_model.isTemplateDecl);
      data_model.isFunctionOrFunctionTemplate = arboretum_create_named_node("/clang/Decl/isFunctionOrFunctionTemplate");
      methods.push_back(data_model.isFunctionOrFunctionTemplate);
      data_model.getDescribedTemplate = arboretum_create_named_node("/clang/Decl/getDescribedTemplate");
      methods.push_back(data_model.getDescribedTemplate);
      data_model.getDescribedTemplateParams = arboretum_create_named_node("/clang/Decl/getDescribedTemplateParams");
      methods.push_back(data_model.getDescribedTemplateParams);
      data_model.getAsFunction1 = arboretum_create_named_node("/clang/Decl/getAsFunction");
      methods.push_back(data_model.getAsFunction1);
      data_model.isLocalExternDecl = arboretum_create_named_node("/clang/Decl/isLocalExternDecl");
      methods.push_back(data_model.isLocalExternDecl);
      data_model.getFriendObjectKind = arboretum_create_named_node("/clang/Decl/getFriendObjectKind");
      methods.push_back(data_model.getFriendObjectKind);
      data_model.getID1 = arboretum_create_named_node("/clang/Decl/getID");
      methods.push_back(data_model.getID1);
      data_model.isFunctionPointerType = arboretum_create_named_node("/clang/Decl/isFunctionPointerType");
      methods.push_back(data_model.isFunctionPointerType);
    arboretum_create_edge(data_model.Decl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCCategoryImplDecl = arboretum_create_named_node("/clang/ObjCCategoryImplDecl");
  arboretum_create_edge(data_model.ObjCCategoryImplDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCCategoryImplDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionDecl = arboretum_create_named_node("/clang/FunctionDecl");
  arboretum_create_edge(data_model.FunctionDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameInfo2 = arboretum_create_named_node("/clang/FunctionDecl/getNameInfo");
      methods.push_back(data_model.getNameInfo2);
      data_model.getEllipsisLoc3 = arboretum_create_named_node("/clang/FunctionDecl/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc3);
      data_model.getSourceRange26 = arboretum_create_named_node("/clang/FunctionDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange26);
      data_model.hasBody2 = arboretum_create_named_node("/clang/FunctionDecl/hasBody");
      methods.push_back(data_model.hasBody2);
      data_model.hasTrivialBody = arboretum_create_named_node("/clang/FunctionDecl/hasTrivialBody");
      methods.push_back(data_model.hasTrivialBody);
      data_model.isDefined1 = arboretum_create_named_node("/clang/FunctionDecl/isDefined");
      methods.push_back(data_model.isDefined1);
      data_model.getDefinition12 = arboretum_create_named_node("/clang/FunctionDecl/getDefinition");
      methods.push_back(data_model.getDefinition12);
      data_model.getBody15 = arboretum_create_named_node("/clang/FunctionDecl/getBody");
      methods.push_back(data_model.getBody15);
      data_model.isThisDeclarationADefinition8 = arboretum_create_named_node("/clang/FunctionDecl/isThisDeclarationADefinition");
      methods.push_back(data_model.isThisDeclarationADefinition8);
      data_model.isThisDeclarationInstantiatedFromAFriendDefinition = arboretum_create_named_node("/clang/FunctionDecl/isThisDeclarationInstantiatedFromAFriendDefinition");
      methods.push_back(data_model.isThisDeclarationInstantiatedFromAFriendDefinition);
      data_model.doesThisDeclarationHaveABody = arboretum_create_named_node("/clang/FunctionDecl/doesThisDeclarationHaveABody");
      methods.push_back(data_model.doesThisDeclarationHaveABody);
      data_model.getDefaultedFunctionInfo = arboretum_create_named_node("/clang/FunctionDecl/getDefaultedFunctionInfo");
      methods.push_back(data_model.getDefaultedFunctionInfo);
      data_model.isVariadic = arboretum_create_named_node("/clang/FunctionDecl/isVariadic");
      methods.push_back(data_model.isVariadic);
      data_model.isVirtualAsWritten = arboretum_create_named_node("/clang/FunctionDecl/isVirtualAsWritten");
      methods.push_back(data_model.isVirtualAsWritten);
      data_model.isPureVirtual = arboretum_create_named_node("/clang/FunctionDecl/isPureVirtual");
      methods.push_back(data_model.isPureVirtual);
      data_model.isLateTemplateParsed = arboretum_create_named_node("/clang/FunctionDecl/isLateTemplateParsed");
      methods.push_back(data_model.isLateTemplateParsed);
      data_model.isTrivial1 = arboretum_create_named_node("/clang/FunctionDecl/isTrivial");
      methods.push_back(data_model.isTrivial1);
      data_model.isTrivialForCall = arboretum_create_named_node("/clang/FunctionDecl/isTrivialForCall");
      methods.push_back(data_model.isTrivialForCall);
      data_model.isDefaulted = arboretum_create_named_node("/clang/FunctionDecl/isDefaulted");
      methods.push_back(data_model.isDefaulted);
      data_model.isExplicitlyDefaulted = arboretum_create_named_node("/clang/FunctionDecl/isExplicitlyDefaulted");
      methods.push_back(data_model.isExplicitlyDefaulted);
      data_model.getDefaultLoc1 = arboretum_create_named_node("/clang/FunctionDecl/getDefaultLoc");
      methods.push_back(data_model.getDefaultLoc1);
      data_model.isUserProvided = arboretum_create_named_node("/clang/FunctionDecl/isUserProvided");
      methods.push_back(data_model.isUserProvided);
      data_model.isIneligibleOrNotSelected = arboretum_create_named_node("/clang/FunctionDecl/isIneligibleOrNotSelected");
      methods.push_back(data_model.isIneligibleOrNotSelected);
      data_model.hasImplicitReturnZero = arboretum_create_named_node("/clang/FunctionDecl/hasImplicitReturnZero");
      methods.push_back(data_model.hasImplicitReturnZero);
      data_model.hasPrototype = arboretum_create_named_node("/clang/FunctionDecl/hasPrototype");
      methods.push_back(data_model.hasPrototype);
      data_model.hasWrittenPrototype = arboretum_create_named_node("/clang/FunctionDecl/hasWrittenPrototype");
      methods.push_back(data_model.hasWrittenPrototype);
      data_model.hasInheritedPrototype = arboretum_create_named_node("/clang/FunctionDecl/hasInheritedPrototype");
      methods.push_back(data_model.hasInheritedPrototype);
      data_model.isConstexpr1 = arboretum_create_named_node("/clang/FunctionDecl/isConstexpr");
      methods.push_back(data_model.isConstexpr1);
      data_model.getConstexprKind = arboretum_create_named_node("/clang/FunctionDecl/getConstexprKind");
      methods.push_back(data_model.getConstexprKind);
      data_model.isConstexprSpecified = arboretum_create_named_node("/clang/FunctionDecl/isConstexprSpecified");
      methods.push_back(data_model.isConstexprSpecified);
      data_model.isConsteval = arboretum_create_named_node("/clang/FunctionDecl/isConsteval");
      methods.push_back(data_model.isConsteval);
      data_model.BodyContainsImmediateEscalatingExpressions = arboretum_create_named_node("/clang/FunctionDecl/BodyContainsImmediateEscalatingExpressions");
      methods.push_back(data_model.BodyContainsImmediateEscalatingExpressions);
      data_model.isImmediateEscalating2 = arboretum_create_named_node("/clang/FunctionDecl/isImmediateEscalating");
      methods.push_back(data_model.isImmediateEscalating2);
      data_model.isImmediateFunction = arboretum_create_named_node("/clang/FunctionDecl/isImmediateFunction");
      methods.push_back(data_model.isImmediateFunction);
      data_model.instantiationIsPending = arboretum_create_named_node("/clang/FunctionDecl/instantiationIsPending");
      methods.push_back(data_model.instantiationIsPending);
      data_model.usesSEHTry = arboretum_create_named_node("/clang/FunctionDecl/usesSEHTry");
      methods.push_back(data_model.usesSEHTry);
      data_model.isDeleted = arboretum_create_named_node("/clang/FunctionDecl/isDeleted");
      methods.push_back(data_model.isDeleted);
      data_model.isDeletedAsWritten = arboretum_create_named_node("/clang/FunctionDecl/isDeletedAsWritten");
      methods.push_back(data_model.isDeletedAsWritten);
      data_model.isMain = arboretum_create_named_node("/clang/FunctionDecl/isMain");
      methods.push_back(data_model.isMain);
      data_model.isMSVCRTEntryPoint = arboretum_create_named_node("/clang/FunctionDecl/isMSVCRTEntryPoint");
      methods.push_back(data_model.isMSVCRTEntryPoint);
      data_model.isReservedGlobalPlacementOperator = arboretum_create_named_node("/clang/FunctionDecl/isReservedGlobalPlacementOperator");
      methods.push_back(data_model.isReservedGlobalPlacementOperator);
      data_model.isInlineBuiltinDeclaration = arboretum_create_named_node("/clang/FunctionDecl/isInlineBuiltinDeclaration");
      methods.push_back(data_model.isInlineBuiltinDeclaration);
      data_model.isDestroyingOperatorDelete = arboretum_create_named_node("/clang/FunctionDecl/isDestroyingOperatorDelete");
      methods.push_back(data_model.isDestroyingOperatorDelete);
      data_model.getLanguageLinkage1 = arboretum_create_named_node("/clang/FunctionDecl/getLanguageLinkage");
      methods.push_back(data_model.getLanguageLinkage1);
      data_model.isExternC1 = arboretum_create_named_node("/clang/FunctionDecl/isExternC");
      methods.push_back(data_model.isExternC1);
      data_model.isInExternCContext1 = arboretum_create_named_node("/clang/FunctionDecl/isInExternCContext");
      methods.push_back(data_model.isInExternCContext1);
      data_model.isInExternCXXContext1 = arboretum_create_named_node("/clang/FunctionDecl/isInExternCXXContext");
      methods.push_back(data_model.isInExternCXXContext1);
      data_model.isGlobal = arboretum_create_named_node("/clang/FunctionDecl/isGlobal");
      methods.push_back(data_model.isGlobal);
      data_model.isNoReturn = arboretum_create_named_node("/clang/FunctionDecl/isNoReturn");
      methods.push_back(data_model.isNoReturn);
      data_model.hasSkippedBody = arboretum_create_named_node("/clang/FunctionDecl/hasSkippedBody");
      methods.push_back(data_model.hasSkippedBody);
      data_model.willHaveBody = arboretum_create_named_node("/clang/FunctionDecl/willHaveBody");
      methods.push_back(data_model.willHaveBody);
      data_model.isMultiVersion = arboretum_create_named_node("/clang/FunctionDecl/isMultiVersion");
      methods.push_back(data_model.isMultiVersion);
      data_model.FriendConstraintRefersToEnclosingTemplate = arboretum_create_named_node("/clang/FunctionDecl/FriendConstraintRefersToEnclosingTemplate");
      methods.push_back(data_model.FriendConstraintRefersToEnclosingTemplate);
      data_model.isMemberLikeConstrainedFriend = arboretum_create_named_node("/clang/FunctionDecl/isMemberLikeConstrainedFriend");
      methods.push_back(data_model.isMemberLikeConstrainedFriend);
      data_model.getMultiVersionKind = arboretum_create_named_node("/clang/FunctionDecl/getMultiVersionKind");
      methods.push_back(data_model.getMultiVersionKind);
      data_model.isCPUDispatchMultiVersion = arboretum_create_named_node("/clang/FunctionDecl/isCPUDispatchMultiVersion");
      methods.push_back(data_model.isCPUDispatchMultiVersion);
      data_model.isCPUSpecificMultiVersion = arboretum_create_named_node("/clang/FunctionDecl/isCPUSpecificMultiVersion");
      methods.push_back(data_model.isCPUSpecificMultiVersion);
      data_model.isTargetMultiVersion = arboretum_create_named_node("/clang/FunctionDecl/isTargetMultiVersion");
      methods.push_back(data_model.isTargetMultiVersion);
      data_model.isTargetClonesMultiVersion = arboretum_create_named_node("/clang/FunctionDecl/isTargetClonesMultiVersion");
      methods.push_back(data_model.isTargetClonesMultiVersion);
      data_model.getCanonicalDecl27 = arboretum_create_named_node("/clang/FunctionDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl27);
      data_model.parameters = arboretum_create_named_node("/clang/FunctionDecl/parameters");
      methods.push_back(data_model.parameters);
      data_model.param_empty = arboretum_create_named_node("/clang/FunctionDecl/param_empty");
      methods.push_back(data_model.param_empty);
      data_model.param_begin1 = arboretum_create_named_node("/clang/FunctionDecl/param_begin");
      methods.push_back(data_model.param_begin1);
      data_model.param_end1 = arboretum_create_named_node("/clang/FunctionDecl/param_end");
      methods.push_back(data_model.param_end1);
      data_model.param_size = arboretum_create_named_node("/clang/FunctionDecl/param_size");
      methods.push_back(data_model.param_size);
      data_model.getNumParams = arboretum_create_named_node("/clang/FunctionDecl/getNumParams");
      methods.push_back(data_model.getNumParams);
      data_model.getMinRequiredArguments = arboretum_create_named_node("/clang/FunctionDecl/getMinRequiredArguments");
      methods.push_back(data_model.getMinRequiredArguments);
      data_model.getMinRequiredExplicitArguments = arboretum_create_named_node("/clang/FunctionDecl/getMinRequiredExplicitArguments");
      methods.push_back(data_model.getMinRequiredExplicitArguments);
      data_model.hasCXXExplicitFunctionObjectParameter = arboretum_create_named_node("/clang/FunctionDecl/hasCXXExplicitFunctionObjectParameter");
      methods.push_back(data_model.hasCXXExplicitFunctionObjectParameter);
      data_model.getNumNonObjectParams = arboretum_create_named_node("/clang/FunctionDecl/getNumNonObjectParams");
      methods.push_back(data_model.getNumNonObjectParams);
      data_model.hasOneParamOrDefaultArgs = arboretum_create_named_node("/clang/FunctionDecl/hasOneParamOrDefaultArgs");
      methods.push_back(data_model.hasOneParamOrDefaultArgs);
      data_model.getFunctionTypeLoc = arboretum_create_named_node("/clang/FunctionDecl/getFunctionTypeLoc");
      methods.push_back(data_model.getFunctionTypeLoc);
      data_model.getReturnType = arboretum_create_named_node("/clang/FunctionDecl/getReturnType");
      methods.push_back(data_model.getReturnType);
      data_model.getReturnTypeSourceRange = arboretum_create_named_node("/clang/FunctionDecl/getReturnTypeSourceRange");
      methods.push_back(data_model.getReturnTypeSourceRange);
      data_model.getParametersSourceRange = arboretum_create_named_node("/clang/FunctionDecl/getParametersSourceRange");
      methods.push_back(data_model.getParametersSourceRange);
      data_model.getDeclaredReturnType = arboretum_create_named_node("/clang/FunctionDecl/getDeclaredReturnType");
      methods.push_back(data_model.getDeclaredReturnType);
      data_model.getExceptionSpecType = arboretum_create_named_node("/clang/FunctionDecl/getExceptionSpecType");
      methods.push_back(data_model.getExceptionSpecType);
      data_model.getExceptionSpecSourceRange = arboretum_create_named_node("/clang/FunctionDecl/getExceptionSpecSourceRange");
      methods.push_back(data_model.getExceptionSpecSourceRange);
      data_model.getCallResultType = arboretum_create_named_node("/clang/FunctionDecl/getCallResultType");
      methods.push_back(data_model.getCallResultType);
      data_model.getStorageClass1 = arboretum_create_named_node("/clang/FunctionDecl/getStorageClass");
      methods.push_back(data_model.getStorageClass1);
      data_model.isInlineSpecified1 = arboretum_create_named_node("/clang/FunctionDecl/isInlineSpecified");
      methods.push_back(data_model.isInlineSpecified1);
      data_model.UsesFPIntrin = arboretum_create_named_node("/clang/FunctionDecl/UsesFPIntrin");
      methods.push_back(data_model.UsesFPIntrin);
      data_model.isInlined = arboretum_create_named_node("/clang/FunctionDecl/isInlined");
      methods.push_back(data_model.isInlined);
      data_model.isInlineDefinitionExternallyVisible = arboretum_create_named_node("/clang/FunctionDecl/isInlineDefinitionExternallyVisible");
      methods.push_back(data_model.isInlineDefinitionExternallyVisible);
      data_model.isMSExternInline = arboretum_create_named_node("/clang/FunctionDecl/isMSExternInline");
      methods.push_back(data_model.isMSExternInline);
      data_model.doesDeclarationForceExternallyVisibleDefinition = arboretum_create_named_node("/clang/FunctionDecl/doesDeclarationForceExternallyVisibleDefinition");
      methods.push_back(data_model.doesDeclarationForceExternallyVisibleDefinition);
      data_model.isStatic1 = arboretum_create_named_node("/clang/FunctionDecl/isStatic");
      methods.push_back(data_model.isStatic1);
      data_model.isOverloadedOperator = arboretum_create_named_node("/clang/FunctionDecl/isOverloadedOperator");
      methods.push_back(data_model.isOverloadedOperator);
      data_model.getOverloadedOperator2 = arboretum_create_named_node("/clang/FunctionDecl/getOverloadedOperator");
      methods.push_back(data_model.getOverloadedOperator2);
      data_model.getLiteralIdentifier = arboretum_create_named_node("/clang/FunctionDecl/getLiteralIdentifier");
      methods.push_back(data_model.getLiteralIdentifier);
      data_model.getInstantiatedFromMemberFunction = arboretum_create_named_node("/clang/FunctionDecl/getInstantiatedFromMemberFunction");
      methods.push_back(data_model.getInstantiatedFromMemberFunction);
      data_model.getTemplatedKind = arboretum_create_named_node("/clang/FunctionDecl/getTemplatedKind");
      methods.push_back(data_model.getTemplatedKind);
      data_model.getMemberSpecializationInfo2 = arboretum_create_named_node("/clang/FunctionDecl/getMemberSpecializationInfo");
      methods.push_back(data_model.getMemberSpecializationInfo2);
      data_model.getInstantiatedFromDecl = arboretum_create_named_node("/clang/FunctionDecl/getInstantiatedFromDecl");
      methods.push_back(data_model.getInstantiatedFromDecl);
      data_model.getDescribedFunctionTemplate = arboretum_create_named_node("/clang/FunctionDecl/getDescribedFunctionTemplate");
      methods.push_back(data_model.getDescribedFunctionTemplate);
      data_model.isFunctionTemplateSpecialization = arboretum_create_named_node("/clang/FunctionDecl/isFunctionTemplateSpecialization");
      methods.push_back(data_model.isFunctionTemplateSpecialization);
      data_model.getTemplateSpecializationInfo = arboretum_create_named_node("/clang/FunctionDecl/getTemplateSpecializationInfo");
      methods.push_back(data_model.getTemplateSpecializationInfo);
      data_model.isImplicitlyInstantiable = arboretum_create_named_node("/clang/FunctionDecl/isImplicitlyInstantiable");
      methods.push_back(data_model.isImplicitlyInstantiable);
      data_model.isTemplateInstantiation = arboretum_create_named_node("/clang/FunctionDecl/isTemplateInstantiation");
      methods.push_back(data_model.isTemplateInstantiation);
      data_model.getPrimaryTemplate = arboretum_create_named_node("/clang/FunctionDecl/getPrimaryTemplate");
      methods.push_back(data_model.getPrimaryTemplate);
      data_model.getTemplateSpecializationArgs = arboretum_create_named_node("/clang/FunctionDecl/getTemplateSpecializationArgs");
      methods.push_back(data_model.getTemplateSpecializationArgs);
      data_model.getTemplateSpecializationArgsAsWritten = arboretum_create_named_node("/clang/FunctionDecl/getTemplateSpecializationArgsAsWritten");
      methods.push_back(data_model.getTemplateSpecializationArgsAsWritten);
      data_model.getDependentSpecializationInfo = arboretum_create_named_node("/clang/FunctionDecl/getDependentSpecializationInfo");
      methods.push_back(data_model.getDependentSpecializationInfo);
      data_model.getTemplateSpecializationKind2 = arboretum_create_named_node("/clang/FunctionDecl/getTemplateSpecializationKind");
      methods.push_back(data_model.getTemplateSpecializationKind2);
      data_model.getTemplateSpecializationKindForInstantiation1 = arboretum_create_named_node("/clang/FunctionDecl/getTemplateSpecializationKindForInstantiation");
      methods.push_back(data_model.getTemplateSpecializationKindForInstantiation1);
      data_model.getPointOfInstantiation2 = arboretum_create_named_node("/clang/FunctionDecl/getPointOfInstantiation");
      methods.push_back(data_model.getPointOfInstantiation2);
      data_model.isOutOfLine2 = arboretum_create_named_node("/clang/FunctionDecl/isOutOfLine");
      methods.push_back(data_model.isOutOfLine2);
      data_model.getMemoryFunctionKind = arboretum_create_named_node("/clang/FunctionDecl/getMemoryFunctionKind");
      methods.push_back(data_model.getMemoryFunctionKind);
      data_model.getODRHash4 = arboretum_create_named_node("/clang/FunctionDecl/getODRHash");
      methods.push_back(data_model.getODRHash4);
    arboretum_create_edge(data_model.FunctionDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeAliasTemplateDecl = arboretum_create_named_node("/clang/TypeAliasTemplateDecl");
  arboretum_create_edge(data_model.TypeAliasTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplatedDecl4 = arboretum_create_named_node("/clang/TypeAliasTemplateDecl/getTemplatedDecl");
      methods.push_back(data_model.getTemplatedDecl4);
      data_model.getCanonicalDecl29 = arboretum_create_named_node("/clang/TypeAliasTemplateDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl29);
      data_model.getPreviousDecl11 = arboretum_create_named_node("/clang/TypeAliasTemplateDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl11);
      data_model.getInstantiatedFromMemberTemplate3 = arboretum_create_named_node("/clang/TypeAliasTemplateDecl/getInstantiatedFromMemberTemplate");
      methods.push_back(data_model.getInstantiatedFromMemberTemplate3);
    arboretum_create_edge(data_model.TypeAliasTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NamedDecl = arboretum_create_named_node("/clang/NamedDecl");
  arboretum_create_edge(data_model.NamedDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getIdentifier1 = arboretum_create_named_node("/clang/NamedDecl/getIdentifier");
      methods.push_back(data_model.getIdentifier1);
      data_model.getName4 = arboretum_create_named_node("/clang/NamedDecl/getName");
      methods.push_back(data_model.getName4);
      data_model.getNameAsString1 = arboretum_create_named_node("/clang/NamedDecl/getNameAsString");
      methods.push_back(data_model.getNameAsString1);
      data_model.getDeclName = arboretum_create_named_node("/clang/NamedDecl/getDeclName");
      methods.push_back(data_model.getDeclName);
      data_model.getQualifiedNameAsString = arboretum_create_named_node("/clang/NamedDecl/getQualifiedNameAsString");
      methods.push_back(data_model.getQualifiedNameAsString);
      data_model.hasLinkage = arboretum_create_named_node("/clang/NamedDecl/hasLinkage");
      methods.push_back(data_model.hasLinkage);
      data_model.isCXXClassMember = arboretum_create_named_node("/clang/NamedDecl/isCXXClassMember");
      methods.push_back(data_model.isCXXClassMember);
      data_model.isCXXInstanceMember = arboretum_create_named_node("/clang/NamedDecl/isCXXInstanceMember");
      methods.push_back(data_model.isCXXInstanceMember);
      data_model.getLinkageInternal = arboretum_create_named_node("/clang/NamedDecl/getLinkageInternal");
      methods.push_back(data_model.getLinkageInternal);
      data_model.getFormalLinkage = arboretum_create_named_node("/clang/NamedDecl/getFormalLinkage");
      methods.push_back(data_model.getFormalLinkage);
      data_model.hasExternalFormalLinkage = arboretum_create_named_node("/clang/NamedDecl/hasExternalFormalLinkage");
      methods.push_back(data_model.hasExternalFormalLinkage);
      data_model.isExternallyVisible = arboretum_create_named_node("/clang/NamedDecl/isExternallyVisible");
      methods.push_back(data_model.isExternallyVisible);
      data_model.isExternallyDeclarable = arboretum_create_named_node("/clang/NamedDecl/isExternallyDeclarable");
      methods.push_back(data_model.isExternallyDeclarable);
      data_model.getVisibility = arboretum_create_named_node("/clang/NamedDecl/getVisibility");
      methods.push_back(data_model.getVisibility);
      data_model.getLinkageAndVisibility = arboretum_create_named_node("/clang/NamedDecl/getLinkageAndVisibility");
      methods.push_back(data_model.getLinkageAndVisibility);
      data_model.isLinkageValid = arboretum_create_named_node("/clang/NamedDecl/isLinkageValid");
      methods.push_back(data_model.isLinkageValid);
      data_model.hasLinkageBeenComputed = arboretum_create_named_node("/clang/NamedDecl/hasLinkageBeenComputed");
      methods.push_back(data_model.hasLinkageBeenComputed);
      data_model.getUnderlyingDecl1 = arboretum_create_named_node("/clang/NamedDecl/getUnderlyingDecl");
      methods.push_back(data_model.getUnderlyingDecl1);
      data_model.getMostRecentDecl14 = arboretum_create_named_node("/clang/NamedDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl14);
      data_model.getObjCFStringFormattingFamily = arboretum_create_named_node("/clang/NamedDecl/getObjCFStringFormattingFamily");
      methods.push_back(data_model.getObjCFStringFormattingFamily);
    arboretum_create_edge(data_model.NamedDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RecordDecl = arboretum_create_named_node("/clang/RecordDecl");
  arboretum_create_edge(data_model.RecordDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPreviousDecl13 = arboretum_create_named_node("/clang/RecordDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl13);
      data_model.getMostRecentDecl16 = arboretum_create_named_node("/clang/RecordDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl16);
      data_model.hasFlexibleArrayMember = arboretum_create_named_node("/clang/RecordDecl/hasFlexibleArrayMember");
      methods.push_back(data_model.hasFlexibleArrayMember);
      data_model.isAnonymousStructOrUnion = arboretum_create_named_node("/clang/RecordDecl/isAnonymousStructOrUnion");
      methods.push_back(data_model.isAnonymousStructOrUnion);
      data_model.hasObjectMember = arboretum_create_named_node("/clang/RecordDecl/hasObjectMember");
      methods.push_back(data_model.hasObjectMember);
      data_model.hasVolatileMember = arboretum_create_named_node("/clang/RecordDecl/hasVolatileMember");
      methods.push_back(data_model.hasVolatileMember);
      data_model.hasLoadedFieldsFromExternalStorage = arboretum_create_named_node("/clang/RecordDecl/hasLoadedFieldsFromExternalStorage");
      methods.push_back(data_model.hasLoadedFieldsFromExternalStorage);
      data_model.isNonTrivialToPrimitiveDefaultInitialize = arboretum_create_named_node("/clang/RecordDecl/isNonTrivialToPrimitiveDefaultInitialize");
      methods.push_back(data_model.isNonTrivialToPrimitiveDefaultInitialize);
      data_model.isNonTrivialToPrimitiveCopy = arboretum_create_named_node("/clang/RecordDecl/isNonTrivialToPrimitiveCopy");
      methods.push_back(data_model.isNonTrivialToPrimitiveCopy);
      data_model.isNonTrivialToPrimitiveDestroy = arboretum_create_named_node("/clang/RecordDecl/isNonTrivialToPrimitiveDestroy");
      methods.push_back(data_model.isNonTrivialToPrimitiveDestroy);
      data_model.hasNonTrivialToPrimitiveDefaultInitializeCUnion = arboretum_create_named_node("/clang/RecordDecl/hasNonTrivialToPrimitiveDefaultInitializeCUnion");
      methods.push_back(data_model.hasNonTrivialToPrimitiveDefaultInitializeCUnion);
      data_model.hasNonTrivialToPrimitiveDestructCUnion = arboretum_create_named_node("/clang/RecordDecl/hasNonTrivialToPrimitiveDestructCUnion");
      methods.push_back(data_model.hasNonTrivialToPrimitiveDestructCUnion);
      data_model.hasNonTrivialToPrimitiveCopyCUnion = arboretum_create_named_node("/clang/RecordDecl/hasNonTrivialToPrimitiveCopyCUnion");
      methods.push_back(data_model.hasNonTrivialToPrimitiveCopyCUnion);
      data_model.canPassInRegisters = arboretum_create_named_node("/clang/RecordDecl/canPassInRegisters");
      methods.push_back(data_model.canPassInRegisters);
      data_model.getArgPassingRestrictions = arboretum_create_named_node("/clang/RecordDecl/getArgPassingRestrictions");
      methods.push_back(data_model.getArgPassingRestrictions);
      data_model.isParamDestroyedInCallee = arboretum_create_named_node("/clang/RecordDecl/isParamDestroyedInCallee");
      methods.push_back(data_model.isParamDestroyedInCallee);
      data_model.isRandomized = arboretum_create_named_node("/clang/RecordDecl/isRandomized");
      methods.push_back(data_model.isRandomized);
      data_model.isInjectedClassName = arboretum_create_named_node("/clang/RecordDecl/isInjectedClassName");
      methods.push_back(data_model.isInjectedClassName);
      data_model.isLambda1 = arboretum_create_named_node("/clang/RecordDecl/isLambda");
      methods.push_back(data_model.isLambda1);
      data_model.isCapturedRecord = arboretum_create_named_node("/clang/RecordDecl/isCapturedRecord");
      methods.push_back(data_model.isCapturedRecord);
      data_model.getDefinition13 = arboretum_create_named_node("/clang/RecordDecl/getDefinition");
      methods.push_back(data_model.getDefinition13);
      data_model.isOrContainsUnion = arboretum_create_named_node("/clang/RecordDecl/isOrContainsUnion");
      methods.push_back(data_model.isOrContainsUnion);
      data_model.fields = arboretum_create_named_node("/clang/RecordDecl/fields");
      methods.push_back(data_model.fields);
      data_model.field_begin = arboretum_create_named_node("/clang/RecordDecl/field_begin");
      methods.push_back(data_model.field_begin);
      data_model.field_end = arboretum_create_named_node("/clang/RecordDecl/field_end");
      methods.push_back(data_model.field_end);
      data_model.field_empty = arboretum_create_named_node("/clang/RecordDecl/field_empty");
      methods.push_back(data_model.field_empty);
      data_model.findFirstNamedDataMember = arboretum_create_named_node("/clang/RecordDecl/findFirstNamedDataMember");
      methods.push_back(data_model.findFirstNamedDataMember);
    arboretum_create_edge(data_model.RecordDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCImplDecl = arboretum_create_named_node("/clang/ObjCImplDecl");
  arboretum_create_edge(data_model.ObjCImplDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCImplDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaCommentDecl = arboretum_create_named_node("/clang/PragmaCommentDecl");
  arboretum_create_edge(data_model.PragmaCommentDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCommentKind = arboretum_create_named_node("/clang/PragmaCommentDecl/getCommentKind");
      methods.push_back(data_model.getCommentKind);
      data_model.getArg6 = arboretum_create_named_node("/clang/PragmaCommentDecl/getArg");
      methods.push_back(data_model.getArg6);
    arboretum_create_edge(data_model.PragmaCommentDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnumDecl = arboretum_create_named_node("/clang/EnumDecl");
  arboretum_create_edge(data_model.EnumDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCanonicalDecl31 = arboretum_create_named_node("/clang/EnumDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl31);
      data_model.getPreviousDecl15 = arboretum_create_named_node("/clang/EnumDecl/getPreviousDecl");
      methods.push_back(data_model.getPreviousDecl15);
      data_model.getMostRecentDecl18 = arboretum_create_named_node("/clang/EnumDecl/getMostRecentDecl");
      methods.push_back(data_model.getMostRecentDecl18);
      data_model.getDefinition14 = arboretum_create_named_node("/clang/EnumDecl/getDefinition");
      methods.push_back(data_model.getDefinition14);
      data_model.getSourceRange27 = arboretum_create_named_node("/clang/EnumDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange27);
      data_model.enumerators = arboretum_create_named_node("/clang/EnumDecl/enumerators");
      methods.push_back(data_model.enumerators);
      data_model.enumerator_begin = arboretum_create_named_node("/clang/EnumDecl/enumerator_begin");
      methods.push_back(data_model.enumerator_begin);
      data_model.enumerator_end = arboretum_create_named_node("/clang/EnumDecl/enumerator_end");
      methods.push_back(data_model.enumerator_end);
      data_model.getPromotionType = arboretum_create_named_node("/clang/EnumDecl/getPromotionType");
      methods.push_back(data_model.getPromotionType);
      data_model.getIntegerType = arboretum_create_named_node("/clang/EnumDecl/getIntegerType");
      methods.push_back(data_model.getIntegerType);
      data_model.getIntegerTypeSourceInfo = arboretum_create_named_node("/clang/EnumDecl/getIntegerTypeSourceInfo");
      methods.push_back(data_model.getIntegerTypeSourceInfo);
      data_model.getIntegerTypeRange = arboretum_create_named_node("/clang/EnumDecl/getIntegerTypeRange");
      methods.push_back(data_model.getIntegerTypeRange);
      data_model.getNumPositiveBits = arboretum_create_named_node("/clang/EnumDecl/getNumPositiveBits");
      methods.push_back(data_model.getNumPositiveBits);
      data_model.getNumNegativeBits = arboretum_create_named_node("/clang/EnumDecl/getNumNegativeBits");
      methods.push_back(data_model.getNumNegativeBits);
      data_model.isScoped = arboretum_create_named_node("/clang/EnumDecl/isScoped");
      methods.push_back(data_model.isScoped);
      data_model.isScopedUsingClassTag = arboretum_create_named_node("/clang/EnumDecl/isScopedUsingClassTag");
      methods.push_back(data_model.isScopedUsingClassTag);
      data_model.isFixed = arboretum_create_named_node("/clang/EnumDecl/isFixed");
      methods.push_back(data_model.isFixed);
      data_model.isComplete = arboretum_create_named_node("/clang/EnumDecl/isComplete");
      methods.push_back(data_model.isComplete);
      data_model.isClosed = arboretum_create_named_node("/clang/EnumDecl/isClosed");
      methods.push_back(data_model.isClosed);
      data_model.isClosedFlag = arboretum_create_named_node("/clang/EnumDecl/isClosedFlag");
      methods.push_back(data_model.isClosedFlag);
      data_model.isClosedNonFlag = arboretum_create_named_node("/clang/EnumDecl/isClosedNonFlag");
      methods.push_back(data_model.isClosedNonFlag);
      data_model.getTemplateInstantiationPattern4 = arboretum_create_named_node("/clang/EnumDecl/getTemplateInstantiationPattern");
      methods.push_back(data_model.getTemplateInstantiationPattern4);
      data_model.getInstantiatedFromMemberEnum = arboretum_create_named_node("/clang/EnumDecl/getInstantiatedFromMemberEnum");
      methods.push_back(data_model.getInstantiatedFromMemberEnum);
      data_model.getTemplateSpecializationKind3 = arboretum_create_named_node("/clang/EnumDecl/getTemplateSpecializationKind");
      methods.push_back(data_model.getTemplateSpecializationKind3);
      data_model.getMemberSpecializationInfo3 = arboretum_create_named_node("/clang/EnumDecl/getMemberSpecializationInfo");
      methods.push_back(data_model.getMemberSpecializationInfo3);
    arboretum_create_edge(data_model.EnumDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTeamsDistributeSimdDirective = arboretum_create_named_node("/clang/OMPTeamsDistributeSimdDirective");
  arboretum_create_edge(data_model.OMPTeamsDistributeSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTeamsDistributeSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypedefNameDecl = arboretum_create_named_node("/clang/TypedefNameDecl");
  arboretum_create_edge(data_model.TypedefNameDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isModed = arboretum_create_named_node("/clang/TypedefNameDecl/isModed");
      methods.push_back(data_model.isModed);
      data_model.getTypeSourceInfo7 = arboretum_create_named_node("/clang/TypedefNameDecl/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo7);
      data_model.getUnderlyingType = arboretum_create_named_node("/clang/TypedefNameDecl/getUnderlyingType");
      methods.push_back(data_model.getUnderlyingType);
      data_model.getCanonicalDecl33 = arboretum_create_named_node("/clang/TypedefNameDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl33);
      data_model.isTransparentTag = arboretum_create_named_node("/clang/TypedefNameDecl/isTransparentTag");
      methods.push_back(data_model.isTransparentTag);
    arboretum_create_edge(data_model.TypedefNameDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DecompositionDecl = arboretum_create_named_node("/clang/DecompositionDecl");
  arboretum_create_edge(data_model.DecompositionDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.bindings = arboretum_create_named_node("/clang/DecompositionDecl/bindings");
      methods.push_back(data_model.bindings);
    arboretum_create_edge(data_model.DecompositionDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAtDefsFieldDecl = arboretum_create_named_node("/clang/ObjCAtDefsFieldDecl");
  arboretum_create_edge(data_model.ObjCAtDefsFieldDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAtDefsFieldDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDeclareReductionDecl = arboretum_create_named_node("/clang/OMPDeclareReductionDecl");
  arboretum_create_edge(data_model.OMPDeclareReductionDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDeclareReductionDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSGuidDecl = arboretum_create_named_node("/clang/MSGuidDecl");
  arboretum_create_edge(data_model.MSGuidDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getParts = arboretum_create_named_node("/clang/MSGuidDecl/getParts");
      methods.push_back(data_model.getParts);
      data_model.getAsAPValue = arboretum_create_named_node("/clang/MSGuidDecl/getAsAPValue");
      methods.push_back(data_model.getAsAPValue);
    arboretum_create_edge(data_model.MSGuidDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedUsingValueDecl = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl");
  arboretum_create_edge(data_model.UnresolvedUsingValueDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUsingLoc2 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getUsingLoc");
      methods.push_back(data_model.getUsingLoc2);
      data_model.isAccessDeclaration = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/isAccessDeclaration");
      methods.push_back(data_model.isAccessDeclaration);
      data_model.getQualifierLoc7 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc7);
      data_model.getQualifier7 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getQualifier");
      methods.push_back(data_model.getQualifier7);
      data_model.getNameInfo3 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getNameInfo");
      methods.push_back(data_model.getNameInfo3);
      data_model.isPackExpansion2 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/isPackExpansion");
      methods.push_back(data_model.isPackExpansion2);
      data_model.getEllipsisLoc4 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc4);
      data_model.getSourceRange28 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange28);
      data_model.getCanonicalDecl35 = arboretum_create_named_node("/clang/UnresolvedUsingValueDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl35);
    arboretum_create_edge(data_model.UnresolvedUsingValueDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NonTypeTemplateParmDecl = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl");
  arboretum_create_edge(data_model.NonTypeTemplateParmDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange29 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange29);
      data_model.getDefaultArgStorage2 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/getDefaultArgStorage");
      methods.push_back(data_model.getDefaultArgStorage2);
      data_model.hasDefaultArgument2 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/hasDefaultArgument");
      methods.push_back(data_model.hasDefaultArgument2);
      data_model.getDefaultArgument2 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/getDefaultArgument");
      methods.push_back(data_model.getDefaultArgument2);
      data_model.getDefaultArgumentLoc2 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/getDefaultArgumentLoc");
      methods.push_back(data_model.getDefaultArgumentLoc2);
      data_model.defaultArgumentWasInherited2 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/defaultArgumentWasInherited");
      methods.push_back(data_model.defaultArgumentWasInherited2);
      data_model.isParameterPack4 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/isParameterPack");
      methods.push_back(data_model.isParameterPack4);
      data_model.isPackExpansion3 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/isPackExpansion");
      methods.push_back(data_model.isPackExpansion3);
      data_model.isExpandedParameterPack2 = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/isExpandedParameterPack");
      methods.push_back(data_model.isExpandedParameterPack2);
      data_model.getNumExpansionTypes = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/getNumExpansionTypes");
      methods.push_back(data_model.getNumExpansionTypes);
      data_model.getPlaceholderTypeConstraint = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/getPlaceholderTypeConstraint");
      methods.push_back(data_model.getPlaceholderTypeConstraint);
      data_model.hasPlaceholderTypeConstraint = arboretum_create_named_node("/clang/NonTypeTemplateParmDecl/hasPlaceholderTypeConstraint");
      methods.push_back(data_model.hasPlaceholderTypeConstraint);
    arboretum_create_edge(data_model.NonTypeTemplateParmDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FieldDecl = arboretum_create_named_node("/clang/FieldDecl");
  arboretum_create_edge(data_model.FieldDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getFieldIndex = arboretum_create_named_node("/clang/FieldDecl/getFieldIndex");
      methods.push_back(data_model.getFieldIndex);
      data_model.isMutable1 = arboretum_create_named_node("/clang/FieldDecl/isMutable");
      methods.push_back(data_model.isMutable1);
      data_model.isBitField = arboretum_create_named_node("/clang/FieldDecl/isBitField");
      methods.push_back(data_model.isBitField);
      data_model.isUnnamedBitfield = arboretum_create_named_node("/clang/FieldDecl/isUnnamedBitfield");
      methods.push_back(data_model.isUnnamedBitfield);
      data_model.isAnonymousStructOrUnion1 = arboretum_create_named_node("/clang/FieldDecl/isAnonymousStructOrUnion");
      methods.push_back(data_model.isAnonymousStructOrUnion1);
      data_model.getBitWidth = arboretum_create_named_node("/clang/FieldDecl/getBitWidth");
      methods.push_back(data_model.getBitWidth);
      data_model.isPotentiallyOverlapping = arboretum_create_named_node("/clang/FieldDecl/isPotentiallyOverlapping");
      methods.push_back(data_model.isPotentiallyOverlapping);
      data_model.getInClassInitStyle = arboretum_create_named_node("/clang/FieldDecl/getInClassInitStyle");
      methods.push_back(data_model.getInClassInitStyle);
      data_model.hasInClassInitializer1 = arboretum_create_named_node("/clang/FieldDecl/hasInClassInitializer");
      methods.push_back(data_model.hasInClassInitializer1);
      data_model.hasNonNullInClassInitializer = arboretum_create_named_node("/clang/FieldDecl/hasNonNullInClassInitializer");
      methods.push_back(data_model.hasNonNullInClassInitializer);
      data_model.getInClassInitializer = arboretum_create_named_node("/clang/FieldDecl/getInClassInitializer");
      methods.push_back(data_model.getInClassInitializer);
      data_model.hasCapturedVLAType = arboretum_create_named_node("/clang/FieldDecl/hasCapturedVLAType");
      methods.push_back(data_model.hasCapturedVLAType);
      data_model.getCapturedVLAType = arboretum_create_named_node("/clang/FieldDecl/getCapturedVLAType");
      methods.push_back(data_model.getCapturedVLAType);
      data_model.getParent2 = arboretum_create_named_node("/clang/FieldDecl/getParent");
      methods.push_back(data_model.getParent2);
      data_model.getSourceRange30 = arboretum_create_named_node("/clang/FieldDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange30);
      data_model.getCanonicalDecl37 = arboretum_create_named_node("/clang/FieldDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl37);
    arboretum_create_edge(data_model.FieldDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXConversionDecl = arboretum_create_named_node("/clang/CXXConversionDecl");
  arboretum_create_edge(data_model.CXXConversionDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExplicitSpecifier1 = arboretum_create_named_node("/clang/CXXConversionDecl/getExplicitSpecifier");
      methods.push_back(data_model.getExplicitSpecifier1);
      data_model.isExplicit1 = arboretum_create_named_node("/clang/CXXConversionDecl/isExplicit");
      methods.push_back(data_model.isExplicit1);
      data_model.getConversionType = arboretum_create_named_node("/clang/CXXConversionDecl/getConversionType");
      methods.push_back(data_model.getConversionType);
      data_model.isLambdaToBlockPointerConversion = arboretum_create_named_node("/clang/CXXConversionDecl/isLambdaToBlockPointerConversion");
      methods.push_back(data_model.isLambdaToBlockPointerConversion);
      data_model.getCanonicalDecl39 = arboretum_create_named_node("/clang/CXXConversionDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl39);
    arboretum_create_edge(data_model.CXXConversionDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDestructorDecl = arboretum_create_named_node("/clang/CXXDestructorDecl");
  arboretum_create_edge(data_model.CXXDestructorDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOperatorDelete2 = arboretum_create_named_node("/clang/CXXDestructorDecl/getOperatorDelete");
      methods.push_back(data_model.getOperatorDelete2);
      data_model.getOperatorDeleteThisArg = arboretum_create_named_node("/clang/CXXDestructorDecl/getOperatorDeleteThisArg");
      methods.push_back(data_model.getOperatorDeleteThisArg);
      data_model.getCanonicalDecl41 = arboretum_create_named_node("/clang/CXXDestructorDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl41);
    arboretum_create_edge(data_model.CXXDestructorDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPScanDirective = arboretum_create_named_node("/clang/OMPScanDirective");
  arboretum_create_edge(data_model.OMPScanDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPScanDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ARMInterruptAttr = arboretum_create_named_node("/clang/ARMInterruptAttr");
  arboretum_create_edge(data_model.ARMInterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ARMInterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LoaderUninitializedAttr = arboretum_create_named_node("/clang/LoaderUninitializedAttr");
  arboretum_create_edge(data_model.LoaderUninitializedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LoaderUninitializedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaClangRelroSectionAttr = arboretum_create_named_node("/clang/PragmaClangRelroSectionAttr");
  arboretum_create_edge(data_model.PragmaClangRelroSectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PragmaClangRelroSectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCPreciseLifetimeAttr = arboretum_create_named_node("/clang/ObjCPreciseLifetimeAttr");
  arboretum_create_edge(data_model.ObjCPreciseLifetimeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCPreciseLifetimeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AlwaysInlineAttr = arboretum_create_named_node("/clang/AlwaysInlineAttr");
  arboretum_create_edge(data_model.AlwaysInlineAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AlwaysInlineAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXStaticCastExpr = arboretum_create_named_node("/clang/CXXStaticCastExpr");
  arboretum_create_edge(data_model.CXXStaticCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CXXStaticCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AnyX86NoCfCheckAttr = arboretum_create_named_node("/clang/AnyX86NoCfCheckAttr");
  arboretum_create_edge(data_model.AnyX86NoCfCheckAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AnyX86NoCfCheckAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PreferredNameAttr = arboretum_create_named_node("/clang/PreferredNameAttr");
  arboretum_create_edge(data_model.PreferredNameAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PreferredNameAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PointerType = arboretum_create_named_node("/clang/PointerType");
  arboretum_create_edge(data_model.PointerType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPointeeType = arboretum_create_named_node("/clang/PointerType/getPointeeType");
      methods.push_back(data_model.getPointeeType);
      data_model.isSugared = arboretum_create_named_node("/clang/PointerType/isSugared");
      methods.push_back(data_model.isSugared);
      data_model.desugar = arboretum_create_named_node("/clang/PointerType/desugar");
      methods.push_back(data_model.desugar);
    arboretum_create_edge(data_model.PointerType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OSConsumesThisAttr = arboretum_create_named_node("/clang/OSConsumesThisAttr");
  arboretum_create_edge(data_model.OSConsumesThisAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OSConsumesThisAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoInstrumentFunctionAttr = arboretum_create_named_node("/clang/NoInstrumentFunctionAttr");
  arboretum_create_edge(data_model.NoInstrumentFunctionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoInstrumentFunctionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeclOrStmtAttr = arboretum_create_named_node("/clang/DeclOrStmtAttr");
  arboretum_create_edge(data_model.DeclOrStmtAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DeclOrStmtAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnavailableAttr = arboretum_create_named_node("/clang/UnavailableAttr");
  arboretum_create_edge(data_model.UnavailableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UnavailableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BuiltinAliasAttr = arboretum_create_named_node("/clang/BuiltinAliasAttr");
  arboretum_create_edge(data_model.BuiltinAliasAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BuiltinAliasAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConsumableAttr = arboretum_create_named_node("/clang/ConsumableAttr");
  arboretum_create_edge(data_model.ConsumableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConsumableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeAliasDecl = arboretum_create_named_node("/clang/TypeAliasDecl");
  arboretum_create_edge(data_model.TypeAliasDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange31 = arboretum_create_named_node("/clang/TypeAliasDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange31);
      data_model.getDescribedAliasTemplate = arboretum_create_named_node("/clang/TypeAliasDecl/getDescribedAliasTemplate");
      methods.push_back(data_model.getDescribedAliasTemplate);
    arboretum_create_edge(data_model.TypeAliasDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DLLImportStaticLocalAttr = arboretum_create_named_node("/clang/DLLImportStaticLocalAttr");
  arboretum_create_edge(data_model.DLLImportStaticLocalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DLLImportStaticLocalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OverrideAttr = arboretum_create_named_node("/clang/OverrideAttr");
  arboretum_create_edge(data_model.OverrideAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OverrideAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BlockDecl = arboretum_create_named_node("/clang/BlockDecl");
  arboretum_create_edge(data_model.BlockDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCaretLocation1 = arboretum_create_named_node("/clang/BlockDecl/getCaretLocation");
      methods.push_back(data_model.getCaretLocation1);
      data_model.isVariadic1 = arboretum_create_named_node("/clang/BlockDecl/isVariadic");
      methods.push_back(data_model.isVariadic1);
      data_model.getCompoundBody = arboretum_create_named_node("/clang/BlockDecl/getCompoundBody");
      methods.push_back(data_model.getCompoundBody);
      data_model.getBody16 = arboretum_create_named_node("/clang/BlockDecl/getBody");
      methods.push_back(data_model.getBody16);
      data_model.getSignatureAsWritten = arboretum_create_named_node("/clang/BlockDecl/getSignatureAsWritten");
      methods.push_back(data_model.getSignatureAsWritten);
      data_model.parameters2 = arboretum_create_named_node("/clang/BlockDecl/parameters");
      methods.push_back(data_model.parameters2);
      data_model.param_empty1 = arboretum_create_named_node("/clang/BlockDecl/param_empty");
      methods.push_back(data_model.param_empty1);
      data_model.param_begin3 = arboretum_create_named_node("/clang/BlockDecl/param_begin");
      methods.push_back(data_model.param_begin3);
      data_model.param_end3 = arboretum_create_named_node("/clang/BlockDecl/param_end");
      methods.push_back(data_model.param_end3);
      data_model.param_size1 = arboretum_create_named_node("/clang/BlockDecl/param_size");
      methods.push_back(data_model.param_size1);
      data_model.getNumParams1 = arboretum_create_named_node("/clang/BlockDecl/getNumParams");
      methods.push_back(data_model.getNumParams1);
      data_model.hasCaptures = arboretum_create_named_node("/clang/BlockDecl/hasCaptures");
      methods.push_back(data_model.hasCaptures);
      data_model.getNumCaptures = arboretum_create_named_node("/clang/BlockDecl/getNumCaptures");
      methods.push_back(data_model.getNumCaptures);
      data_model.captures4 = arboretum_create_named_node("/clang/BlockDecl/captures");
      methods.push_back(data_model.captures4);
      data_model.capture_begin3 = arboretum_create_named_node("/clang/BlockDecl/capture_begin");
      methods.push_back(data_model.capture_begin3);
      data_model.capture_end2 = arboretum_create_named_node("/clang/BlockDecl/capture_end");
      methods.push_back(data_model.capture_end2);
      data_model.capturesCXXThis = arboretum_create_named_node("/clang/BlockDecl/capturesCXXThis");
      methods.push_back(data_model.capturesCXXThis);
      data_model.blockMissingReturnType = arboretum_create_named_node("/clang/BlockDecl/blockMissingReturnType");
      methods.push_back(data_model.blockMissingReturnType);
      data_model.isConversionFromLambda = arboretum_create_named_node("/clang/BlockDecl/isConversionFromLambda");
      methods.push_back(data_model.isConversionFromLambda);
      data_model.doesNotEscape = arboretum_create_named_node("/clang/BlockDecl/doesNotEscape");
      methods.push_back(data_model.doesNotEscape);
      data_model.canAvoidCopyToHeap = arboretum_create_named_node("/clang/BlockDecl/canAvoidCopyToHeap");
      methods.push_back(data_model.canAvoidCopyToHeap);
      data_model.getBlockManglingNumber = arboretum_create_named_node("/clang/BlockDecl/getBlockManglingNumber");
      methods.push_back(data_model.getBlockManglingNumber);
      data_model.getBlockManglingContextDecl = arboretum_create_named_node("/clang/BlockDecl/getBlockManglingContextDecl");
      methods.push_back(data_model.getBlockManglingContextDecl);
      data_model.getSourceRange32 = arboretum_create_named_node("/clang/BlockDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange32);
    arboretum_create_edge(data_model.BlockDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AlignValueAttr = arboretum_create_named_node("/clang/AlignValueAttr");
  arboretum_create_edge(data_model.AlignValueAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AlignValueAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnforceTCBAttr = arboretum_create_named_node("/clang/EnforceTCBAttr");
  arboretum_create_edge(data_model.EnforceTCBAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.EnforceTCBAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftVersionedRemovalAttr = arboretum_create_named_node("/clang/SwiftVersionedRemovalAttr");
  arboretum_create_edge(data_model.SwiftVersionedRemovalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftVersionedRemovalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoEscapeAttr = arboretum_create_named_node("/clang/NoEscapeAttr");
  arboretum_create_edge(data_model.NoEscapeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoEscapeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLSV_GroupIndexAttr = arboretum_create_named_node("/clang/HLSLSV_GroupIndexAttr");
  arboretum_create_edge(data_model.HLSLSV_GroupIndexAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLSV_GroupIndexAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CmseNSCallAttr = arboretum_create_named_node("/clang/CmseNSCallAttr");
  arboretum_create_edge(data_model.CmseNSCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CmseNSCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Attr = arboretum_create_named_node("/clang/Attr");
  arboretum_create_edge(data_model.Attr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.Attr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SubstTemplateTypeParmPackTypeLoc = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackTypeLoc");
  arboretum_create_edge(data_model.SubstTemplateTypeParmPackTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SubstTemplateTypeParmPackTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ImportDecl = arboretum_create_named_node("/clang/ImportDecl");
  arboretum_create_edge(data_model.ImportDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getImportedModule = arboretum_create_named_node("/clang/ImportDecl/getImportedModule");
      methods.push_back(data_model.getImportedModule);
      data_model.getIdentifierLocs = arboretum_create_named_node("/clang/ImportDecl/getIdentifierLocs");
      methods.push_back(data_model.getIdentifierLocs);
      data_model.getSourceRange33 = arboretum_create_named_node("/clang/ImportDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange33);
    arboretum_create_edge(data_model.ImportDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AlignNaturalAttr = arboretum_create_named_node("/clang/AlignNaturalAttr");
  arboretum_create_edge(data_model.AlignNaturalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AlignNaturalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IFuncAttr = arboretum_create_named_node("/clang/IFuncAttr");
  arboretum_create_edge(data_model.IFuncAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.IFuncAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AbiTagAttr = arboretum_create_named_node("/clang/AbiTagAttr");
  arboretum_create_edge(data_model.AbiTagAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AbiTagAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCapturedExprDecl = arboretum_create_named_node("/clang/OMPCapturedExprDecl");
  arboretum_create_edge(data_model.OMPCapturedExprDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCapturedExprDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Mips16Attr = arboretum_create_named_node("/clang/Mips16Attr");
  arboretum_create_edge(data_model.Mips16Attr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.Mips16Attr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCaptureNoInitAttr = arboretum_create_named_node("/clang/OMPCaptureNoInitAttr");
  arboretum_create_edge(data_model.OMPCaptureNoInitAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCaptureNoInitAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmLocallyStreamingAttr = arboretum_create_named_node("/clang/ArmLocallyStreamingAttr");
  arboretum_create_edge(data_model.ArmLocallyStreamingAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmLocallyStreamingAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VecReturnAttr = arboretum_create_named_node("/clang/VecReturnAttr");
  arboretum_create_edge(data_model.VecReturnAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.VecReturnAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftImportPropertyAsAccessorsAttr = arboretum_create_named_node("/clang/SwiftImportPropertyAsAccessorsAttr");
  arboretum_create_edge(data_model.SwiftImportPropertyAsAccessorsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftImportPropertyAsAccessorsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftNameAttr = arboretum_create_named_node("/clang/SwiftNameAttr");
  arboretum_create_edge(data_model.SwiftNameAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftNameAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelGenericLoopDirective = arboretum_create_named_node("/clang/OMPParallelGenericLoopDirective");
  arboretum_create_edge(data_model.OMPParallelGenericLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelGenericLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EmptyBasesAttr = arboretum_create_named_node("/clang/EmptyBasesAttr");
  arboretum_create_edge(data_model.EmptyBasesAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.EmptyBasesAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WeakRefAttr = arboretum_create_named_node("/clang/WeakRefAttr");
  arboretum_create_edge(data_model.WeakRefAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WeakRefAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NakedAttr = arboretum_create_named_node("/clang/NakedAttr");
  arboretum_create_edge(data_model.NakedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NakedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnsafeBufferUsageAttr = arboretum_create_named_node("/clang/UnsafeBufferUsageAttr");
  arboretum_create_edge(data_model.UnsafeBufferUsageAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UnsafeBufferUsageAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftVersionedAdditionAttr = arboretum_create_named_node("/clang/SwiftVersionedAdditionAttr");
  arboretum_create_edge(data_model.SwiftVersionedAdditionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftVersionedAdditionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionProtoType = arboretum_create_named_node("/clang/FunctionProtoType");
  arboretum_create_edge(data_model.FunctionProtoType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNumParams2 = arboretum_create_named_node("/clang/FunctionProtoType/getNumParams");
      methods.push_back(data_model.getNumParams2);
      data_model.getParamTypes = arboretum_create_named_node("/clang/FunctionProtoType/getParamTypes");
      methods.push_back(data_model.getParamTypes);
      data_model.getExtProtoInfo = arboretum_create_named_node("/clang/FunctionProtoType/getExtProtoInfo");
      methods.push_back(data_model.getExtProtoInfo);
      data_model.getExceptionSpecType1 = arboretum_create_named_node("/clang/FunctionProtoType/getExceptionSpecType");
      methods.push_back(data_model.getExceptionSpecType1);
      data_model.hasExceptionSpec = arboretum_create_named_node("/clang/FunctionProtoType/hasExceptionSpec");
      methods.push_back(data_model.hasExceptionSpec);
      data_model.hasDynamicExceptionSpec = arboretum_create_named_node("/clang/FunctionProtoType/hasDynamicExceptionSpec");
      methods.push_back(data_model.hasDynamicExceptionSpec);
      data_model.hasNoexceptExceptionSpec = arboretum_create_named_node("/clang/FunctionProtoType/hasNoexceptExceptionSpec");
      methods.push_back(data_model.hasNoexceptExceptionSpec);
      data_model.hasDependentExceptionSpec = arboretum_create_named_node("/clang/FunctionProtoType/hasDependentExceptionSpec");
      methods.push_back(data_model.hasDependentExceptionSpec);
      data_model.hasInstantiationDependentExceptionSpec = arboretum_create_named_node("/clang/FunctionProtoType/hasInstantiationDependentExceptionSpec");
      methods.push_back(data_model.hasInstantiationDependentExceptionSpec);
      data_model.getExceptionSpecInfo = arboretum_create_named_node("/clang/FunctionProtoType/getExceptionSpecInfo");
      methods.push_back(data_model.getExceptionSpecInfo);
      data_model.getNumExceptions = arboretum_create_named_node("/clang/FunctionProtoType/getNumExceptions");
      methods.push_back(data_model.getNumExceptions);
      data_model.getNoexceptExpr = arboretum_create_named_node("/clang/FunctionProtoType/getNoexceptExpr");
      methods.push_back(data_model.getNoexceptExpr);
      data_model.getExceptionSpecDecl = arboretum_create_named_node("/clang/FunctionProtoType/getExceptionSpecDecl");
      methods.push_back(data_model.getExceptionSpecDecl);
      data_model.getExceptionSpecTemplate = arboretum_create_named_node("/clang/FunctionProtoType/getExceptionSpecTemplate");
      methods.push_back(data_model.getExceptionSpecTemplate);
      data_model.canThrow = arboretum_create_named_node("/clang/FunctionProtoType/canThrow");
      methods.push_back(data_model.canThrow);
      data_model.isVariadic2 = arboretum_create_named_node("/clang/FunctionProtoType/isVariadic");
      methods.push_back(data_model.isVariadic2);
      data_model.getEllipsisLoc5 = arboretum_create_named_node("/clang/FunctionProtoType/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc5);
      data_model.isTemplateVariadic = arboretum_create_named_node("/clang/FunctionProtoType/isTemplateVariadic");
      methods.push_back(data_model.isTemplateVariadic);
      data_model.hasTrailingReturn = arboretum_create_named_node("/clang/FunctionProtoType/hasTrailingReturn");
      methods.push_back(data_model.hasTrailingReturn);
      data_model.getMethodQuals = arboretum_create_named_node("/clang/FunctionProtoType/getMethodQuals");
      methods.push_back(data_model.getMethodQuals);
      data_model.getRefQualifier1 = arboretum_create_named_node("/clang/FunctionProtoType/getRefQualifier");
      methods.push_back(data_model.getRefQualifier1);
      data_model.param_types = arboretum_create_named_node("/clang/FunctionProtoType/param_types");
      methods.push_back(data_model.param_types);
      data_model.param_type_begin = arboretum_create_named_node("/clang/FunctionProtoType/param_type_begin");
      methods.push_back(data_model.param_type_begin);
      data_model.param_type_end = arboretum_create_named_node("/clang/FunctionProtoType/param_type_end");
      methods.push_back(data_model.param_type_end);
      data_model.exceptions = arboretum_create_named_node("/clang/FunctionProtoType/exceptions");
      methods.push_back(data_model.exceptions);
      data_model.exception_begin = arboretum_create_named_node("/clang/FunctionProtoType/exception_begin");
      methods.push_back(data_model.exception_begin);
      data_model.exception_end = arboretum_create_named_node("/clang/FunctionProtoType/exception_end");
      methods.push_back(data_model.exception_end);
      data_model.hasExtParameterInfos = arboretum_create_named_node("/clang/FunctionProtoType/hasExtParameterInfos");
      methods.push_back(data_model.hasExtParameterInfos);
      data_model.getExtParameterInfos = arboretum_create_named_node("/clang/FunctionProtoType/getExtParameterInfos");
      methods.push_back(data_model.getExtParameterInfos);
      data_model.getExtParameterInfosOrNull = arboretum_create_named_node("/clang/FunctionProtoType/getExtParameterInfosOrNull");
      methods.push_back(data_model.getExtParameterInfosOrNull);
      data_model.getAArch64SMEAttributes = arboretum_create_named_node("/clang/FunctionProtoType/getAArch64SMEAttributes");
      methods.push_back(data_model.getAArch64SMEAttributes);
      data_model.isSugared1 = arboretum_create_named_node("/clang/FunctionProtoType/isSugared");
      methods.push_back(data_model.isSugared1);
      data_model.desugar1 = arboretum_create_named_node("/clang/FunctionProtoType/desugar");
      methods.push_back(data_model.desugar1);
    arboretum_create_edge(data_model.FunctionProtoType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExtVectorTypeLoc = arboretum_create_named_node("/clang/ExtVectorTypeLoc");
  arboretum_create_edge(data_model.ExtVectorTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ExtVectorTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SuppressAttr = arboretum_create_named_node("/clang/SuppressAttr");
  arboretum_create_edge(data_model.SuppressAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SuppressAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DecayedTypeLoc = arboretum_create_named_node("/clang/DecayedTypeLoc");
  arboretum_create_edge(data_model.DecayedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DecayedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.C11NoReturnAttr = arboretum_create_named_node("/clang/C11NoReturnAttr");
  arboretum_create_edge(data_model.C11NoReturnAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.C11NoReturnAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CalledOnceAttr = arboretum_create_named_node("/clang/CalledOnceAttr");
  arboretum_create_edge(data_model.CalledOnceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CalledOnceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WebAssemblyImportModuleAttr = arboretum_create_named_node("/clang/WebAssemblyImportModuleAttr");
  arboretum_create_edge(data_model.WebAssemblyImportModuleAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WebAssemblyImportModuleAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTaskyieldDirective = arboretum_create_named_node("/clang/OMPTaskyieldDirective");
  arboretum_create_edge(data_model.OMPTaskyieldDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTaskyieldDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftIndirectResultAttr = arboretum_create_named_node("/clang/SwiftIndirectResultAttr");
  arboretum_create_edge(data_model.SwiftIndirectResultAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftIndirectResultAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ComplexType = arboretum_create_named_node("/clang/ComplexType");
  arboretum_create_edge(data_model.ComplexType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElementType = arboretum_create_named_node("/clang/ComplexType/getElementType");
      methods.push_back(data_model.getElementType);
      data_model.isSugared2 = arboretum_create_named_node("/clang/ComplexType/isSugared");
      methods.push_back(data_model.isSugared2);
      data_model.desugar2 = arboretum_create_named_node("/clang/ComplexType/desugar");
      methods.push_back(data_model.desugar2);
    arboretum_create_edge(data_model.ComplexType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StrictGuardStackCheckAttr = arboretum_create_named_node("/clang/StrictGuardStackCheckAttr");
  arboretum_create_edge(data_model.StrictGuardStackCheckAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.StrictGuardStackCheckAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ImaginaryLiteral = arboretum_create_named_node("/clang/ImaginaryLiteral");
  arboretum_create_edge(data_model.ImaginaryLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr15 = arboretum_create_named_node("/clang/ImaginaryLiteral/getSubExpr");
      methods.push_back(data_model.getSubExpr15);
      data_model.getBeginLoc110 = arboretum_create_named_node("/clang/ImaginaryLiteral/getBeginLoc");
      methods.push_back(data_model.getBeginLoc110);
      data_model.getEndLoc111 = arboretum_create_named_node("/clang/ImaginaryLiteral/getEndLoc");
      methods.push_back(data_model.getEndLoc111);
      data_model.children207 = arboretum_create_named_node("/clang/ImaginaryLiteral/children");
      methods.push_back(data_model.children207);
    arboretum_create_edge(data_model.ImaginaryLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ScopedLockableAttr = arboretum_create_named_node("/clang/ScopedLockableAttr");
  arboretum_create_edge(data_model.ScopedLockableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ScopedLockableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.XRayLogArgsAttr = arboretum_create_named_node("/clang/XRayLogArgsAttr");
  arboretum_create_edge(data_model.XRayLogArgsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.XRayLogArgsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCDesignatedInitializerAttr = arboretum_create_named_node("/clang/ObjCDesignatedInitializerAttr");
  arboretum_create_edge(data_model.ObjCDesignatedInitializerAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCDesignatedInitializerAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MatrixType = arboretum_create_named_node("/clang/MatrixType");
  arboretum_create_edge(data_model.MatrixType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElementType1 = arboretum_create_named_node("/clang/MatrixType/getElementType");
      methods.push_back(data_model.getElementType1);
      data_model.isSugared3 = arboretum_create_named_node("/clang/MatrixType/isSugared");
      methods.push_back(data_model.isSugared3);
      data_model.desugar3 = arboretum_create_named_node("/clang/MatrixType/desugar");
      methods.push_back(data_model.desugar3);
    arboretum_create_edge(data_model.MatrixType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BitIntType = arboretum_create_named_node("/clang/BitIntType");
  arboretum_create_edge(data_model.BitIntType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isUnsigned = arboretum_create_named_node("/clang/BitIntType/isUnsigned");
      methods.push_back(data_model.isUnsigned);
      data_model.isSigned = arboretum_create_named_node("/clang/BitIntType/isSigned");
      methods.push_back(data_model.isSigned);
      data_model.getNumBits = arboretum_create_named_node("/clang/BitIntType/getNumBits");
      methods.push_back(data_model.getNumBits);
      data_model.isSugared4 = arboretum_create_named_node("/clang/BitIntType/isSugared");
      methods.push_back(data_model.isSugared4);
      data_model.desugar4 = arboretum_create_named_node("/clang/BitIntType/desugar");
      methods.push_back(data_model.desugar4);
    arboretum_create_edge(data_model.BitIntType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FastCallAttr = arboretum_create_named_node("/clang/FastCallAttr");
  arboretum_create_edge(data_model.FastCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FastCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeLoc = arboretum_create_named_node("/clang/TypeLoc");
  arboretum_create_edge(data_model.TypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeLocClass = arboretum_create_named_node("/clang/TypeLoc/getTypeLocClass");
      methods.push_back(data_model.getTypeLocClass);
      data_model.isNull = arboretum_create_named_node("/clang/TypeLoc/isNull");
      methods.push_back(data_model.isNull);
      data_model.getType2 = arboretum_create_named_node("/clang/TypeLoc/getType");
      methods.push_back(data_model.getType2);
      data_model.getTypePtr = arboretum_create_named_node("/clang/TypeLoc/getTypePtr");
      methods.push_back(data_model.getTypePtr);
      data_model.getOpaqueData = arboretum_create_named_node("/clang/TypeLoc/getOpaqueData");
      methods.push_back(data_model.getOpaqueData);
      data_model.getBeginLoc111 = arboretum_create_named_node("/clang/TypeLoc/getBeginLoc");
      methods.push_back(data_model.getBeginLoc111);
      data_model.getEndLoc112 = arboretum_create_named_node("/clang/TypeLoc/getEndLoc");
      methods.push_back(data_model.getEndLoc112);
      data_model.getSourceRange35 = arboretum_create_named_node("/clang/TypeLoc/getSourceRange");
      methods.push_back(data_model.getSourceRange35);
      data_model.getLocalSourceRange = arboretum_create_named_node("/clang/TypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange);
      data_model.getFullDataSize = arboretum_create_named_node("/clang/TypeLoc/getFullDataSize");
      methods.push_back(data_model.getFullDataSize);
      data_model.getNextTypeLoc = arboretum_create_named_node("/clang/TypeLoc/getNextTypeLoc");
      methods.push_back(data_model.getNextTypeLoc);
      data_model.getUnqualifiedLoc = arboretum_create_named_node("/clang/TypeLoc/getUnqualifiedLoc");
      methods.push_back(data_model.getUnqualifiedLoc);
      data_model.IgnoreParens2 = arboretum_create_named_node("/clang/TypeLoc/IgnoreParens");
      methods.push_back(data_model.IgnoreParens2);
      data_model.findExplicitQualifierLoc = arboretum_create_named_node("/clang/TypeLoc/findExplicitQualifierLoc");
      methods.push_back(data_model.findExplicitQualifierLoc);
      data_model.getContainedAutoTypeLoc = arboretum_create_named_node("/clang/TypeLoc/getContainedAutoTypeLoc");
      methods.push_back(data_model.getContainedAutoTypeLoc);
      data_model.findNullabilityLoc = arboretum_create_named_node("/clang/TypeLoc/findNullabilityLoc");
      methods.push_back(data_model.findNullabilityLoc);
    arboretum_create_edge(data_model.TypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArtificialAttr = arboretum_create_named_node("/clang/ArtificialAttr");
  arboretum_create_edge(data_model.ArtificialAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArtificialAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingPackDecl = arboretum_create_named_node("/clang/UsingPackDecl");
  arboretum_create_edge(data_model.UsingPackDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInstantiatedFromUsingDecl = arboretum_create_named_node("/clang/UsingPackDecl/getInstantiatedFromUsingDecl");
      methods.push_back(data_model.getInstantiatedFromUsingDecl);
      data_model.expansions = arboretum_create_named_node("/clang/UsingPackDecl/expansions");
      methods.push_back(data_model.expansions);
      data_model.getSourceRange36 = arboretum_create_named_node("/clang/UsingPackDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange36);
      data_model.getCanonicalDecl43 = arboretum_create_named_node("/clang/UsingPackDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl43);
    arboretum_create_edge(data_model.UsingPackDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NSErrorDomainAttr = arboretum_create_named_node("/clang/NSErrorDomainAttr");
  arboretum_create_edge(data_model.NSErrorDomainAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NSErrorDomainAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReleaseHandleAttr = arboretum_create_named_node("/clang/ReleaseHandleAttr");
  arboretum_create_edge(data_model.ReleaseHandleAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReleaseHandleAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VecTypeHintAttr = arboretum_create_named_node("/clang/VecTypeHintAttr");
  arboretum_create_edge(data_model.VecTypeHintAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.VecTypeHintAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AttributedStmt = arboretum_create_named_node("/clang/AttributedStmt");
  arboretum_create_edge(data_model.AttributedStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAttrLoc = arboretum_create_named_node("/clang/AttributedStmt/getAttrLoc");
      methods.push_back(data_model.getAttrLoc);
      data_model.getAttrs2 = arboretum_create_named_node("/clang/AttributedStmt/getAttrs");
      methods.push_back(data_model.getAttrs2);
      data_model.getSubStmt9 = arboretum_create_named_node("/clang/AttributedStmt/getSubStmt");
      methods.push_back(data_model.getSubStmt9);
      data_model.getBeginLoc112 = arboretum_create_named_node("/clang/AttributedStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc112);
      data_model.getEndLoc113 = arboretum_create_named_node("/clang/AttributedStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc113);
      data_model.children209 = arboretum_create_named_node("/clang/AttributedStmt/children");
      methods.push_back(data_model.children209);
    arboretum_create_edge(data_model.AttributedStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftAsyncContextAttr = arboretum_create_named_node("/clang/SwiftAsyncContextAttr");
  arboretum_create_edge(data_model.SwiftAsyncContextAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftAsyncContextAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BTFDeclTagAttr = arboretum_create_named_node("/clang/BTFDeclTagAttr");
  arboretum_create_edge(data_model.BTFDeclTagAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BTFDeclTagAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BlockPointerType = arboretum_create_named_node("/clang/BlockPointerType");
  arboretum_create_edge(data_model.BlockPointerType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPointeeType1 = arboretum_create_named_node("/clang/BlockPointerType/getPointeeType");
      methods.push_back(data_model.getPointeeType1);
      data_model.isSugared5 = arboretum_create_named_node("/clang/BlockPointerType/isSugared");
      methods.push_back(data_model.isSugared5);
      data_model.desugar5 = arboretum_create_named_node("/clang/BlockPointerType/desugar");
      methods.push_back(data_model.desugar5);
    arboretum_create_edge(data_model.BlockPointerType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftAttrAttr = arboretum_create_named_node("/clang/SwiftAttrAttr");
  arboretum_create_edge(data_model.SwiftAttrAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftAttrAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnnamedGlobalConstantDecl = arboretum_create_named_node("/clang/UnnamedGlobalConstantDecl");
  arboretum_create_edge(data_model.UnnamedGlobalConstantDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValue7 = arboretum_create_named_node("/clang/UnnamedGlobalConstantDecl/getValue");
      methods.push_back(data_model.getValue7);
    arboretum_create_edge(data_model.UnnamedGlobalConstantDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CleanupAttr = arboretum_create_named_node("/clang/CleanupAttr");
  arboretum_create_edge(data_model.CleanupAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CleanupAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPReferencedVarAttr = arboretum_create_named_node("/clang/OMPReferencedVarAttr");
  arboretum_create_edge(data_model.OMPReferencedVarAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPReferencedVarAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCCompatibleAliasDecl = arboretum_create_named_node("/clang/ObjCCompatibleAliasDecl");
  arboretum_create_edge(data_model.ObjCCompatibleAliasDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCCompatibleAliasDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TryAcquireCapabilityAttr = arboretum_create_named_node("/clang/TryAcquireCapabilityAttr");
  arboretum_create_edge(data_model.TryAcquireCapabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TryAcquireCapabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentSizedMatrixType = arboretum_create_named_node("/clang/DependentSizedMatrixType");
  arboretum_create_edge(data_model.DependentSizedMatrixType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getRowExpr = arboretum_create_named_node("/clang/DependentSizedMatrixType/getRowExpr");
      methods.push_back(data_model.getRowExpr);
      data_model.getColumnExpr = arboretum_create_named_node("/clang/DependentSizedMatrixType/getColumnExpr");
      methods.push_back(data_model.getColumnExpr);
      data_model.getAttributeLoc = arboretum_create_named_node("/clang/DependentSizedMatrixType/getAttributeLoc");
      methods.push_back(data_model.getAttributeLoc);
    arboretum_create_edge(data_model.DependentSizedMatrixType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TransparentUnionAttr = arboretum_create_named_node("/clang/TransparentUnionAttr");
  arboretum_create_edge(data_model.TransparentUnionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TransparentUnionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftErrorAttr = arboretum_create_named_node("/clang/SwiftErrorAttr");
  arboretum_create_edge(data_model.SwiftErrorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftErrorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftImportAsNonGenericAttr = arboretum_create_named_node("/clang/SwiftImportAsNonGenericAttr");
  arboretum_create_edge(data_model.SwiftImportAsNonGenericAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftImportAsNonGenericAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArrayType = arboretum_create_named_node("/clang/ArrayType");
  arboretum_create_edge(data_model.ArrayType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElementType2 = arboretum_create_named_node("/clang/ArrayType/getElementType");
      methods.push_back(data_model.getElementType2);
      data_model.getSizeModifier = arboretum_create_named_node("/clang/ArrayType/getSizeModifier");
      methods.push_back(data_model.getSizeModifier);
      data_model.getIndexTypeQualifiers = arboretum_create_named_node("/clang/ArrayType/getIndexTypeQualifiers");
      methods.push_back(data_model.getIndexTypeQualifiers);
      data_model.getIndexTypeCVRQualifiers = arboretum_create_named_node("/clang/ArrayType/getIndexTypeCVRQualifiers");
      methods.push_back(data_model.getIndexTypeCVRQualifiers);
    arboretum_create_edge(data_model.ArrayType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftAsyncCallAttr = arboretum_create_named_node("/clang/SwiftAsyncCallAttr");
  arboretum_create_edge(data_model.SwiftAsyncCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftAsyncCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeTraitExpr = arboretum_create_named_node("/clang/TypeTraitExpr");
  arboretum_create_edge(data_model.TypeTraitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTrait1 = arboretum_create_named_node("/clang/TypeTraitExpr/getTrait");
      methods.push_back(data_model.getTrait1);
      data_model.getValue8 = arboretum_create_named_node("/clang/TypeTraitExpr/getValue");
      methods.push_back(data_model.getValue8);
      data_model.getNumArgs4 = arboretum_create_named_node("/clang/TypeTraitExpr/getNumArgs");
      methods.push_back(data_model.getNumArgs4);
      data_model.getArgs4 = arboretum_create_named_node("/clang/TypeTraitExpr/getArgs");
      methods.push_back(data_model.getArgs4);
      data_model.getBeginLoc113 = arboretum_create_named_node("/clang/TypeTraitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc113);
      data_model.getEndLoc114 = arboretum_create_named_node("/clang/TypeTraitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc114);
      data_model.children211 = arboretum_create_named_node("/clang/TypeTraitExpr/children");
      methods.push_back(data_model.children211);
    arboretum_create_edge(data_model.TypeTraitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.M68kInterruptAttr = arboretum_create_named_node("/clang/M68kInterruptAttr");
  arboretum_create_edge(data_model.M68kInterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.M68kInterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftAsyncAttr = arboretum_create_named_node("/clang/SwiftAsyncAttr");
  arboretum_create_edge(data_model.SwiftAsyncAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftAsyncAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SectionAttr = arboretum_create_named_node("/clang/SectionAttr");
  arboretum_create_edge(data_model.SectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OSReturnsNotRetainedAttr = arboretum_create_named_node("/clang/OSReturnsNotRetainedAttr");
  arboretum_create_edge(data_model.OSReturnsNotRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OSReturnsNotRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CDeclAttr = arboretum_create_named_node("/clang/CDeclAttr");
  arboretum_create_edge(data_model.CDeclAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CDeclAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VAArgExpr = arboretum_create_named_node("/clang/VAArgExpr");
  arboretum_create_edge(data_model.VAArgExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubExpr17 = arboretum_create_named_node("/clang/VAArgExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr17);
      data_model.isMicrosoftABI = arboretum_create_named_node("/clang/VAArgExpr/isMicrosoftABI");
      methods.push_back(data_model.isMicrosoftABI);
      data_model.getWrittenTypeInfo = arboretum_create_named_node("/clang/VAArgExpr/getWrittenTypeInfo");
      methods.push_back(data_model.getWrittenTypeInfo);
      data_model.getBuiltinLoc4 = arboretum_create_named_node("/clang/VAArgExpr/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc4);
      data_model.getRParenLoc23 = arboretum_create_named_node("/clang/VAArgExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc23);
      data_model.getBeginLoc114 = arboretum_create_named_node("/clang/VAArgExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc114);
      data_model.getEndLoc115 = arboretum_create_named_node("/clang/VAArgExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc115);
      data_model.children213 = arboretum_create_named_node("/clang/VAArgExpr/children");
      methods.push_back(data_model.children213);
    arboretum_create_edge(data_model.VAArgExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PointerAttr = arboretum_create_named_node("/clang/PointerAttr");
  arboretum_create_edge(data_model.PointerAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PointerAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StandaloneDebugAttr = arboretum_create_named_node("/clang/StandaloneDebugAttr");
  arboretum_create_edge(data_model.StandaloneDebugAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.StandaloneDebugAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConvergentAttr = arboretum_create_named_node("/clang/ConvergentAttr");
  arboretum_create_edge(data_model.ConvergentAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConvergentAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelForDirective = arboretum_create_named_node("/clang/OMPParallelForDirective");
  arboretum_create_edge(data_model.OMPParallelForDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelForDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AsmLabelAttr = arboretum_create_named_node("/clang/AsmLabelAttr");
  arboretum_create_edge(data_model.AsmLabelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AsmLabelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExpressionTraitExpr = arboretum_create_named_node("/clang/ExpressionTraitExpr");
  arboretum_create_edge(data_model.ExpressionTraitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc115 = arboretum_create_named_node("/clang/ExpressionTraitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc115);
      data_model.getEndLoc116 = arboretum_create_named_node("/clang/ExpressionTraitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc116);
      data_model.getTrait2 = arboretum_create_named_node("/clang/ExpressionTraitExpr/getTrait");
      methods.push_back(data_model.getTrait2);
      data_model.getQueriedExpression = arboretum_create_named_node("/clang/ExpressionTraitExpr/getQueriedExpression");
      methods.push_back(data_model.getQueriedExpression);
      data_model.getValue9 = arboretum_create_named_node("/clang/ExpressionTraitExpr/getValue");
      methods.push_back(data_model.getValue9);
      data_model.children215 = arboretum_create_named_node("/clang/ExpressionTraitExpr/children");
      methods.push_back(data_model.children215);
    arboretum_create_edge(data_model.ExpressionTraitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSPropertyDecl = arboretum_create_named_node("/clang/MSPropertyDecl");
  arboretum_create_edge(data_model.MSPropertyDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.hasGetter = arboretum_create_named_node("/clang/MSPropertyDecl/hasGetter");
      methods.push_back(data_model.hasGetter);
      data_model.getGetterId = arboretum_create_named_node("/clang/MSPropertyDecl/getGetterId");
      methods.push_back(data_model.getGetterId);
      data_model.hasSetter = arboretum_create_named_node("/clang/MSPropertyDecl/hasSetter");
      methods.push_back(data_model.hasSetter);
      data_model.getSetterId = arboretum_create_named_node("/clang/MSPropertyDecl/getSetterId");
      methods.push_back(data_model.getSetterId);
    arboretum_create_edge(data_model.MSPropertyDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SubstTemplateTypeParmType = arboretum_create_named_node("/clang/SubstTemplateTypeParmType");
  arboretum_create_edge(data_model.SubstTemplateTypeParmType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getReplacementType = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/getReplacementType");
      methods.push_back(data_model.getReplacementType);
      data_model.getAssociatedDecl = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/getAssociatedDecl");
      methods.push_back(data_model.getAssociatedDecl);
      data_model.getReplacedParameter = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/getReplacedParameter");
      methods.push_back(data_model.getReplacedParameter);
      data_model.getIndex1 = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/getIndex");
      methods.push_back(data_model.getIndex1);
      data_model.getPackIndex = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/getPackIndex");
      methods.push_back(data_model.getPackIndex);
      data_model.isSugared6 = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/isSugared");
      methods.push_back(data_model.isSugared6);
      data_model.desugar6 = arboretum_create_named_node("/clang/SubstTemplateTypeParmType/desugar");
      methods.push_back(data_model.desugar6);
    arboretum_create_edge(data_model.SubstTemplateTypeParmType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnusedAttr = arboretum_create_named_node("/clang/UnusedAttr");
  arboretum_create_edge(data_model.UnusedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UnusedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ImplicitValueInitExpr = arboretum_create_named_node("/clang/ImplicitValueInitExpr");
  arboretum_create_edge(data_model.ImplicitValueInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc116 = arboretum_create_named_node("/clang/ImplicitValueInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc116);
      data_model.getEndLoc117 = arboretum_create_named_node("/clang/ImplicitValueInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc117);
      data_model.children217 = arboretum_create_named_node("/clang/ImplicitValueInitExpr/children");
      methods.push_back(data_model.children217);
    arboretum_create_edge(data_model.ImplicitValueInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmBuiltinAliasAttr = arboretum_create_named_node("/clang/ArmBuiltinAliasAttr");
  arboretum_create_edge(data_model.ArmBuiltinAliasAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmBuiltinAliasAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SelectAnyAttr = arboretum_create_named_node("/clang/SelectAnyAttr");
  arboretum_create_edge(data_model.SelectAnyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SelectAnyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ColdAttr = arboretum_create_named_node("/clang/ColdAttr");
  arboretum_create_edge(data_model.ColdAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ColdAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StrictFPAttr = arboretum_create_named_node("/clang/StrictFPAttr");
  arboretum_create_edge(data_model.StrictFPAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.StrictFPAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AnyX86InterruptAttr = arboretum_create_named_node("/clang/AnyX86InterruptAttr");
  arboretum_create_edge(data_model.AnyX86InterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AnyX86InterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFConsumedAttr = arboretum_create_named_node("/clang/CFConsumedAttr");
  arboretum_create_edge(data_model.CFConsumedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFConsumedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCIndependentClassAttr = arboretum_create_named_node("/clang/ObjCIndependentClassAttr");
  arboretum_create_edge(data_model.ObjCIndependentClassAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCIndependentClassAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTeamsDirective = arboretum_create_named_node("/clang/OMPTeamsDirective");
  arboretum_create_edge(data_model.OMPTeamsDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTeamsDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ClassTemplateSpecializationDecl = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl");
  arboretum_create_edge(data_model.ClassTemplateSpecializationDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSpecializedTemplate1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getSpecializedTemplate");
      methods.push_back(data_model.getSpecializedTemplate1);
      data_model.getTemplateArgs5 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs5);
      data_model.getSpecializationKind1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getSpecializationKind");
      methods.push_back(data_model.getSpecializationKind1);
      data_model.isExplicitSpecialization1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/isExplicitSpecialization");
      methods.push_back(data_model.isExplicitSpecialization1);
      data_model.isClassScopeExplicitSpecialization1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/isClassScopeExplicitSpecialization");
      methods.push_back(data_model.isClassScopeExplicitSpecialization1);
      data_model.isExplicitInstantiationOrSpecialization1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/isExplicitInstantiationOrSpecialization");
      methods.push_back(data_model.isExplicitInstantiationOrSpecialization1);
      data_model.getPointOfInstantiation3 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getPointOfInstantiation");
      methods.push_back(data_model.getPointOfInstantiation3);
      data_model.getInstantiatedFrom1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getInstantiatedFrom");
      methods.push_back(data_model.getInstantiatedFrom1);
      data_model.getSpecializedTemplateOrPartial1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getSpecializedTemplateOrPartial");
      methods.push_back(data_model.getSpecializedTemplateOrPartial1);
      data_model.getTemplateInstantiationArgs1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getTemplateInstantiationArgs");
      methods.push_back(data_model.getTemplateInstantiationArgs1);
      data_model.getTypeAsWritten3 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getTypeAsWritten");
      methods.push_back(data_model.getTypeAsWritten3);
      data_model.getExternLoc1 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getExternLoc");
      methods.push_back(data_model.getExternLoc1);
      data_model.getTemplateKeywordLoc5 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc5);
      data_model.getSourceRange37 = arboretum_create_named_node("/clang/ClassTemplateSpecializationDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange37);
    arboretum_create_edge(data_model.ClassTemplateSpecializationDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoInlineAttr = arboretum_create_named_node("/clang/NoInlineAttr");
  arboretum_create_edge(data_model.NoInlineAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoInlineAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelDirective = arboretum_create_named_node("/clang/OMPParallelDirective");
  arboretum_create_edge(data_model.OMPParallelDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CompoundAssignOperator = arboretum_create_named_node("/clang/CompoundAssignOperator");
  arboretum_create_edge(data_model.CompoundAssignOperator, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getComputationLHSType = arboretum_create_named_node("/clang/CompoundAssignOperator/getComputationLHSType");
      methods.push_back(data_model.getComputationLHSType);
      data_model.getComputationResultType = arboretum_create_named_node("/clang/CompoundAssignOperator/getComputationResultType");
      methods.push_back(data_model.getComputationResultType);
    arboretum_create_edge(data_model.CompoundAssignOperator, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IndirectFieldDecl = arboretum_create_named_node("/clang/IndirectFieldDecl");
  arboretum_create_edge(data_model.IndirectFieldDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.chain = arboretum_create_named_node("/clang/IndirectFieldDecl/chain");
      methods.push_back(data_model.chain);
      data_model.chain_begin = arboretum_create_named_node("/clang/IndirectFieldDecl/chain_begin");
      methods.push_back(data_model.chain_begin);
      data_model.chain_end = arboretum_create_named_node("/clang/IndirectFieldDecl/chain_end");
      methods.push_back(data_model.chain_end);
      data_model.getChainingSize = arboretum_create_named_node("/clang/IndirectFieldDecl/getChainingSize");
      methods.push_back(data_model.getChainingSize);
      data_model.getAnonField = arboretum_create_named_node("/clang/IndirectFieldDecl/getAnonField");
      methods.push_back(data_model.getAnonField);
      data_model.getVarDecl = arboretum_create_named_node("/clang/IndirectFieldDecl/getVarDecl");
      methods.push_back(data_model.getVarDecl);
      data_model.getCanonicalDecl45 = arboretum_create_named_node("/clang/IndirectFieldDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl45);
    arboretum_create_edge(data_model.IndirectFieldDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OSReturnsRetainedOnZeroAttr = arboretum_create_named_node("/clang/OSReturnsRetainedOnZeroAttr");
  arboretum_create_edge(data_model.OSReturnsRetainedOnZeroAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OSReturnsRetainedOnZeroAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmInOutAttr = arboretum_create_named_node("/clang/ArmInOutAttr");
  arboretum_create_edge(data_model.ArmInOutAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmInOutAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AMDGPUNumVGPRAttr = arboretum_create_named_node("/clang/AMDGPUNumVGPRAttr");
  arboretum_create_edge(data_model.AMDGPUNumVGPRAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AMDGPUNumVGPRAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NSConsumedAttr = arboretum_create_named_node("/clang/NSConsumedAttr");
  arboretum_create_edge(data_model.NSConsumedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NSConsumedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDADeviceBuiltinTextureTypeAttr = arboretum_create_named_node("/clang/CUDADeviceBuiltinTextureTypeAttr");
  arboretum_create_edge(data_model.CUDADeviceBuiltinTextureTypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDADeviceBuiltinTextureTypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPAllocateDecl = arboretum_create_named_node("/clang/OMPAllocateDecl");
  arboretum_create_edge(data_model.OMPAllocateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPAllocateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AMDGPUNumSGPRAttr = arboretum_create_named_node("/clang/AMDGPUNumSGPRAttr");
  arboretum_create_edge(data_model.AMDGPUNumSGPRAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AMDGPUNumSGPRAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLAccessAttr = arboretum_create_named_node("/clang/OpenCLAccessAttr");
  arboretum_create_edge(data_model.OpenCLAccessAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLAccessAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LikelyAttr = arboretum_create_named_node("/clang/LikelyAttr");
  arboretum_create_edge(data_model.LikelyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LikelyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmInAttr = arboretum_create_named_node("/clang/ArmInAttr");
  arboretum_create_edge(data_model.ArmInAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmInAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NamespaceAliasDecl = arboretum_create_named_node("/clang/NamespaceAliasDecl");
  arboretum_create_edge(data_model.NamespaceAliasDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCanonicalDecl47 = arboretum_create_named_node("/clang/NamespaceAliasDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl47);
      data_model.getQualifierLoc8 = arboretum_create_named_node("/clang/NamespaceAliasDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc8);
      data_model.getQualifier8 = arboretum_create_named_node("/clang/NamespaceAliasDecl/getQualifier");
      methods.push_back(data_model.getQualifier8);
      data_model.getNamespace1 = arboretum_create_named_node("/clang/NamespaceAliasDecl/getNamespace");
      methods.push_back(data_model.getNamespace1);
      data_model.getAliasLoc = arboretum_create_named_node("/clang/NamespaceAliasDecl/getAliasLoc");
      methods.push_back(data_model.getAliasLoc);
      data_model.getNamespaceLoc = arboretum_create_named_node("/clang/NamespaceAliasDecl/getNamespaceLoc");
      methods.push_back(data_model.getNamespaceLoc);
      data_model.getTargetNameLoc = arboretum_create_named_node("/clang/NamespaceAliasDecl/getTargetNameLoc");
      methods.push_back(data_model.getTargetNameLoc);
      data_model.getAliasedNamespace = arboretum_create_named_node("/clang/NamespaceAliasDecl/getAliasedNamespace");
      methods.push_back(data_model.getAliasedNamespace);
      data_model.getSourceRange38 = arboretum_create_named_node("/clang/NamespaceAliasDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange38);
    arboretum_create_edge(data_model.NamespaceAliasDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LinkageSpecDecl = arboretum_create_named_node("/clang/LinkageSpecDecl");
  arboretum_create_edge(data_model.LinkageSpecDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLanguage = arboretum_create_named_node("/clang/LinkageSpecDecl/getLanguage");
      methods.push_back(data_model.getLanguage);
      data_model.hasBraces2 = arboretum_create_named_node("/clang/LinkageSpecDecl/hasBraces");
      methods.push_back(data_model.hasBraces2);
      data_model.getExternLoc2 = arboretum_create_named_node("/clang/LinkageSpecDecl/getExternLoc");
      methods.push_back(data_model.getExternLoc2);
      data_model.getRBraceLoc3 = arboretum_create_named_node("/clang/LinkageSpecDecl/getRBraceLoc");
      methods.push_back(data_model.getRBraceLoc3);
      data_model.getEndLoc118 = arboretum_create_named_node("/clang/LinkageSpecDecl/getEndLoc");
      methods.push_back(data_model.getEndLoc118);
      data_model.getSourceRange39 = arboretum_create_named_node("/clang/LinkageSpecDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange39);
    arboretum_create_edge(data_model.LinkageSpecDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AArch64SVEPcsAttr = arboretum_create_named_node("/clang/AArch64SVEPcsAttr");
  arboretum_create_edge(data_model.AArch64SVEPcsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AArch64SVEPcsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLGlobalHostAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLGlobalHostAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLGlobalHostAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLGlobalHostAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmNewAttr = arboretum_create_named_node("/clang/ArmNewAttr");
  arboretum_create_edge(data_model.ArmNewAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmNewAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PipeTypeLoc = arboretum_create_named_node("/clang/PipeTypeLoc");
  arboretum_create_edge(data_model.PipeTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValueLoc = arboretum_create_named_node("/clang/PipeTypeLoc/getValueLoc");
      methods.push_back(data_model.getValueLoc);
      data_model.getLocalSourceRange1 = arboretum_create_named_node("/clang/PipeTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange1);
      data_model.getKWLoc = arboretum_create_named_node("/clang/PipeTypeLoc/getKWLoc");
      methods.push_back(data_model.getKWLoc);
      data_model.getInnerType = arboretum_create_named_node("/clang/PipeTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType);
    arboretum_create_edge(data_model.PipeTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentVectorTypeLoc = arboretum_create_named_node("/clang/DependentVectorTypeLoc");
  arboretum_create_edge(data_model.DependentVectorTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameLoc1 = arboretum_create_named_node("/clang/DependentVectorTypeLoc/getNameLoc");
      methods.push_back(data_model.getNameLoc1);
      data_model.getLocalSourceRange2 = arboretum_create_named_node("/clang/DependentVectorTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange2);
      data_model.getElementLoc = arboretum_create_named_node("/clang/DependentVectorTypeLoc/getElementLoc");
      methods.push_back(data_model.getElementLoc);
      data_model.getInnerType1 = arboretum_create_named_node("/clang/DependentVectorTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType1);
    arboretum_create_edge(data_model.DependentVectorTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SentinelAttr = arboretum_create_named_node("/clang/SentinelAttr");
  arboretum_create_edge(data_model.SentinelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SentinelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoThrowAttr = arboretum_create_named_node("/clang/NoThrowAttr");
  arboretum_create_edge(data_model.NoThrowAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoThrowAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXMemberCallExpr = arboretum_create_named_node("/clang/CXXMemberCallExpr");
  arboretum_create_edge(data_model.CXXMemberCallExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getImplicitObjectArgument = arboretum_create_named_node("/clang/CXXMemberCallExpr/getImplicitObjectArgument");
      methods.push_back(data_model.getImplicitObjectArgument);
      data_model.getObjectType = arboretum_create_named_node("/clang/CXXMemberCallExpr/getObjectType");
      methods.push_back(data_model.getObjectType);
      data_model.getMethodDecl = arboretum_create_named_node("/clang/CXXMemberCallExpr/getMethodDecl");
      methods.push_back(data_model.getMethodDecl);
      data_model.getRecordDecl = arboretum_create_named_node("/clang/CXXMemberCallExpr/getRecordDecl");
      methods.push_back(data_model.getRecordDecl);
      data_model.getExprLoc15 = arboretum_create_named_node("/clang/CXXMemberCallExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc15);
    arboretum_create_edge(data_model.CXXMemberCallExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WarnUnusedAttr = arboretum_create_named_node("/clang/WarnUnusedAttr");
  arboretum_create_edge(data_model.WarnUnusedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WarnUnusedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NonNullAttr = arboretum_create_named_node("/clang/NonNullAttr");
  arboretum_create_edge(data_model.NonNullAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NonNullAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MustTailAttr = arboretum_create_named_node("/clang/MustTailAttr");
  arboretum_create_edge(data_model.MustTailAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MustTailAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeNullableAttr = arboretum_create_named_node("/clang/TypeNullableAttr");
  arboretum_create_edge(data_model.TypeNullableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeNullableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IfStmt = arboretum_create_named_node("/clang/IfStmt");
  arboretum_create_edge(data_model.IfStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.hasInitStorage1 = arboretum_create_named_node("/clang/IfStmt/hasInitStorage");
      methods.push_back(data_model.hasInitStorage1);
      data_model.hasVarStorage2 = arboretum_create_named_node("/clang/IfStmt/hasVarStorage");
      methods.push_back(data_model.hasVarStorage2);
      data_model.hasElseStorage = arboretum_create_named_node("/clang/IfStmt/hasElseStorage");
      methods.push_back(data_model.hasElseStorage);
      data_model.getCond11 = arboretum_create_named_node("/clang/IfStmt/getCond");
      methods.push_back(data_model.getCond11);
      data_model.getThen1 = arboretum_create_named_node("/clang/IfStmt/getThen");
      methods.push_back(data_model.getThen1);
      data_model.getElse1 = arboretum_create_named_node("/clang/IfStmt/getElse");
      methods.push_back(data_model.getElse1);
      data_model.getConditionVariable6 = arboretum_create_named_node("/clang/IfStmt/getConditionVariable");
      methods.push_back(data_model.getConditionVariable6);
      data_model.getConditionVariableDeclStmt7 = arboretum_create_named_node("/clang/IfStmt/getConditionVariableDeclStmt");
      methods.push_back(data_model.getConditionVariableDeclStmt7);
      data_model.getInit11 = arboretum_create_named_node("/clang/IfStmt/getInit");
      methods.push_back(data_model.getInit11);
      data_model.getIfLoc = arboretum_create_named_node("/clang/IfStmt/getIfLoc");
      methods.push_back(data_model.getIfLoc);
      data_model.getElseLoc = arboretum_create_named_node("/clang/IfStmt/getElseLoc");
      methods.push_back(data_model.getElseLoc);
      data_model.isConsteval1 = arboretum_create_named_node("/clang/IfStmt/isConsteval");
      methods.push_back(data_model.isConsteval1);
      data_model.isNonNegatedConsteval = arboretum_create_named_node("/clang/IfStmt/isNonNegatedConsteval");
      methods.push_back(data_model.isNonNegatedConsteval);
      data_model.isNegatedConsteval = arboretum_create_named_node("/clang/IfStmt/isNegatedConsteval");
      methods.push_back(data_model.isNegatedConsteval);
      data_model.isConstexpr2 = arboretum_create_named_node("/clang/IfStmt/isConstexpr");
      methods.push_back(data_model.isConstexpr2);
      data_model.getStatementKind = arboretum_create_named_node("/clang/IfStmt/getStatementKind");
      methods.push_back(data_model.getStatementKind);
      data_model.isObjCAvailabilityCheck = arboretum_create_named_node("/clang/IfStmt/isObjCAvailabilityCheck");
      methods.push_back(data_model.isObjCAvailabilityCheck);
      data_model.getBeginLoc117 = arboretum_create_named_node("/clang/IfStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc117);
      data_model.getEndLoc119 = arboretum_create_named_node("/clang/IfStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc119);
      data_model.getLParenLoc12 = arboretum_create_named_node("/clang/IfStmt/getLParenLoc");
      methods.push_back(data_model.getLParenLoc12);
      data_model.getRParenLoc24 = arboretum_create_named_node("/clang/IfStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc24);
      data_model.children219 = arboretum_create_named_node("/clang/IfStmt/children");
      methods.push_back(data_model.children219);
    arboretum_create_edge(data_model.IfStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParameterABIAttr = arboretum_create_named_node("/clang/ParameterABIAttr");
  arboretum_create_edge(data_model.ParameterABIAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ParameterABIAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLGlobalAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLGlobalAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLGlobalAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLGlobalAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NullStmt = arboretum_create_named_node("/clang/NullStmt");
  arboretum_create_edge(data_model.NullStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSemiLoc = arboretum_create_named_node("/clang/NullStmt/getSemiLoc");
      methods.push_back(data_model.getSemiLoc);
      data_model.hasLeadingEmptyMacro = arboretum_create_named_node("/clang/NullStmt/hasLeadingEmptyMacro");
      methods.push_back(data_model.hasLeadingEmptyMacro);
      data_model.getBeginLoc118 = arboretum_create_named_node("/clang/NullStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc118);
      data_model.getEndLoc120 = arboretum_create_named_node("/clang/NullStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc120);
      data_model.children221 = arboretum_create_named_node("/clang/NullStmt/children");
      methods.push_back(data_model.children221);
    arboretum_create_edge(data_model.NullStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CodeAlignAttr = arboretum_create_named_node("/clang/CodeAlignAttr");
  arboretum_create_edge(data_model.CodeAlignAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CodeAlignAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLGlobalDeviceAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLGlobalDeviceAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLGlobalDeviceAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLGlobalDeviceAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCMessageExpr = arboretum_create_named_node("/clang/ObjCMessageExpr");
  arboretum_create_edge(data_model.ObjCMessageExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCMessageExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDASharedAttr = arboretum_create_named_node("/clang/CUDASharedAttr");
  arboretum_create_edge(data_model.CUDASharedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDASharedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AdjustedTypeLoc = arboretum_create_named_node("/clang/AdjustedTypeLoc");
  arboretum_create_edge(data_model.AdjustedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOriginalLoc = arboretum_create_named_node("/clang/AdjustedTypeLoc/getOriginalLoc");
      methods.push_back(data_model.getOriginalLoc);
      data_model.getInnerType2 = arboretum_create_named_node("/clang/AdjustedTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType2);
      data_model.getLocalSourceRange3 = arboretum_create_named_node("/clang/AdjustedTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange3);
      data_model.getLocalDataSize = arboretum_create_named_node("/clang/AdjustedTypeLoc/getLocalDataSize");
      methods.push_back(data_model.getLocalDataSize);
    arboretum_create_edge(data_model.AdjustedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AssumptionAttr = arboretum_create_named_node("/clang/AssumptionAttr");
  arboretum_create_edge(data_model.AssumptionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AssumptionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftErrorResultAttr = arboretum_create_named_node("/clang/SwiftErrorResultAttr");
  arboretum_create_edge(data_model.SwiftErrorResultAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftErrorResultAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXUuidofExpr = arboretum_create_named_node("/clang/CXXUuidofExpr");
  arboretum_create_edge(data_model.CXXUuidofExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isTypeOperand = arboretum_create_named_node("/clang/CXXUuidofExpr/isTypeOperand");
      methods.push_back(data_model.isTypeOperand);
      data_model.getTypeOperandSourceInfo = arboretum_create_named_node("/clang/CXXUuidofExpr/getTypeOperandSourceInfo");
      methods.push_back(data_model.getTypeOperandSourceInfo);
      data_model.getExprOperand = arboretum_create_named_node("/clang/CXXUuidofExpr/getExprOperand");
      methods.push_back(data_model.getExprOperand);
      data_model.getGuidDecl = arboretum_create_named_node("/clang/CXXUuidofExpr/getGuidDecl");
      methods.push_back(data_model.getGuidDecl);
      data_model.getBeginLoc120 = arboretum_create_named_node("/clang/CXXUuidofExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc120);
      data_model.getEndLoc122 = arboretum_create_named_node("/clang/CXXUuidofExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc122);
      data_model.getSourceRange40 = arboretum_create_named_node("/clang/CXXUuidofExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange40);
      data_model.children225 = arboretum_create_named_node("/clang/CXXUuidofExpr/children");
      methods.push_back(data_model.children225);
    arboretum_create_edge(data_model.CXXUuidofExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ThreadAttr = arboretum_create_named_node("/clang/ThreadAttr");
  arboretum_create_edge(data_model.ThreadAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ThreadAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCGCAttr = arboretum_create_named_node("/clang/ObjCGCAttr");
  arboretum_create_edge(data_model.ObjCGCAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCGCAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftContextAttr = arboretum_create_named_node("/clang/SwiftContextAttr");
  arboretum_create_edge(data_model.SwiftContextAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftContextAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLUnrollHintAttr = arboretum_create_named_node("/clang/OpenCLUnrollHintAttr");
  arboretum_create_edge(data_model.OpenCLUnrollHintAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLUnrollHintAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Type = arboretum_create_named_node("/clang/Type");
  arboretum_create_edge(data_model.Type, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeClass = arboretum_create_named_node("/clang/Type/getTypeClass");
      methods.push_back(data_model.getTypeClass);
      data_model.isFromAST = arboretum_create_named_node("/clang/Type/isFromAST");
      methods.push_back(data_model.isFromAST);
      data_model.containsUnexpandedParameterPack1 = arboretum_create_named_node("/clang/Type/containsUnexpandedParameterPack");
      methods.push_back(data_model.containsUnexpandedParameterPack1);
      data_model.isCanonicalUnqualified = arboretum_create_named_node("/clang/Type/isCanonicalUnqualified");
      methods.push_back(data_model.isCanonicalUnqualified);
      data_model.getLocallyUnqualifiedSingleStepDesugaredType = arboretum_create_named_node("/clang/Type/getLocallyUnqualifiedSingleStepDesugaredType");
      methods.push_back(data_model.getLocallyUnqualifiedSingleStepDesugaredType);
      data_model.isSizelessType = arboretum_create_named_node("/clang/Type/isSizelessType");
      methods.push_back(data_model.isSizelessType);
      data_model.isSizelessBuiltinType = arboretum_create_named_node("/clang/Type/isSizelessBuiltinType");
      methods.push_back(data_model.isSizelessBuiltinType);
      data_model.isSizelessVectorType = arboretum_create_named_node("/clang/Type/isSizelessVectorType");
      methods.push_back(data_model.isSizelessVectorType);
      data_model.isSVESizelessBuiltinType = arboretum_create_named_node("/clang/Type/isSVESizelessBuiltinType");
      methods.push_back(data_model.isSVESizelessBuiltinType);
      data_model.isRVVSizelessBuiltinType = arboretum_create_named_node("/clang/Type/isRVVSizelessBuiltinType");
      methods.push_back(data_model.isRVVSizelessBuiltinType);
      data_model.isWebAssemblyExternrefType = arboretum_create_named_node("/clang/Type/isWebAssemblyExternrefType");
      methods.push_back(data_model.isWebAssemblyExternrefType);
      data_model.isWebAssemblyTableType = arboretum_create_named_node("/clang/Type/isWebAssemblyTableType");
      methods.push_back(data_model.isWebAssemblyTableType);
      data_model.isSveVLSBuiltinType = arboretum_create_named_node("/clang/Type/isSveVLSBuiltinType");
      methods.push_back(data_model.isSveVLSBuiltinType);
      data_model.isRVVVLSBuiltinType = arboretum_create_named_node("/clang/Type/isRVVVLSBuiltinType");
      methods.push_back(data_model.isRVVVLSBuiltinType);
      data_model.isIncompleteOrObjectType = arboretum_create_named_node("/clang/Type/isIncompleteOrObjectType");
      methods.push_back(data_model.isIncompleteOrObjectType);
      data_model.isObjectType = arboretum_create_named_node("/clang/Type/isObjectType");
      methods.push_back(data_model.isObjectType);
      data_model.isStructuralType = arboretum_create_named_node("/clang/Type/isStructuralType");
      methods.push_back(data_model.isStructuralType);
      data_model.isStandardLayoutType = arboretum_create_named_node("/clang/Type/isStandardLayoutType");
      methods.push_back(data_model.isStandardLayoutType);
      data_model.isBuiltinType = arboretum_create_named_node("/clang/Type/isBuiltinType");
      methods.push_back(data_model.isBuiltinType);
      data_model.isPlaceholderType = arboretum_create_named_node("/clang/Type/isPlaceholderType");
      methods.push_back(data_model.isPlaceholderType);
      data_model.getAsPlaceholderType = arboretum_create_named_node("/clang/Type/getAsPlaceholderType");
      methods.push_back(data_model.getAsPlaceholderType);
      data_model.isNonOverloadPlaceholderType = arboretum_create_named_node("/clang/Type/isNonOverloadPlaceholderType");
      methods.push_back(data_model.isNonOverloadPlaceholderType);
      data_model.isIntegerType = arboretum_create_named_node("/clang/Type/isIntegerType");
      methods.push_back(data_model.isIntegerType);
      data_model.isEnumeralType = arboretum_create_named_node("/clang/Type/isEnumeralType");
      methods.push_back(data_model.isEnumeralType);
      data_model.isScopedEnumeralType = arboretum_create_named_node("/clang/Type/isScopedEnumeralType");
      methods.push_back(data_model.isScopedEnumeralType);
      data_model.isBooleanType = arboretum_create_named_node("/clang/Type/isBooleanType");
      methods.push_back(data_model.isBooleanType);
      data_model.isCharType = arboretum_create_named_node("/clang/Type/isCharType");
      methods.push_back(data_model.isCharType);
      data_model.isWideCharType = arboretum_create_named_node("/clang/Type/isWideCharType");
      methods.push_back(data_model.isWideCharType);
      data_model.isChar8Type = arboretum_create_named_node("/clang/Type/isChar8Type");
      methods.push_back(data_model.isChar8Type);
      data_model.isChar16Type = arboretum_create_named_node("/clang/Type/isChar16Type");
      methods.push_back(data_model.isChar16Type);
      data_model.isChar32Type = arboretum_create_named_node("/clang/Type/isChar32Type");
      methods.push_back(data_model.isChar32Type);
      data_model.isAnyCharacterType = arboretum_create_named_node("/clang/Type/isAnyCharacterType");
      methods.push_back(data_model.isAnyCharacterType);
      data_model.isIntegralOrEnumerationType = arboretum_create_named_node("/clang/Type/isIntegralOrEnumerationType");
      methods.push_back(data_model.isIntegralOrEnumerationType);
      data_model.isIntegralOrUnscopedEnumerationType = arboretum_create_named_node("/clang/Type/isIntegralOrUnscopedEnumerationType");
      methods.push_back(data_model.isIntegralOrUnscopedEnumerationType);
      data_model.isUnscopedEnumerationType = arboretum_create_named_node("/clang/Type/isUnscopedEnumerationType");
      methods.push_back(data_model.isUnscopedEnumerationType);
      data_model.isRealFloatingType = arboretum_create_named_node("/clang/Type/isRealFloatingType");
      methods.push_back(data_model.isRealFloatingType);
      data_model.isComplexType = arboretum_create_named_node("/clang/Type/isComplexType");
      methods.push_back(data_model.isComplexType);
      data_model.isAnyComplexType = arboretum_create_named_node("/clang/Type/isAnyComplexType");
      methods.push_back(data_model.isAnyComplexType);
      data_model.isFloatingType = arboretum_create_named_node("/clang/Type/isFloatingType");
      methods.push_back(data_model.isFloatingType);
      data_model.isHalfType = arboretum_create_named_node("/clang/Type/isHalfType");
      methods.push_back(data_model.isHalfType);
      data_model.isFloat16Type = arboretum_create_named_node("/clang/Type/isFloat16Type");
      methods.push_back(data_model.isFloat16Type);
      data_model.isBFloat16Type = arboretum_create_named_node("/clang/Type/isBFloat16Type");
      methods.push_back(data_model.isBFloat16Type);
      data_model.isFloat128Type = arboretum_create_named_node("/clang/Type/isFloat128Type");
      methods.push_back(data_model.isFloat128Type);
      data_model.isIbm128Type = arboretum_create_named_node("/clang/Type/isIbm128Type");
      methods.push_back(data_model.isIbm128Type);
      data_model.isRealType = arboretum_create_named_node("/clang/Type/isRealType");
      methods.push_back(data_model.isRealType);
      data_model.isArithmeticType = arboretum_create_named_node("/clang/Type/isArithmeticType");
      methods.push_back(data_model.isArithmeticType);
      data_model.isVoidType = arboretum_create_named_node("/clang/Type/isVoidType");
      methods.push_back(data_model.isVoidType);
      data_model.isScalarType = arboretum_create_named_node("/clang/Type/isScalarType");
      methods.push_back(data_model.isScalarType);
      data_model.isAggregateType = arboretum_create_named_node("/clang/Type/isAggregateType");
      methods.push_back(data_model.isAggregateType);
      data_model.isFundamentalType = arboretum_create_named_node("/clang/Type/isFundamentalType");
      methods.push_back(data_model.isFundamentalType);
      data_model.isCompoundType = arboretum_create_named_node("/clang/Type/isCompoundType");
      methods.push_back(data_model.isCompoundType);
      data_model.isFunctionType = arboretum_create_named_node("/clang/Type/isFunctionType");
      methods.push_back(data_model.isFunctionType);
      data_model.isFunctionNoProtoType = arboretum_create_named_node("/clang/Type/isFunctionNoProtoType");
      methods.push_back(data_model.isFunctionNoProtoType);
      data_model.isFunctionProtoType = arboretum_create_named_node("/clang/Type/isFunctionProtoType");
      methods.push_back(data_model.isFunctionProtoType);
      data_model.isPointerType = arboretum_create_named_node("/clang/Type/isPointerType");
      methods.push_back(data_model.isPointerType);
      data_model.isAnyPointerType = arboretum_create_named_node("/clang/Type/isAnyPointerType");
      methods.push_back(data_model.isAnyPointerType);
      data_model.isBlockPointerType = arboretum_create_named_node("/clang/Type/isBlockPointerType");
      methods.push_back(data_model.isBlockPointerType);
      data_model.isVoidPointerType = arboretum_create_named_node("/clang/Type/isVoidPointerType");
      methods.push_back(data_model.isVoidPointerType);
      data_model.isReferenceType = arboretum_create_named_node("/clang/Type/isReferenceType");
      methods.push_back(data_model.isReferenceType);
      data_model.isLValueReferenceType = arboretum_create_named_node("/clang/Type/isLValueReferenceType");
      methods.push_back(data_model.isLValueReferenceType);
      data_model.isRValueReferenceType = arboretum_create_named_node("/clang/Type/isRValueReferenceType");
      methods.push_back(data_model.isRValueReferenceType);
      data_model.isObjectPointerType = arboretum_create_named_node("/clang/Type/isObjectPointerType");
      methods.push_back(data_model.isObjectPointerType);
      data_model.isFunctionPointerType1 = arboretum_create_named_node("/clang/Type/isFunctionPointerType");
      methods.push_back(data_model.isFunctionPointerType1);
      data_model.isFunctionReferenceType = arboretum_create_named_node("/clang/Type/isFunctionReferenceType");
      methods.push_back(data_model.isFunctionReferenceType);
      data_model.isMemberPointerType = arboretum_create_named_node("/clang/Type/isMemberPointerType");
      methods.push_back(data_model.isMemberPointerType);
      data_model.isMemberFunctionPointerType = arboretum_create_named_node("/clang/Type/isMemberFunctionPointerType");
      methods.push_back(data_model.isMemberFunctionPointerType);
      data_model.isMemberDataPointerType = arboretum_create_named_node("/clang/Type/isMemberDataPointerType");
      methods.push_back(data_model.isMemberDataPointerType);
      data_model.isArrayType = arboretum_create_named_node("/clang/Type/isArrayType");
      methods.push_back(data_model.isArrayType);
      data_model.isConstantArrayType = arboretum_create_named_node("/clang/Type/isConstantArrayType");
      methods.push_back(data_model.isConstantArrayType);
      data_model.isIncompleteArrayType = arboretum_create_named_node("/clang/Type/isIncompleteArrayType");
      methods.push_back(data_model.isIncompleteArrayType);
      data_model.isVariableArrayType = arboretum_create_named_node("/clang/Type/isVariableArrayType");
      methods.push_back(data_model.isVariableArrayType);
      data_model.isDependentSizedArrayType = arboretum_create_named_node("/clang/Type/isDependentSizedArrayType");
      methods.push_back(data_model.isDependentSizedArrayType);
      data_model.isRecordType = arboretum_create_named_node("/clang/Type/isRecordType");
      methods.push_back(data_model.isRecordType);
      data_model.isClassType = arboretum_create_named_node("/clang/Type/isClassType");
      methods.push_back(data_model.isClassType);
      data_model.isStructureType = arboretum_create_named_node("/clang/Type/isStructureType");
      methods.push_back(data_model.isStructureType);
      data_model.isObjCBoxableRecordType = arboretum_create_named_node("/clang/Type/isObjCBoxableRecordType");
      methods.push_back(data_model.isObjCBoxableRecordType);
      data_model.isInterfaceType = arboretum_create_named_node("/clang/Type/isInterfaceType");
      methods.push_back(data_model.isInterfaceType);
      data_model.isStructureOrClassType = arboretum_create_named_node("/clang/Type/isStructureOrClassType");
      methods.push_back(data_model.isStructureOrClassType);
      data_model.isUnionType = arboretum_create_named_node("/clang/Type/isUnionType");
      methods.push_back(data_model.isUnionType);
      data_model.isComplexIntegerType = arboretum_create_named_node("/clang/Type/isComplexIntegerType");
      methods.push_back(data_model.isComplexIntegerType);
      data_model.isVectorType = arboretum_create_named_node("/clang/Type/isVectorType");
      methods.push_back(data_model.isVectorType);
      data_model.isExtVectorType = arboretum_create_named_node("/clang/Type/isExtVectorType");
      methods.push_back(data_model.isExtVectorType);
      data_model.isExtVectorBoolType = arboretum_create_named_node("/clang/Type/isExtVectorBoolType");
      methods.push_back(data_model.isExtVectorBoolType);
      data_model.isMatrixType = arboretum_create_named_node("/clang/Type/isMatrixType");
      methods.push_back(data_model.isMatrixType);
      data_model.isConstantMatrixType = arboretum_create_named_node("/clang/Type/isConstantMatrixType");
      methods.push_back(data_model.isConstantMatrixType);
      data_model.isDependentAddressSpaceType = arboretum_create_named_node("/clang/Type/isDependentAddressSpaceType");
      methods.push_back(data_model.isDependentAddressSpaceType);
      data_model.isObjCObjectPointerType = arboretum_create_named_node("/clang/Type/isObjCObjectPointerType");
      methods.push_back(data_model.isObjCObjectPointerType);
      data_model.isObjCRetainableType = arboretum_create_named_node("/clang/Type/isObjCRetainableType");
      methods.push_back(data_model.isObjCRetainableType);
      data_model.isObjCLifetimeType = arboretum_create_named_node("/clang/Type/isObjCLifetimeType");
      methods.push_back(data_model.isObjCLifetimeType);
      data_model.isObjCIndirectLifetimeType = arboretum_create_named_node("/clang/Type/isObjCIndirectLifetimeType");
      methods.push_back(data_model.isObjCIndirectLifetimeType);
      data_model.isObjCNSObjectType = arboretum_create_named_node("/clang/Type/isObjCNSObjectType");
      methods.push_back(data_model.isObjCNSObjectType);
      data_model.isObjCIndependentClassType = arboretum_create_named_node("/clang/Type/isObjCIndependentClassType");
      methods.push_back(data_model.isObjCIndependentClassType);
      data_model.isObjCObjectType = arboretum_create_named_node("/clang/Type/isObjCObjectType");
      methods.push_back(data_model.isObjCObjectType);
      data_model.isObjCQualifiedInterfaceType = arboretum_create_named_node("/clang/Type/isObjCQualifiedInterfaceType");
      methods.push_back(data_model.isObjCQualifiedInterfaceType);
      data_model.isObjCQualifiedIdType = arboretum_create_named_node("/clang/Type/isObjCQualifiedIdType");
      methods.push_back(data_model.isObjCQualifiedIdType);
      data_model.isObjCQualifiedClassType = arboretum_create_named_node("/clang/Type/isObjCQualifiedClassType");
      methods.push_back(data_model.isObjCQualifiedClassType);
      data_model.isObjCObjectOrInterfaceType = arboretum_create_named_node("/clang/Type/isObjCObjectOrInterfaceType");
      methods.push_back(data_model.isObjCObjectOrInterfaceType);
      data_model.isObjCIdType = arboretum_create_named_node("/clang/Type/isObjCIdType");
      methods.push_back(data_model.isObjCIdType);
      data_model.isDecltypeType = arboretum_create_named_node("/clang/Type/isDecltypeType");
      methods.push_back(data_model.isDecltypeType);
      data_model.isObjCInertUnsafeUnretainedType = arboretum_create_named_node("/clang/Type/isObjCInertUnsafeUnretainedType");
      methods.push_back(data_model.isObjCInertUnsafeUnretainedType);
      data_model.isObjCClassType = arboretum_create_named_node("/clang/Type/isObjCClassType");
      methods.push_back(data_model.isObjCClassType);
      data_model.isObjCClassOrClassKindOfType = arboretum_create_named_node("/clang/Type/isObjCClassOrClassKindOfType");
      methods.push_back(data_model.isObjCClassOrClassKindOfType);
      data_model.isObjCSelType = arboretum_create_named_node("/clang/Type/isObjCSelType");
      methods.push_back(data_model.isObjCSelType);
      data_model.isObjCBuiltinType = arboretum_create_named_node("/clang/Type/isObjCBuiltinType");
      methods.push_back(data_model.isObjCBuiltinType);
      data_model.isObjCARCBridgableType = arboretum_create_named_node("/clang/Type/isObjCARCBridgableType");
      methods.push_back(data_model.isObjCARCBridgableType);
      data_model.isCARCBridgableType = arboretum_create_named_node("/clang/Type/isCARCBridgableType");
      methods.push_back(data_model.isCARCBridgableType);
      data_model.isTemplateTypeParmType = arboretum_create_named_node("/clang/Type/isTemplateTypeParmType");
      methods.push_back(data_model.isTemplateTypeParmType);
      data_model.isNullPtrType = arboretum_create_named_node("/clang/Type/isNullPtrType");
      methods.push_back(data_model.isNullPtrType);
      data_model.isNothrowT = arboretum_create_named_node("/clang/Type/isNothrowT");
      methods.push_back(data_model.isNothrowT);
      data_model.isAlignValT = arboretum_create_named_node("/clang/Type/isAlignValT");
      methods.push_back(data_model.isAlignValT);
      data_model.isStdByteType = arboretum_create_named_node("/clang/Type/isStdByteType");
      methods.push_back(data_model.isStdByteType);
      data_model.isAtomicType = arboretum_create_named_node("/clang/Type/isAtomicType");
      methods.push_back(data_model.isAtomicType);
      data_model.isUndeducedAutoType = arboretum_create_named_node("/clang/Type/isUndeducedAutoType");
      methods.push_back(data_model.isUndeducedAutoType);
      data_model.isTypedefNameType = arboretum_create_named_node("/clang/Type/isTypedefNameType");
      methods.push_back(data_model.isTypedefNameType);
      data_model.isOCLImage1dROType = arboretum_create_named_node("/clang/Type/isOCLImage1dROType");
      methods.push_back(data_model.isOCLImage1dROType);
      data_model.isOCLImage1dArrayROType = arboretum_create_named_node("/clang/Type/isOCLImage1dArrayROType");
      methods.push_back(data_model.isOCLImage1dArrayROType);
      data_model.isOCLImage1dBufferROType = arboretum_create_named_node("/clang/Type/isOCLImage1dBufferROType");
      methods.push_back(data_model.isOCLImage1dBufferROType);
      data_model.isOCLImage2dROType = arboretum_create_named_node("/clang/Type/isOCLImage2dROType");
      methods.push_back(data_model.isOCLImage2dROType);
      data_model.isOCLImage2dArrayROType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayROType");
      methods.push_back(data_model.isOCLImage2dArrayROType);
      data_model.isOCLImage2dDepthROType = arboretum_create_named_node("/clang/Type/isOCLImage2dDepthROType");
      methods.push_back(data_model.isOCLImage2dDepthROType);
      data_model.isOCLImage2dArrayDepthROType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayDepthROType");
      methods.push_back(data_model.isOCLImage2dArrayDepthROType);
      data_model.isOCLImage2dMSAAROType = arboretum_create_named_node("/clang/Type/isOCLImage2dMSAAROType");
      methods.push_back(data_model.isOCLImage2dMSAAROType);
      data_model.isOCLImage2dArrayMSAAROType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayMSAAROType");
      methods.push_back(data_model.isOCLImage2dArrayMSAAROType);
      data_model.isOCLImage2dMSAADepthROType = arboretum_create_named_node("/clang/Type/isOCLImage2dMSAADepthROType");
      methods.push_back(data_model.isOCLImage2dMSAADepthROType);
      data_model.isOCLImage2dArrayMSAADepthROType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayMSAADepthROType");
      methods.push_back(data_model.isOCLImage2dArrayMSAADepthROType);
      data_model.isOCLImage3dROType = arboretum_create_named_node("/clang/Type/isOCLImage3dROType");
      methods.push_back(data_model.isOCLImage3dROType);
      data_model.isOCLImage1dWOType = arboretum_create_named_node("/clang/Type/isOCLImage1dWOType");
      methods.push_back(data_model.isOCLImage1dWOType);
      data_model.isOCLImage1dArrayWOType = arboretum_create_named_node("/clang/Type/isOCLImage1dArrayWOType");
      methods.push_back(data_model.isOCLImage1dArrayWOType);
      data_model.isOCLImage1dBufferWOType = arboretum_create_named_node("/clang/Type/isOCLImage1dBufferWOType");
      methods.push_back(data_model.isOCLImage1dBufferWOType);
      data_model.isOCLImage2dWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dWOType");
      methods.push_back(data_model.isOCLImage2dWOType);
      data_model.isOCLImage2dArrayWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayWOType");
      methods.push_back(data_model.isOCLImage2dArrayWOType);
      data_model.isOCLImage2dDepthWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dDepthWOType");
      methods.push_back(data_model.isOCLImage2dDepthWOType);
      data_model.isOCLImage2dArrayDepthWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayDepthWOType");
      methods.push_back(data_model.isOCLImage2dArrayDepthWOType);
      data_model.isOCLImage2dMSAAWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dMSAAWOType");
      methods.push_back(data_model.isOCLImage2dMSAAWOType);
      data_model.isOCLImage2dArrayMSAAWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayMSAAWOType");
      methods.push_back(data_model.isOCLImage2dArrayMSAAWOType);
      data_model.isOCLImage2dMSAADepthWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dMSAADepthWOType");
      methods.push_back(data_model.isOCLImage2dMSAADepthWOType);
      data_model.isOCLImage2dArrayMSAADepthWOType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayMSAADepthWOType");
      methods.push_back(data_model.isOCLImage2dArrayMSAADepthWOType);
      data_model.isOCLImage3dWOType = arboretum_create_named_node("/clang/Type/isOCLImage3dWOType");
      methods.push_back(data_model.isOCLImage3dWOType);
      data_model.isOCLImage1dRWType = arboretum_create_named_node("/clang/Type/isOCLImage1dRWType");
      methods.push_back(data_model.isOCLImage1dRWType);
      data_model.isOCLImage1dArrayRWType = arboretum_create_named_node("/clang/Type/isOCLImage1dArrayRWType");
      methods.push_back(data_model.isOCLImage1dArrayRWType);
      data_model.isOCLImage1dBufferRWType = arboretum_create_named_node("/clang/Type/isOCLImage1dBufferRWType");
      methods.push_back(data_model.isOCLImage1dBufferRWType);
      data_model.isOCLImage2dRWType = arboretum_create_named_node("/clang/Type/isOCLImage2dRWType");
      methods.push_back(data_model.isOCLImage2dRWType);
      data_model.isOCLImage2dArrayRWType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayRWType");
      methods.push_back(data_model.isOCLImage2dArrayRWType);
      data_model.isOCLImage2dDepthRWType = arboretum_create_named_node("/clang/Type/isOCLImage2dDepthRWType");
      methods.push_back(data_model.isOCLImage2dDepthRWType);
      data_model.isOCLImage2dArrayDepthRWType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayDepthRWType");
      methods.push_back(data_model.isOCLImage2dArrayDepthRWType);
      data_model.isOCLImage2dMSAARWType = arboretum_create_named_node("/clang/Type/isOCLImage2dMSAARWType");
      methods.push_back(data_model.isOCLImage2dMSAARWType);
      data_model.isOCLImage2dArrayMSAARWType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayMSAARWType");
      methods.push_back(data_model.isOCLImage2dArrayMSAARWType);
      data_model.isOCLImage2dMSAADepthRWType = arboretum_create_named_node("/clang/Type/isOCLImage2dMSAADepthRWType");
      methods.push_back(data_model.isOCLImage2dMSAADepthRWType);
      data_model.isOCLImage2dArrayMSAADepthRWType = arboretum_create_named_node("/clang/Type/isOCLImage2dArrayMSAADepthRWType");
      methods.push_back(data_model.isOCLImage2dArrayMSAADepthRWType);
      data_model.isOCLImage3dRWType = arboretum_create_named_node("/clang/Type/isOCLImage3dRWType");
      methods.push_back(data_model.isOCLImage3dRWType);
      data_model.isImageType = arboretum_create_named_node("/clang/Type/isImageType");
      methods.push_back(data_model.isImageType);
      data_model.isSamplerT = arboretum_create_named_node("/clang/Type/isSamplerT");
      methods.push_back(data_model.isSamplerT);
      data_model.isEventT = arboretum_create_named_node("/clang/Type/isEventT");
      methods.push_back(data_model.isEventT);
      data_model.isClkEventT = arboretum_create_named_node("/clang/Type/isClkEventT");
      methods.push_back(data_model.isClkEventT);
      data_model.isQueueT = arboretum_create_named_node("/clang/Type/isQueueT");
      methods.push_back(data_model.isQueueT);
      data_model.isReserveIDT = arboretum_create_named_node("/clang/Type/isReserveIDT");
      methods.push_back(data_model.isReserveIDT);
      data_model.isOCLIntelSubgroupAVCMcePayloadType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCMcePayloadType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCMcePayloadType);
      data_model.isOCLIntelSubgroupAVCImePayloadType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCImePayloadType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCImePayloadType);
      data_model.isOCLIntelSubgroupAVCRefPayloadType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCRefPayloadType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCRefPayloadType);
      data_model.isOCLIntelSubgroupAVCSicPayloadType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCSicPayloadType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCSicPayloadType);
      data_model.isOCLIntelSubgroupAVCMceResultType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCMceResultType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCMceResultType);
      data_model.isOCLIntelSubgroupAVCImeResultType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCImeResultType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCImeResultType);
      data_model.isOCLIntelSubgroupAVCRefResultType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCRefResultType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCRefResultType);
      data_model.isOCLIntelSubgroupAVCSicResultType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCSicResultType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCSicResultType);
      data_model.isOCLIntelSubgroupAVCImeResultSingleReferenceStreamoutType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCImeResultSingleReferenceStreamoutType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCImeResultSingleReferenceStreamoutType);
      data_model.isOCLIntelSubgroupAVCImeResultDualReferenceStreamoutType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCImeResultDualReferenceStreamoutType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCImeResultDualReferenceStreamoutType);
      data_model.isOCLIntelSubgroupAVCImeSingleReferenceStreaminType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCImeSingleReferenceStreaminType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCImeSingleReferenceStreaminType);
      data_model.isOCLIntelSubgroupAVCImeDualReferenceStreaminType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCImeDualReferenceStreaminType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCImeDualReferenceStreaminType);
      data_model.isOCLIntelSubgroupAVCType = arboretum_create_named_node("/clang/Type/isOCLIntelSubgroupAVCType");
      methods.push_back(data_model.isOCLIntelSubgroupAVCType);
      data_model.isOCLExtOpaqueType = arboretum_create_named_node("/clang/Type/isOCLExtOpaqueType");
      methods.push_back(data_model.isOCLExtOpaqueType);
      data_model.isPipeType = arboretum_create_named_node("/clang/Type/isPipeType");
      methods.push_back(data_model.isPipeType);
      data_model.isBitIntType = arboretum_create_named_node("/clang/Type/isBitIntType");
      methods.push_back(data_model.isBitIntType);
      data_model.isOpenCLSpecificType = arboretum_create_named_node("/clang/Type/isOpenCLSpecificType");
      methods.push_back(data_model.isOpenCLSpecificType);
      data_model.isObjCARCImplicitlyUnretainedType = arboretum_create_named_node("/clang/Type/isObjCARCImplicitlyUnretainedType");
      methods.push_back(data_model.isObjCARCImplicitlyUnretainedType);
      data_model.isCUDADeviceBuiltinSurfaceType = arboretum_create_named_node("/clang/Type/isCUDADeviceBuiltinSurfaceType");
      methods.push_back(data_model.isCUDADeviceBuiltinSurfaceType);
      data_model.isCUDADeviceBuiltinTextureType = arboretum_create_named_node("/clang/Type/isCUDADeviceBuiltinTextureType");
      methods.push_back(data_model.isCUDADeviceBuiltinTextureType);
      data_model.getObjCARCImplicitLifetime = arboretum_create_named_node("/clang/Type/getObjCARCImplicitLifetime");
      methods.push_back(data_model.getObjCARCImplicitLifetime);
      data_model.getScalarTypeKind = arboretum_create_named_node("/clang/Type/getScalarTypeKind");
      methods.push_back(data_model.getScalarTypeKind);
      data_model.getDependence1 = arboretum_create_named_node("/clang/Type/getDependence");
      methods.push_back(data_model.getDependence1);
      data_model.containsErrors1 = arboretum_create_named_node("/clang/Type/containsErrors");
      methods.push_back(data_model.containsErrors1);
      data_model.isDependentType1 = arboretum_create_named_node("/clang/Type/isDependentType");
      methods.push_back(data_model.isDependentType1);
      data_model.isInstantiationDependentType = arboretum_create_named_node("/clang/Type/isInstantiationDependentType");
      methods.push_back(data_model.isInstantiationDependentType);
      data_model.isUndeducedType = arboretum_create_named_node("/clang/Type/isUndeducedType");
      methods.push_back(data_model.isUndeducedType);
      data_model.isVariablyModifiedType = arboretum_create_named_node("/clang/Type/isVariablyModifiedType");
      methods.push_back(data_model.isVariablyModifiedType);
      data_model.hasSizedVLAType = arboretum_create_named_node("/clang/Type/hasSizedVLAType");
      methods.push_back(data_model.hasSizedVLAType);
      data_model.hasUnnamedOrLocalType = arboretum_create_named_node("/clang/Type/hasUnnamedOrLocalType");
      methods.push_back(data_model.hasUnnamedOrLocalType);
      data_model.isOverloadableType = arboretum_create_named_node("/clang/Type/isOverloadableType");
      methods.push_back(data_model.isOverloadableType);
      data_model.isElaboratedTypeSpecifier = arboretum_create_named_node("/clang/Type/isElaboratedTypeSpecifier");
      methods.push_back(data_model.isElaboratedTypeSpecifier);
      data_model.canDecayToPointerType = arboretum_create_named_node("/clang/Type/canDecayToPointerType");
      methods.push_back(data_model.canDecayToPointerType);
      data_model.hasPointerRepresentation = arboretum_create_named_node("/clang/Type/hasPointerRepresentation");
      methods.push_back(data_model.hasPointerRepresentation);
      data_model.hasObjCPointerRepresentation = arboretum_create_named_node("/clang/Type/hasObjCPointerRepresentation");
      methods.push_back(data_model.hasObjCPointerRepresentation);
      data_model.hasIntegerRepresentation = arboretum_create_named_node("/clang/Type/hasIntegerRepresentation");
      methods.push_back(data_model.hasIntegerRepresentation);
      data_model.hasSignedIntegerRepresentation = arboretum_create_named_node("/clang/Type/hasSignedIntegerRepresentation");
      methods.push_back(data_model.hasSignedIntegerRepresentation);
      data_model.hasUnsignedIntegerRepresentation = arboretum_create_named_node("/clang/Type/hasUnsignedIntegerRepresentation");
      methods.push_back(data_model.hasUnsignedIntegerRepresentation);
      data_model.hasFloatingRepresentation = arboretum_create_named_node("/clang/Type/hasFloatingRepresentation");
      methods.push_back(data_model.hasFloatingRepresentation);
      data_model.getAsStructureType = arboretum_create_named_node("/clang/Type/getAsStructureType");
      methods.push_back(data_model.getAsStructureType);
      data_model.getAsUnionType = arboretum_create_named_node("/clang/Type/getAsUnionType");
      methods.push_back(data_model.getAsUnionType);
      data_model.getAsComplexIntegerType = arboretum_create_named_node("/clang/Type/getAsComplexIntegerType");
      methods.push_back(data_model.getAsComplexIntegerType);
      data_model.getAsObjCInterfaceType = arboretum_create_named_node("/clang/Type/getAsObjCInterfaceType");
      methods.push_back(data_model.getAsObjCInterfaceType);
      data_model.getAsObjCInterfacePointerType = arboretum_create_named_node("/clang/Type/getAsObjCInterfacePointerType");
      methods.push_back(data_model.getAsObjCInterfacePointerType);
      data_model.getAsObjCQualifiedIdType = arboretum_create_named_node("/clang/Type/getAsObjCQualifiedIdType");
      methods.push_back(data_model.getAsObjCQualifiedIdType);
      data_model.getAsObjCQualifiedClassType = arboretum_create_named_node("/clang/Type/getAsObjCQualifiedClassType");
      methods.push_back(data_model.getAsObjCQualifiedClassType);
      data_model.getAsObjCQualifiedInterfaceType = arboretum_create_named_node("/clang/Type/getAsObjCQualifiedInterfaceType");
      methods.push_back(data_model.getAsObjCQualifiedInterfaceType);
      data_model.getAsCXXRecordDecl = arboretum_create_named_node("/clang/Type/getAsCXXRecordDecl");
      methods.push_back(data_model.getAsCXXRecordDecl);
      data_model.getAsRecordDecl = arboretum_create_named_node("/clang/Type/getAsRecordDecl");
      methods.push_back(data_model.getAsRecordDecl);
      data_model.getAsTagDecl = arboretum_create_named_node("/clang/Type/getAsTagDecl");
      methods.push_back(data_model.getAsTagDecl);
      data_model.getPointeeCXXRecordDecl = arboretum_create_named_node("/clang/Type/getPointeeCXXRecordDecl");
      methods.push_back(data_model.getPointeeCXXRecordDecl);
      data_model.getContainedDeducedType = arboretum_create_named_node("/clang/Type/getContainedDeducedType");
      methods.push_back(data_model.getContainedDeducedType);
      data_model.getContainedAutoType = arboretum_create_named_node("/clang/Type/getContainedAutoType");
      methods.push_back(data_model.getContainedAutoType);
      data_model.hasAutoForTrailingReturnType = arboretum_create_named_node("/clang/Type/hasAutoForTrailingReturnType");
      methods.push_back(data_model.hasAutoForTrailingReturnType);
      data_model.getAsArrayTypeUnsafe = arboretum_create_named_node("/clang/Type/getAsArrayTypeUnsafe");
      methods.push_back(data_model.getAsArrayTypeUnsafe);
      data_model.castAsArrayTypeUnsafe = arboretum_create_named_node("/clang/Type/castAsArrayTypeUnsafe");
      methods.push_back(data_model.castAsArrayTypeUnsafe);
      data_model.getBaseElementTypeUnsafe = arboretum_create_named_node("/clang/Type/getBaseElementTypeUnsafe");
      methods.push_back(data_model.getBaseElementTypeUnsafe);
      data_model.getArrayElementTypeNoTypeQual = arboretum_create_named_node("/clang/Type/getArrayElementTypeNoTypeQual");
      methods.push_back(data_model.getArrayElementTypeNoTypeQual);
      data_model.getPointeeOrArrayElementType = arboretum_create_named_node("/clang/Type/getPointeeOrArrayElementType");
      methods.push_back(data_model.getPointeeOrArrayElementType);
      data_model.getPointeeType2 = arboretum_create_named_node("/clang/Type/getPointeeType");
      methods.push_back(data_model.getPointeeType2);
      data_model.getUnqualifiedDesugaredType = arboretum_create_named_node("/clang/Type/getUnqualifiedDesugaredType");
      methods.push_back(data_model.getUnqualifiedDesugaredType);
      data_model.isSignedIntegerType = arboretum_create_named_node("/clang/Type/isSignedIntegerType");
      methods.push_back(data_model.isSignedIntegerType);
      data_model.isUnsignedIntegerType = arboretum_create_named_node("/clang/Type/isUnsignedIntegerType");
      methods.push_back(data_model.isUnsignedIntegerType);
      data_model.isSignedIntegerOrEnumerationType = arboretum_create_named_node("/clang/Type/isSignedIntegerOrEnumerationType");
      methods.push_back(data_model.isSignedIntegerOrEnumerationType);
      data_model.isUnsignedIntegerOrEnumerationType = arboretum_create_named_node("/clang/Type/isUnsignedIntegerOrEnumerationType");
      methods.push_back(data_model.isUnsignedIntegerOrEnumerationType);
      data_model.isFixedPointType = arboretum_create_named_node("/clang/Type/isFixedPointType");
      methods.push_back(data_model.isFixedPointType);
      data_model.isFixedPointOrIntegerType = arboretum_create_named_node("/clang/Type/isFixedPointOrIntegerType");
      methods.push_back(data_model.isFixedPointOrIntegerType);
      data_model.isSaturatedFixedPointType = arboretum_create_named_node("/clang/Type/isSaturatedFixedPointType");
      methods.push_back(data_model.isSaturatedFixedPointType);
      data_model.isUnsaturatedFixedPointType = arboretum_create_named_node("/clang/Type/isUnsaturatedFixedPointType");
      methods.push_back(data_model.isUnsaturatedFixedPointType);
      data_model.isSignedFixedPointType = arboretum_create_named_node("/clang/Type/isSignedFixedPointType");
      methods.push_back(data_model.isSignedFixedPointType);
      data_model.isUnsignedFixedPointType = arboretum_create_named_node("/clang/Type/isUnsignedFixedPointType");
      methods.push_back(data_model.isUnsignedFixedPointType);
      data_model.isConstantSizeType = arboretum_create_named_node("/clang/Type/isConstantSizeType");
      methods.push_back(data_model.isConstantSizeType);
      data_model.isSpecifierType = arboretum_create_named_node("/clang/Type/isSpecifierType");
      methods.push_back(data_model.isSpecifierType);
      data_model.getLinkage = arboretum_create_named_node("/clang/Type/getLinkage");
      methods.push_back(data_model.getLinkage);
      data_model.getVisibility1 = arboretum_create_named_node("/clang/Type/getVisibility");
      methods.push_back(data_model.getVisibility1);
      data_model.isVisibilityExplicit = arboretum_create_named_node("/clang/Type/isVisibilityExplicit");
      methods.push_back(data_model.isVisibilityExplicit);
      data_model.getLinkageAndVisibility1 = arboretum_create_named_node("/clang/Type/getLinkageAndVisibility");
      methods.push_back(data_model.getLinkageAndVisibility1);
      data_model.isLinkageValid1 = arboretum_create_named_node("/clang/Type/isLinkageValid");
      methods.push_back(data_model.isLinkageValid1);
      data_model.getNullability = arboretum_create_named_node("/clang/Type/getNullability");
      methods.push_back(data_model.getNullability);
      data_model.acceptsObjCTypeParams = arboretum_create_named_node("/clang/Type/acceptsObjCTypeParams");
      methods.push_back(data_model.acceptsObjCTypeParams);
      data_model.getTypeClassName = arboretum_create_named_node("/clang/Type/getTypeClassName");
      methods.push_back(data_model.getTypeClassName);
      data_model.getCanonicalTypeInternal = arboretum_create_named_node("/clang/Type/getCanonicalTypeInternal");
      methods.push_back(data_model.getCanonicalTypeInternal);
      data_model.getCanonicalTypeUnqualified = arboretum_create_named_node("/clang/Type/getCanonicalTypeUnqualified");
      methods.push_back(data_model.getCanonicalTypeUnqualified);
    arboretum_create_edge(data_model.Type, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AnalyzerNoReturnAttr = arboretum_create_named_node("/clang/AnalyzerNoReturnAttr");
  arboretum_create_edge(data_model.AnalyzerNoReturnAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AnalyzerNoReturnAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RenderScriptKernelAttr = arboretum_create_named_node("/clang/RenderScriptKernelAttr");
  arboretum_create_edge(data_model.RenderScriptKernelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RenderScriptKernelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AssumeAlignedAttr = arboretum_create_named_node("/clang/AssumeAlignedAttr");
  arboretum_create_edge(data_model.AssumeAlignedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AssumeAlignedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PointerTypeLoc = arboretum_create_named_node("/clang/PointerTypeLoc");
  arboretum_create_edge(data_model.PointerTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getStarLoc = arboretum_create_named_node("/clang/PointerTypeLoc/getStarLoc");
      methods.push_back(data_model.getStarLoc);
    arboretum_create_edge(data_model.PointerTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeNonNullAttr = arboretum_create_named_node("/clang/TypeNonNullAttr");
  arboretum_create_edge(data_model.TypeNonNullAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeNonNullAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SYCLSpecialClassAttr = arboretum_create_named_node("/clang/SYCLSpecialClassAttr");
  arboretum_create_edge(data_model.SYCLSpecialClassAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SYCLSpecialClassAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArgumentWithTypeTagAttr = arboretum_create_named_node("/clang/ArgumentWithTypeTagAttr");
  arboretum_create_edge(data_model.ArgumentWithTypeTagAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArgumentWithTypeTagAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoDerefAttr = arboretum_create_named_node("/clang/NoDerefAttr");
  arboretum_create_edge(data_model.NoDerefAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoDerefAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AArch64VectorPcsAttr = arboretum_create_named_node("/clang/AArch64VectorPcsAttr");
  arboretum_create_edge(data_model.AArch64VectorPcsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AArch64VectorPcsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmStreamingCompatibleAttr = arboretum_create_named_node("/clang/ArmStreamingCompatibleAttr");
  arboretum_create_edge(data_model.ArmStreamingCompatibleAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmStreamingCompatibleAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentTemplateSpecializationType = arboretum_create_named_node("/clang/DependentTemplateSpecializationType");
  arboretum_create_edge(data_model.DependentTemplateSpecializationType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getQualifier9 = arboretum_create_named_node("/clang/DependentTemplateSpecializationType/getQualifier");
      methods.push_back(data_model.getQualifier9);
      data_model.getIdentifier2 = arboretum_create_named_node("/clang/DependentTemplateSpecializationType/getIdentifier");
      methods.push_back(data_model.getIdentifier2);
      data_model.template_arguments4 = arboretum_create_named_node("/clang/DependentTemplateSpecializationType/template_arguments");
      methods.push_back(data_model.template_arguments4);
      data_model.isSugared7 = arboretum_create_named_node("/clang/DependentTemplateSpecializationType/isSugared");
      methods.push_back(data_model.isSugared7);
      data_model.desugar7 = arboretum_create_named_node("/clang/DependentTemplateSpecializationType/desugar");
      methods.push_back(data_model.desugar7);
    arboretum_create_edge(data_model.DependentTemplateSpecializationType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLLocalAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLLocalAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLLocalAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLLocalAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SEHLeaveStmt = arboretum_create_named_node("/clang/SEHLeaveStmt");
  arboretum_create_edge(data_model.SEHLeaveStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLeaveLoc = arboretum_create_named_node("/clang/SEHLeaveStmt/getLeaveLoc");
      methods.push_back(data_model.getLeaveLoc);
      data_model.getBeginLoc121 = arboretum_create_named_node("/clang/SEHLeaveStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc121);
      data_model.getEndLoc123 = arboretum_create_named_node("/clang/SEHLeaveStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc123);
      data_model.children227 = arboretum_create_named_node("/clang/SEHLeaveStmt/children");
      methods.push_back(data_model.children227);
    arboretum_create_edge(data_model.SEHLeaveStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCInertUnsafeUnretainedAttr = arboretum_create_named_node("/clang/ObjCInertUnsafeUnretainedAttr");
  arboretum_create_edge(data_model.ObjCInertUnsafeUnretainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCInertUnsafeUnretainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AcquireCapabilityAttr = arboretum_create_named_node("/clang/AcquireCapabilityAttr");
  arboretum_create_edge(data_model.AcquireCapabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AcquireCapabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMasterDirective = arboretum_create_named_node("/clang/OMPMasterDirective");
  arboretum_create_edge(data_model.OMPMasterDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMasterDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLAnnotationAttr = arboretum_create_named_node("/clang/HLSLAnnotationAttr");
  arboretum_create_edge(data_model.HLSLAnnotationAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLAnnotationAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReturnsTwiceAttr = arboretum_create_named_node("/clang/ReturnsTwiceAttr");
  arboretum_create_edge(data_model.ReturnsTwiceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReturnsTwiceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CallableWhenAttr = arboretum_create_named_node("/clang/CallableWhenAttr");
  arboretum_create_edge(data_model.CallableWhenAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CallableWhenAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AlwaysDestroyAttr = arboretum_create_named_node("/clang/AlwaysDestroyAttr");
  arboretum_create_edge(data_model.AlwaysDestroyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AlwaysDestroyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParamTypestateAttr = arboretum_create_named_node("/clang/ParamTypestateAttr");
  arboretum_create_edge(data_model.ParamTypestateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ParamTypestateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BPFPreserveStaticOffsetAttr = arboretum_create_named_node("/clang/BPFPreserveStaticOffsetAttr");
  arboretum_create_edge(data_model.BPFPreserveStaticOffsetAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BPFPreserveStaticOffsetAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateTypeParmType = arboretum_create_named_node("/clang/TemplateTypeParmType");
  arboretum_create_edge(data_model.TemplateTypeParmType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDepth1 = arboretum_create_named_node("/clang/TemplateTypeParmType/getDepth");
      methods.push_back(data_model.getDepth1);
      data_model.getIndex2 = arboretum_create_named_node("/clang/TemplateTypeParmType/getIndex");
      methods.push_back(data_model.getIndex2);
      data_model.isParameterPack5 = arboretum_create_named_node("/clang/TemplateTypeParmType/isParameterPack");
      methods.push_back(data_model.isParameterPack5);
      data_model.getDecl5 = arboretum_create_named_node("/clang/TemplateTypeParmType/getDecl");
      methods.push_back(data_model.getDecl5);
      data_model.getIdentifier3 = arboretum_create_named_node("/clang/TemplateTypeParmType/getIdentifier");
      methods.push_back(data_model.getIdentifier3);
      data_model.isSugared8 = arboretum_create_named_node("/clang/TemplateTypeParmType/isSugared");
      methods.push_back(data_model.isSugared8);
      data_model.desugar8 = arboretum_create_named_node("/clang/TemplateTypeParmType/desugar");
      methods.push_back(data_model.desugar8);
    arboretum_create_edge(data_model.TemplateTypeParmType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AllocAlignAttr = arboretum_create_named_node("/clang/AllocAlignAttr");
  arboretum_create_edge(data_model.AllocAlignAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AllocAlignAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoCommonAttr = arboretum_create_named_node("/clang/NoCommonAttr");
  arboretum_create_edge(data_model.NoCommonAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoCommonAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaClangDataSectionAttr = arboretum_create_named_node("/clang/PragmaClangDataSectionAttr");
  arboretum_create_edge(data_model.PragmaClangDataSectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PragmaClangDataSectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VisibilityAttr = arboretum_create_named_node("/clang/VisibilityAttr");
  arboretum_create_edge(data_model.VisibilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.VisibilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetSimdDirective = arboretum_create_named_node("/clang/OMPTargetSimdDirective");
  arboretum_create_edge(data_model.OMPTargetSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFICanonicalJumpTableAttr = arboretum_create_named_node("/clang/CFICanonicalJumpTableAttr");
  arboretum_create_edge(data_model.CFICanonicalJumpTableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFICanonicalJumpTableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeAttr = arboretum_create_named_node("/clang/TypeAttr");
  arboretum_create_edge(data_model.TypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentSizedMatrixTypeLoc = arboretum_create_named_node("/clang/DependentSizedMatrixTypeLoc");
  arboretum_create_edge(data_model.DependentSizedMatrixTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DependentSizedMatrixTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VarTemplatePartialSpecializationDecl = arboretum_create_named_node("/clang/VarTemplatePartialSpecializationDecl");
  arboretum_create_edge(data_model.VarTemplatePartialSpecializationDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateParameters1 = arboretum_create_named_node("/clang/VarTemplatePartialSpecializationDecl/getTemplateParameters");
      methods.push_back(data_model.getTemplateParameters1);
      data_model.getTemplateArgsAsWritten1 = arboretum_create_named_node("/clang/VarTemplatePartialSpecializationDecl/getTemplateArgsAsWritten");
      methods.push_back(data_model.getTemplateArgsAsWritten1);
      data_model.hasAssociatedConstraints1 = arboretum_create_named_node("/clang/VarTemplatePartialSpecializationDecl/hasAssociatedConstraints");
      methods.push_back(data_model.hasAssociatedConstraints1);
      data_model.getInstantiatedFromMember = arboretum_create_named_node("/clang/VarTemplatePartialSpecializationDecl/getInstantiatedFromMember");
      methods.push_back(data_model.getInstantiatedFromMember);
      data_model.getSourceRange41 = arboretum_create_named_node("/clang/VarTemplatePartialSpecializationDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange41);
    arboretum_create_edge(data_model.VarTemplatePartialSpecializationDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLKernelAttr = arboretum_create_named_node("/clang/OpenCLKernelAttr");
  arboretum_create_edge(data_model.OpenCLKernelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLKernelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LoopHintAttr = arboretum_create_named_node("/clang/LoopHintAttr");
  arboretum_create_edge(data_model.LoopHintAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LoopHintAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AssertCapabilityAttr = arboretum_create_named_node("/clang/AssertCapabilityAttr");
  arboretum_create_edge(data_model.AssertCapabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AssertCapabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AliasAttr = arboretum_create_named_node("/clang/AliasAttr");
  arboretum_create_edge(data_model.AliasAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AliasAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmPreservesAttr = arboretum_create_named_node("/clang/ArmPreservesAttr");
  arboretum_create_edge(data_model.ArmPreservesAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmPreservesAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmStreamingAttr = arboretum_create_named_node("/clang/ArmStreamingAttr");
  arboretum_create_edge(data_model.ArmStreamingAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmStreamingAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExtVectorType = arboretum_create_named_node("/clang/ExtVectorType");
  arboretum_create_edge(data_model.ExtVectorType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared9 = arboretum_create_named_node("/clang/ExtVectorType/isSugared");
      methods.push_back(data_model.isSugared9);
      data_model.desugar9 = arboretum_create_named_node("/clang/ExtVectorType/desugar");
      methods.push_back(data_model.desugar9);
    arboretum_create_edge(data_model.ExtVectorType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VectorTypeLoc = arboretum_create_named_node("/clang/VectorTypeLoc");
  arboretum_create_edge(data_model.VectorTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameLoc2 = arboretum_create_named_node("/clang/VectorTypeLoc/getNameLoc");
      methods.push_back(data_model.getNameLoc2);
      data_model.getLocalSourceRange4 = arboretum_create_named_node("/clang/VectorTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange4);
      data_model.getElementLoc1 = arboretum_create_named_node("/clang/VectorTypeLoc/getElementLoc");
      methods.push_back(data_model.getElementLoc1);
      data_model.getInnerType3 = arboretum_create_named_node("/clang/VectorTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType3);
    arboretum_create_edge(data_model.VectorTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AVRSignalAttr = arboretum_create_named_node("/clang/AVRSignalAttr");
  arboretum_create_edge(data_model.AVRSignalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AVRSignalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CapturedDecl = arboretum_create_named_node("/clang/CapturedDecl");
  arboretum_create_edge(data_model.CapturedDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBody17 = arboretum_create_named_node("/clang/CapturedDecl/getBody");
      methods.push_back(data_model.getBody17);
      data_model.isNothrow1 = arboretum_create_named_node("/clang/CapturedDecl/isNothrow");
      methods.push_back(data_model.isNothrow1);
      data_model.getNumParams3 = arboretum_create_named_node("/clang/CapturedDecl/getNumParams");
      methods.push_back(data_model.getNumParams3);
      data_model.parameters4 = arboretum_create_named_node("/clang/CapturedDecl/parameters");
      methods.push_back(data_model.parameters4);
      data_model.getContextParam = arboretum_create_named_node("/clang/CapturedDecl/getContextParam");
      methods.push_back(data_model.getContextParam);
      data_model.getContextParamPosition = arboretum_create_named_node("/clang/CapturedDecl/getContextParamPosition");
      methods.push_back(data_model.getContextParamPosition);
      data_model.param_begin4 = arboretum_create_named_node("/clang/CapturedDecl/param_begin");
      methods.push_back(data_model.param_begin4);
      data_model.param_end4 = arboretum_create_named_node("/clang/CapturedDecl/param_end");
      methods.push_back(data_model.param_end4);
    arboretum_create_edge(data_model.CapturedDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypedefDecl = arboretum_create_named_node("/clang/TypedefDecl");
  arboretum_create_edge(data_model.TypedefDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange42 = arboretum_create_named_node("/clang/TypedefDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange42);
    arboretum_create_edge(data_model.TypedefDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TargetAttr = arboretum_create_named_node("/clang/TargetAttr");
  arboretum_create_edge(data_model.TargetAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TargetAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NVPTXKernelAttr = arboretum_create_named_node("/clang/NVPTXKernelAttr");
  arboretum_create_edge(data_model.NVPTXKernelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NVPTXKernelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Ptr64Attr = arboretum_create_named_node("/clang/Ptr64Attr");
  arboretum_create_edge(data_model.Ptr64Attr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.Ptr64Attr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BuiltinBitCastExpr = arboretum_create_named_node("/clang/BuiltinBitCastExpr");
  arboretum_create_edge(data_model.BuiltinBitCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc122 = arboretum_create_named_node("/clang/BuiltinBitCastExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc122);
      data_model.getEndLoc124 = arboretum_create_named_node("/clang/BuiltinBitCastExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc124);
    arboretum_create_edge(data_model.BuiltinBitCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstructorUsingShadowDecl = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl");
  arboretum_create_edge(data_model.ConstructorUsingShadowDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getIntroducer1 = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/getIntroducer");
      methods.push_back(data_model.getIntroducer1);
      data_model.getParent4 = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/getParent");
      methods.push_back(data_model.getParent4);
      data_model.getNominatedBaseClassShadowDecl = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/getNominatedBaseClassShadowDecl");
      methods.push_back(data_model.getNominatedBaseClassShadowDecl);
      data_model.getConstructedBaseClassShadowDecl = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/getConstructedBaseClassShadowDecl");
      methods.push_back(data_model.getConstructedBaseClassShadowDecl);
      data_model.getNominatedBaseClass = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/getNominatedBaseClass");
      methods.push_back(data_model.getNominatedBaseClass);
      data_model.getConstructedBaseClass = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/getConstructedBaseClass");
      methods.push_back(data_model.getConstructedBaseClass);
      data_model.constructsVirtualBase = arboretum_create_named_node("/clang/ConstructorUsingShadowDecl/constructsVirtualBase");
      methods.push_back(data_model.constructsVirtualBase);
    arboretum_create_edge(data_model.ConstructorUsingShadowDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoMergeAttr = arboretum_create_named_node("/clang/NoMergeAttr");
  arboretum_create_edge(data_model.NoMergeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoMergeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCIvarDecl = arboretum_create_named_node("/clang/ObjCIvarDecl");
  arboretum_create_edge(data_model.ObjCIvarDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCIvarDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCaptureKindAttr = arboretum_create_named_node("/clang/OMPCaptureKindAttr");
  arboretum_create_edge(data_model.OMPCaptureKindAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCaptureKindAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WebAssemblyExportNameAttr = arboretum_create_named_node("/clang/WebAssemblyExportNameAttr");
  arboretum_create_edge(data_model.WebAssemblyExportNameAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WebAssemblyExportNameAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDAGlobalAttr = arboretum_create_named_node("/clang/CUDAGlobalAttr");
  arboretum_create_edge(data_model.CUDAGlobalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDAGlobalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GotoStmt = arboretum_create_named_node("/clang/GotoStmt");
  arboretum_create_edge(data_model.GotoStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLabel2 = arboretum_create_named_node("/clang/GotoStmt/getLabel");
      methods.push_back(data_model.getLabel2);
      data_model.getGotoLoc = arboretum_create_named_node("/clang/GotoStmt/getGotoLoc");
      methods.push_back(data_model.getGotoLoc);
      data_model.getLabelLoc1 = arboretum_create_named_node("/clang/GotoStmt/getLabelLoc");
      methods.push_back(data_model.getLabelLoc1);
      data_model.getBeginLoc123 = arboretum_create_named_node("/clang/GotoStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc123);
      data_model.getEndLoc125 = arboretum_create_named_node("/clang/GotoStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc125);
      data_model.children229 = arboretum_create_named_node("/clang/GotoStmt/children");
      methods.push_back(data_model.children229);
    arboretum_create_edge(data_model.GotoStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLConstantAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLConstantAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLConstantAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLConstantAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCEncodeExpr = arboretum_create_named_node("/clang/ObjCEncodeExpr");
  arboretum_create_edge(data_model.ObjCEncodeExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCEncodeExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MacroQualifiedType = arboretum_create_named_node("/clang/MacroQualifiedType");
  arboretum_create_edge(data_model.MacroQualifiedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getMacroIdentifier = arboretum_create_named_node("/clang/MacroQualifiedType/getMacroIdentifier");
      methods.push_back(data_model.getMacroIdentifier);
      data_model.getUnderlyingType1 = arboretum_create_named_node("/clang/MacroQualifiedType/getUnderlyingType");
      methods.push_back(data_model.getUnderlyingType1);
      data_model.getModifiedType = arboretum_create_named_node("/clang/MacroQualifiedType/getModifiedType");
      methods.push_back(data_model.getModifiedType);
      data_model.isSugared10 = arboretum_create_named_node("/clang/MacroQualifiedType/isSugared");
      methods.push_back(data_model.isSugared10);
      data_model.desugar10 = arboretum_create_named_node("/clang/MacroQualifiedType/desugar");
      methods.push_back(data_model.desugar10);
    arboretum_create_edge(data_model.MacroQualifiedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TargetClonesAttr = arboretum_create_named_node("/clang/TargetClonesAttr");
  arboretum_create_edge(data_model.TargetClonesAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TargetClonesAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCRootClassAttr = arboretum_create_named_node("/clang/ObjCRootClassAttr");
  arboretum_create_edge(data_model.ObjCRootClassAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCRootClassAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CapabilityAttr = arboretum_create_named_node("/clang/CapabilityAttr");
  arboretum_create_edge(data_model.CapabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CapabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PtGuardedByAttr = arboretum_create_named_node("/clang/PtGuardedByAttr");
  arboretum_create_edge(data_model.PtGuardedByAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PtGuardedByAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CPUDispatchAttr = arboretum_create_named_node("/clang/CPUDispatchAttr");
  arboretum_create_edge(data_model.CPUDispatchAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CPUDispatchAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StmtAttr = arboretum_create_named_node("/clang/StmtAttr");
  arboretum_create_edge(data_model.StmtAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.StmtAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AvailableOnlyInDefaultEvalMethodAttr = arboretum_create_named_node("/clang/AvailableOnlyInDefaultEvalMethodAttr");
  arboretum_create_edge(data_model.AvailableOnlyInDefaultEvalMethodAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AvailableOnlyInDefaultEvalMethodAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BuiltinAttr = arboretum_create_named_node("/clang/BuiltinAttr");
  arboretum_create_edge(data_model.BuiltinAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BuiltinAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFReturnsRetainedAttr = arboretum_create_named_node("/clang/CFReturnsRetainedAttr");
  arboretum_create_edge(data_model.CFReturnsRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFReturnsRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UseHandleAttr = arboretum_create_named_node("/clang/UseHandleAttr");
  arboretum_create_edge(data_model.UseHandleAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UseHandleAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXReinterpretCastExpr = arboretum_create_named_node("/clang/CXXReinterpretCastExpr");
  arboretum_create_edge(data_model.CXXReinterpretCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CXXReinterpretCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentSizedExtVectorTypeLoc = arboretum_create_named_node("/clang/DependentSizedExtVectorTypeLoc");
  arboretum_create_edge(data_model.DependentSizedExtVectorTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameLoc3 = arboretum_create_named_node("/clang/DependentSizedExtVectorTypeLoc/getNameLoc");
      methods.push_back(data_model.getNameLoc3);
      data_model.getLocalSourceRange5 = arboretum_create_named_node("/clang/DependentSizedExtVectorTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange5);
      data_model.getElementLoc2 = arboretum_create_named_node("/clang/DependentSizedExtVectorTypeLoc/getElementLoc");
      methods.push_back(data_model.getElementLoc2);
      data_model.getInnerType4 = arboretum_create_named_node("/clang/DependentSizedExtVectorTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType4);
    arboretum_create_edge(data_model.DependentSizedExtVectorTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDeclareSimdDeclAttr = arboretum_create_named_node("/clang/OMPDeclareSimdDeclAttr");
  arboretum_create_edge(data_model.OMPDeclareSimdDeclAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDeclareSimdDeclAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCClassStubAttr = arboretum_create_named_node("/clang/ObjCClassStubAttr");
  arboretum_create_edge(data_model.ObjCClassStubAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCClassStubAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXX11NoReturnAttr = arboretum_create_named_node("/clang/CXX11NoReturnAttr");
  arboretum_create_edge(data_model.CXX11NoReturnAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CXX11NoReturnAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RegCallAttr = arboretum_create_named_node("/clang/RegCallAttr");
  arboretum_create_edge(data_model.RegCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RegCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InheritableParamAttr = arboretum_create_named_node("/clang/InheritableParamAttr");
  arboretum_create_edge(data_model.InheritableParamAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.InheritableParamAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDALaunchBoundsAttr = arboretum_create_named_node("/clang/CUDALaunchBoundsAttr");
  arboretum_create_edge(data_model.CUDALaunchBoundsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDALaunchBoundsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCNSObjectAttr = arboretum_create_named_node("/clang/ObjCNSObjectAttr");
  arboretum_create_edge(data_model.ObjCNSObjectAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCNSObjectAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCObjectType = arboretum_create_named_node("/clang/ObjCObjectType");
  arboretum_create_edge(data_model.ObjCObjectType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCObjectType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CapturedRecordAttr = arboretum_create_named_node("/clang/CapturedRecordAttr");
  arboretum_create_edge(data_model.CapturedRecordAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CapturedRecordAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LValueReferenceType = arboretum_create_named_node("/clang/LValueReferenceType");
  arboretum_create_edge(data_model.LValueReferenceType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared12 = arboretum_create_named_node("/clang/LValueReferenceType/isSugared");
      methods.push_back(data_model.isSugared12);
      data_model.desugar12 = arboretum_create_named_node("/clang/LValueReferenceType/desugar");
      methods.push_back(data_model.desugar12);
    arboretum_create_edge(data_model.LValueReferenceType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CodeSegAttr = arboretum_create_named_node("/clang/CodeSegAttr");
  arboretum_create_edge(data_model.CodeSegAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CodeSegAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SpeculativeLoadHardeningAttr = arboretum_create_named_node("/clang/SpeculativeLoadHardeningAttr");
  arboretum_create_edge(data_model.SpeculativeLoadHardeningAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SpeculativeLoadHardeningAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDADeviceAttr = arboretum_create_named_node("/clang/CUDADeviceAttr");
  arboretum_create_edge(data_model.CUDADeviceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDADeviceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftAsyncNameAttr = arboretum_create_named_node("/clang/SwiftAsyncNameAttr");
  arboretum_create_edge(data_model.SwiftAsyncNameAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftAsyncNameAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedUsingType = arboretum_create_named_node("/clang/UnresolvedUsingType");
  arboretum_create_edge(data_model.UnresolvedUsingType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl6 = arboretum_create_named_node("/clang/UnresolvedUsingType/getDecl");
      methods.push_back(data_model.getDecl6);
      data_model.isSugared13 = arboretum_create_named_node("/clang/UnresolvedUsingType/isSugared");
      methods.push_back(data_model.isSugared13);
      data_model.desugar13 = arboretum_create_named_node("/clang/UnresolvedUsingType/desugar");
      methods.push_back(data_model.desugar13);
    arboretum_create_edge(data_model.UnresolvedUsingType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PassObjectSizeAttr = arboretum_create_named_node("/clang/PassObjectSizeAttr");
  arboretum_create_edge(data_model.PassObjectSizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PassObjectSizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WarnUnusedResultAttr = arboretum_create_named_node("/clang/WarnUnusedResultAttr");
  arboretum_create_edge(data_model.WarnUnusedResultAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WarnUnusedResultAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MemberPointerType = arboretum_create_named_node("/clang/MemberPointerType");
  arboretum_create_edge(data_model.MemberPointerType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPointeeType3 = arboretum_create_named_node("/clang/MemberPointerType/getPointeeType");
      methods.push_back(data_model.getPointeeType3);
      data_model.isMemberFunctionPointer = arboretum_create_named_node("/clang/MemberPointerType/isMemberFunctionPointer");
      methods.push_back(data_model.isMemberFunctionPointer);
      data_model.isMemberDataPointer = arboretum_create_named_node("/clang/MemberPointerType/isMemberDataPointer");
      methods.push_back(data_model.isMemberDataPointer);
      data_model.getClass = arboretum_create_named_node("/clang/MemberPointerType/getClass");
      methods.push_back(data_model.getClass);
      data_model.getMostRecentCXXRecordDecl = arboretum_create_named_node("/clang/MemberPointerType/getMostRecentCXXRecordDecl");
      methods.push_back(data_model.getMostRecentCXXRecordDecl);
      data_model.isSugared14 = arboretum_create_named_node("/clang/MemberPointerType/isSugared");
      methods.push_back(data_model.isSugared14);
      data_model.desugar14 = arboretum_create_named_node("/clang/MemberPointerType/desugar");
      methods.push_back(data_model.desugar14);
    arboretum_create_edge(data_model.MemberPointerType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnumConstantDecl = arboretum_create_named_node("/clang/EnumConstantDecl");
  arboretum_create_edge(data_model.EnumConstantDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInitExpr = arboretum_create_named_node("/clang/EnumConstantDecl/getInitExpr");
      methods.push_back(data_model.getInitExpr);
      data_model.getInitVal = arboretum_create_named_node("/clang/EnumConstantDecl/getInitVal");
      methods.push_back(data_model.getInitVal);
      data_model.getSourceRange43 = arboretum_create_named_node("/clang/EnumConstantDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange43);
      data_model.getCanonicalDecl51 = arboretum_create_named_node("/clang/EnumConstantDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl51);
    arboretum_create_edge(data_model.EnumConstantDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstructorAttr = arboretum_create_named_node("/clang/ConstructorAttr");
  arboretum_create_edge(data_model.ConstructorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConstructorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelForSimdDirective = arboretum_create_named_node("/clang/OMPParallelForSimdDirective");
  arboretum_create_edge(data_model.OMPParallelForSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelForSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WebAssemblyFuncrefAttr = arboretum_create_named_node("/clang/WebAssemblyFuncrefAttr");
  arboretum_create_edge(data_model.WebAssemblyFuncrefAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WebAssemblyFuncrefAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConsumableSetOnReadAttr = arboretum_create_named_node("/clang/ConsumableSetOnReadAttr");
  arboretum_create_edge(data_model.ConsumableSetOnReadAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConsumableSetOnReadAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTaskwaitDirective = arboretum_create_named_node("/clang/OMPTaskwaitDirective");
  arboretum_create_edge(data_model.OMPTaskwaitDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTaskwaitDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RequiresCapabilityAttr = arboretum_create_named_node("/clang/RequiresCapabilityAttr");
  arboretum_create_edge(data_model.RequiresCapabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RequiresCapabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroDisableLifetimeBoundAttr = arboretum_create_named_node("/clang/CoroDisableLifetimeBoundAttr");
  arboretum_create_edge(data_model.CoroDisableLifetimeBoundAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CoroDisableLifetimeBoundAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CastExpr = arboretum_create_named_node("/clang/CastExpr");
  arboretum_create_edge(data_model.CastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCastKind = arboretum_create_named_node("/clang/CastExpr/getCastKind");
      methods.push_back(data_model.getCastKind);
      data_model.getCastKindName1 = arboretum_create_named_node("/clang/CastExpr/getCastKindName");
      methods.push_back(data_model.getCastKindName1);
      data_model.getSubExpr20 = arboretum_create_named_node("/clang/CastExpr/getSubExpr");
      methods.push_back(data_model.getSubExpr20);
      data_model.getSubExprAsWritten1 = arboretum_create_named_node("/clang/CastExpr/getSubExprAsWritten");
      methods.push_back(data_model.getSubExprAsWritten1);
      data_model.getConversionFunction = arboretum_create_named_node("/clang/CastExpr/getConversionFunction");
      methods.push_back(data_model.getConversionFunction);
      data_model.path_empty = arboretum_create_named_node("/clang/CastExpr/path_empty");
      methods.push_back(data_model.path_empty);
      data_model.path_size = arboretum_create_named_node("/clang/CastExpr/path_size");
      methods.push_back(data_model.path_size);
      data_model.path_begin1 = arboretum_create_named_node("/clang/CastExpr/path_begin");
      methods.push_back(data_model.path_begin1);
      data_model.path_end1 = arboretum_create_named_node("/clang/CastExpr/path_end");
      methods.push_back(data_model.path_end1);
      data_model.path1 = arboretum_create_named_node("/clang/CastExpr/path");
      methods.push_back(data_model.path1);
      data_model.getTargetUnionField = arboretum_create_named_node("/clang/CastExpr/getTargetUnionField");
      methods.push_back(data_model.getTargetUnionField);
      data_model.hasStoredFPFeatures4 = arboretum_create_named_node("/clang/CastExpr/hasStoredFPFeatures");
      methods.push_back(data_model.hasStoredFPFeatures4);
      data_model.getStoredFPFeatures4 = arboretum_create_named_node("/clang/CastExpr/getStoredFPFeatures");
      methods.push_back(data_model.getStoredFPFeatures4);
      data_model.getFPFeatures2 = arboretum_create_named_node("/clang/CastExpr/getFPFeatures");
      methods.push_back(data_model.getFPFeatures2);
      data_model.changesVolatileQualification = arboretum_create_named_node("/clang/CastExpr/changesVolatileQualification");
      methods.push_back(data_model.changesVolatileQualification);
      data_model.children233 = arboretum_create_named_node("/clang/CastExpr/children");
      methods.push_back(data_model.children233);
    arboretum_create_edge(data_model.CastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsedAttr = arboretum_create_named_node("/clang/UsedAttr");
  arboretum_create_edge(data_model.UsedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UsedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DiagnoseAsBuiltinAttr = arboretum_create_named_node("/clang/DiagnoseAsBuiltinAttr");
  arboretum_create_edge(data_model.DiagnoseAsBuiltinAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DiagnoseAsBuiltinAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroOnlyDestroyWhenCompleteAttr = arboretum_create_named_node("/clang/CoroOnlyDestroyWhenCompleteAttr");
  arboretum_create_edge(data_model.CoroOnlyDestroyWhenCompleteAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CoroOnlyDestroyWhenCompleteAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaClangBSSSectionAttr = arboretum_create_named_node("/clang/PragmaClangBSSSectionAttr");
  arboretum_create_edge(data_model.PragmaClangBSSSectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PragmaClangBSSSectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroLifetimeBoundAttr = arboretum_create_named_node("/clang/CoroLifetimeBoundAttr");
  arboretum_create_edge(data_model.CoroLifetimeBoundAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CoroLifetimeBoundAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmOutAttr = arboretum_create_named_node("/clang/ArmOutAttr");
  arboretum_create_edge(data_model.ArmOutAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmOutAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaClangRodataSectionAttr = arboretum_create_named_node("/clang/PragmaClangRodataSectionAttr");
  arboretum_create_edge(data_model.PragmaClangRodataSectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PragmaClangRodataSectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CallbackAttr = arboretum_create_named_node("/clang/CallbackAttr");
  arboretum_create_edge(data_model.CallbackAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CallbackAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RetainAttr = arboretum_create_named_node("/clang/RetainAttr");
  arboretum_create_edge(data_model.RetainAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RetainAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InitSegAttr = arboretum_create_named_node("/clang/InitSegAttr");
  arboretum_create_edge(data_model.InitSegAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.InitSegAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMaskedTaskLoopDirective = arboretum_create_named_node("/clang/OMPMaskedTaskLoopDirective");
  arboretum_create_edge(data_model.OMPMaskedTaskLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMaskedTaskLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LValueReferenceTypeLoc = arboretum_create_named_node("/clang/LValueReferenceTypeLoc");
  arboretum_create_edge(data_model.LValueReferenceTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAmpLoc = arboretum_create_named_node("/clang/LValueReferenceTypeLoc/getAmpLoc");
      methods.push_back(data_model.getAmpLoc);
    arboretum_create_edge(data_model.LValueReferenceTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AMDGPUWavesPerEUAttr = arboretum_create_named_node("/clang/AMDGPUWavesPerEUAttr");
  arboretum_create_edge(data_model.AMDGPUWavesPerEUAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AMDGPUWavesPerEUAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SubstNonTypeTemplateParmPackExpr = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr");
  arboretum_create_edge(data_model.SubstNonTypeTemplateParmPackExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAssociatedDecl1 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getAssociatedDecl");
      methods.push_back(data_model.getAssociatedDecl1);
      data_model.getIndex3 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getIndex");
      methods.push_back(data_model.getIndex3);
      data_model.getParameterPack1 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getParameterPack");
      methods.push_back(data_model.getParameterPack1);
      data_model.getParameterPackLocation1 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getParameterPackLocation");
      methods.push_back(data_model.getParameterPackLocation1);
      data_model.getArgumentPack = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getArgumentPack");
      methods.push_back(data_model.getArgumentPack);
      data_model.getBeginLoc125 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc125);
      data_model.getEndLoc127 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc127);
      data_model.children235 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmPackExpr/children");
      methods.push_back(data_model.children235);
    arboretum_create_edge(data_model.SubstNonTypeTemplateParmPackExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXPseudoDestructorExpr = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr");
  arboretum_create_edge(data_model.CXXPseudoDestructorExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBase20 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getBase");
      methods.push_back(data_model.getBase20);
      data_model.hasQualifier2 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/hasQualifier");
      methods.push_back(data_model.hasQualifier2);
      data_model.getQualifierLoc9 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc9);
      data_model.getQualifier10 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getQualifier");
      methods.push_back(data_model.getQualifier10);
      data_model.isArrow6 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/isArrow");
      methods.push_back(data_model.isArrow6);
      data_model.getOperatorLoc8 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc8);
      data_model.getScopeTypeInfo = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getScopeTypeInfo");
      methods.push_back(data_model.getScopeTypeInfo);
      data_model.getColonColonLoc = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getColonColonLoc");
      methods.push_back(data_model.getColonColonLoc);
      data_model.getTildeLoc = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getTildeLoc");
      methods.push_back(data_model.getTildeLoc);
      data_model.getDestroyedTypeInfo = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getDestroyedTypeInfo");
      methods.push_back(data_model.getDestroyedTypeInfo);
      data_model.getDestroyedTypeIdentifier = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getDestroyedTypeIdentifier");
      methods.push_back(data_model.getDestroyedTypeIdentifier);
      data_model.getDestroyedType1 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getDestroyedType");
      methods.push_back(data_model.getDestroyedType1);
      data_model.getDestroyedTypeLoc = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getDestroyedTypeLoc");
      methods.push_back(data_model.getDestroyedTypeLoc);
      data_model.getBeginLoc126 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc126);
      data_model.getEndLoc128 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc128);
      data_model.children237 = arboretum_create_named_node("/clang/CXXPseudoDestructorExpr/children");
      methods.push_back(data_model.children237);
    arboretum_create_edge(data_model.CXXPseudoDestructorExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PtGuardedVarAttr = arboretum_create_named_node("/clang/PtGuardedVarAttr");
  arboretum_create_edge(data_model.PtGuardedVarAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PtGuardedVarAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AssertExclusiveLockAttr = arboretum_create_named_node("/clang/AssertExclusiveLockAttr");
  arboretum_create_edge(data_model.AssertExclusiveLockAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AssertExclusiveLockAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CommonAttr = arboretum_create_named_node("/clang/CommonAttr");
  arboretum_create_edge(data_model.CommonAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CommonAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReqdWorkGroupSizeAttr = arboretum_create_named_node("/clang/ReqdWorkGroupSizeAttr");
  arboretum_create_edge(data_model.ReqdWorkGroupSizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReqdWorkGroupSizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AttributedTypeLoc = arboretum_create_named_node("/clang/AttributedTypeLoc");
  arboretum_create_edge(data_model.AttributedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAttrKind = arboretum_create_named_node("/clang/AttributedTypeLoc/getAttrKind");
      methods.push_back(data_model.getAttrKind);
      data_model.isQualifier = arboretum_create_named_node("/clang/AttributedTypeLoc/isQualifier");
      methods.push_back(data_model.isQualifier);
      data_model.getModifiedLoc = arboretum_create_named_node("/clang/AttributedTypeLoc/getModifiedLoc");
      methods.push_back(data_model.getModifiedLoc);
      data_model.getAttr = arboretum_create_named_node("/clang/AttributedTypeLoc/getAttr");
      methods.push_back(data_model.getAttr);
      data_model.getLocalSourceRange6 = arboretum_create_named_node("/clang/AttributedTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange6);
      data_model.getInnerType5 = arboretum_create_named_node("/clang/AttributedTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType5);
    arboretum_create_edge(data_model.AttributedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCRuntimeVisibleAttr = arboretum_create_named_node("/clang/ObjCRuntimeVisibleAttr");
  arboretum_create_edge(data_model.ObjCRuntimeVisibleAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCRuntimeVisibleAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PascalAttr = arboretum_create_named_node("/clang/PascalAttr");
  arboretum_create_edge(data_model.PascalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PascalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AcquireHandleAttr = arboretum_create_named_node("/clang/AcquireHandleAttr");
  arboretum_create_edge(data_model.AcquireHandleAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AcquireHandleAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AnnotateTypeAttr = arboretum_create_named_node("/clang/AnnotateTypeAttr");
  arboretum_create_edge(data_model.AnnotateTypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AnnotateTypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedUsingTypenameDecl = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl");
  arboretum_create_edge(data_model.UnresolvedUsingTypenameDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUsingLoc3 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getUsingLoc");
      methods.push_back(data_model.getUsingLoc3);
      data_model.getTypenameLoc = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getTypenameLoc");
      methods.push_back(data_model.getTypenameLoc);
      data_model.getQualifierLoc10 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc10);
      data_model.getQualifier11 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getQualifier");
      methods.push_back(data_model.getQualifier11);
      data_model.getNameInfo4 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getNameInfo");
      methods.push_back(data_model.getNameInfo4);
      data_model.isPackExpansion5 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/isPackExpansion");
      methods.push_back(data_model.isPackExpansion5);
      data_model.getEllipsisLoc6 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc6);
      data_model.getCanonicalDecl53 = arboretum_create_named_node("/clang/UnresolvedUsingTypenameDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl53);
    arboretum_create_edge(data_model.UnresolvedUsingTypenameDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InitPriorityAttr = arboretum_create_named_node("/clang/InitPriorityAttr");
  arboretum_create_edge(data_model.InitPriorityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.InitPriorityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RestrictAttr = arboretum_create_named_node("/clang/RestrictAttr");
  arboretum_create_edge(data_model.RestrictAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RestrictAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFGuardAttr = arboretum_create_named_node("/clang/CFGuardAttr");
  arboretum_create_edge(data_model.CFGuardAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFGuardAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BTFTagAttributedType = arboretum_create_named_node("/clang/BTFTagAttributedType");
  arboretum_create_edge(data_model.BTFTagAttributedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getWrappedType = arboretum_create_named_node("/clang/BTFTagAttributedType/getWrappedType");
      methods.push_back(data_model.getWrappedType);
      data_model.getAttr1 = arboretum_create_named_node("/clang/BTFTagAttributedType/getAttr");
      methods.push_back(data_model.getAttr1);
      data_model.isSugared15 = arboretum_create_named_node("/clang/BTFTagAttributedType/isSugared");
      methods.push_back(data_model.isSugared15);
      data_model.desugar15 = arboretum_create_named_node("/clang/BTFTagAttributedType/desugar");
      methods.push_back(data_model.desugar15);
    arboretum_create_edge(data_model.BTFTagAttributedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DecltypeTypeLoc = arboretum_create_named_node("/clang/DecltypeTypeLoc");
  arboretum_create_edge(data_model.DecltypeTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnderlyingExpr = arboretum_create_named_node("/clang/DecltypeTypeLoc/getUnderlyingExpr");
      methods.push_back(data_model.getUnderlyingExpr);
      data_model.getDecltypeLoc = arboretum_create_named_node("/clang/DecltypeTypeLoc/getDecltypeLoc");
      methods.push_back(data_model.getDecltypeLoc);
      data_model.getRParenLoc26 = arboretum_create_named_node("/clang/DecltypeTypeLoc/getRParenLoc");
      methods.push_back(data_model.getRParenLoc26);
      data_model.getLocalSourceRange7 = arboretum_create_named_node("/clang/DecltypeTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange7);
    arboretum_create_edge(data_model.DecltypeTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetParallelForDirective = arboretum_create_named_node("/clang/OMPTargetParallelForDirective");
  arboretum_create_edge(data_model.OMPTargetParallelForDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetParallelForDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLGroupSharedAddressSpaceAttr = arboretum_create_named_node("/clang/HLSLGroupSharedAddressSpaceAttr");
  arboretum_create_edge(data_model.HLSLGroupSharedAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLGroupSharedAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftAsyncErrorAttr = arboretum_create_named_node("/clang/SwiftAsyncErrorAttr");
  arboretum_create_edge(data_model.SwiftAsyncErrorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftAsyncErrorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PackedAttr = arboretum_create_named_node("/clang/PackedAttr");
  arboretum_create_edge(data_model.PackedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PackedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GuardedByAttr = arboretum_create_named_node("/clang/GuardedByAttr");
  arboretum_create_edge(data_model.GuardedByAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.GuardedByAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReturnsNonNullAttr = arboretum_create_named_node("/clang/ReturnsNonNullAttr");
  arboretum_create_edge(data_model.ReturnsNonNullAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReturnsNonNullAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArcWeakrefUnavailableAttr = arboretum_create_named_node("/clang/ArcWeakrefUnavailableAttr");
  arboretum_create_edge(data_model.ArcWeakrefUnavailableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArcWeakrefUnavailableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SYCLKernelAttr = arboretum_create_named_node("/clang/SYCLKernelAttr");
  arboretum_create_edge(data_model.SYCLKernelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SYCLKernelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WeakAttr = arboretum_create_named_node("/clang/WeakAttr");
  arboretum_create_edge(data_model.WeakAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WeakAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstInitAttr = arboretum_create_named_node("/clang/ConstInitAttr");
  arboretum_create_edge(data_model.ConstInitAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConstInitAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SharedTrylockFunctionAttr = arboretum_create_named_node("/clang/SharedTrylockFunctionAttr");
  arboretum_create_edge(data_model.SharedTrylockFunctionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SharedTrylockFunctionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingIfExistsAttr = arboretum_create_named_node("/clang/UsingIfExistsAttr");
  arboretum_create_edge(data_model.UsingIfExistsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UsingIfExistsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VectorCallAttr = arboretum_create_named_node("/clang/VectorCallAttr");
  arboretum_create_edge(data_model.VectorCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.VectorCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UninitializedAttr = arboretum_create_named_node("/clang/UninitializedAttr");
  arboretum_create_edge(data_model.UninitializedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UninitializedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReinitializesAttr = arboretum_create_named_node("/clang/ReinitializesAttr");
  arboretum_create_edge(data_model.ReinitializesAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReinitializesAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFReturnsNotRetainedAttr = arboretum_create_named_node("/clang/CFReturnsNotRetainedAttr");
  arboretum_create_edge(data_model.CFReturnsNotRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFReturnsNotRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RequiresExprBodyDecl = arboretum_create_named_node("/clang/RequiresExprBodyDecl");
  arboretum_create_edge(data_model.RequiresExprBodyDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RequiresExprBodyDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ThisCallAttr = arboretum_create_named_node("/clang/ThisCallAttr");
  arboretum_create_edge(data_model.ThisCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ThisCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCInterfaceTypeLoc = arboretum_create_named_node("/clang/ObjCInterfaceTypeLoc");
  arboretum_create_edge(data_model.ObjCInterfaceTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCInterfaceTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeVisibilityAttr = arboretum_create_named_node("/clang/TypeVisibilityAttr");
  arboretum_create_edge(data_model.TypeVisibilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeVisibilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NamespaceDecl = arboretum_create_named_node("/clang/NamespaceDecl");
  arboretum_create_edge(data_model.NamespaceDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isAnonymousNamespace = arboretum_create_named_node("/clang/NamespaceDecl/isAnonymousNamespace");
      methods.push_back(data_model.isAnonymousNamespace);
      data_model.isInline1 = arboretum_create_named_node("/clang/NamespaceDecl/isInline");
      methods.push_back(data_model.isInline1);
      data_model.isNested = arboretum_create_named_node("/clang/NamespaceDecl/isNested");
      methods.push_back(data_model.isNested);
      data_model.getOriginalNamespace1 = arboretum_create_named_node("/clang/NamespaceDecl/getOriginalNamespace");
      methods.push_back(data_model.getOriginalNamespace1);
      data_model.isOriginalNamespace = arboretum_create_named_node("/clang/NamespaceDecl/isOriginalNamespace");
      methods.push_back(data_model.isOriginalNamespace);
      data_model.getAnonymousNamespace1 = arboretum_create_named_node("/clang/NamespaceDecl/getAnonymousNamespace");
      methods.push_back(data_model.getAnonymousNamespace1);
      data_model.getCanonicalDecl55 = arboretum_create_named_node("/clang/NamespaceDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl55);
      data_model.getSourceRange44 = arboretum_create_named_node("/clang/NamespaceDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange44);
      data_model.getBeginLoc127 = arboretum_create_named_node("/clang/NamespaceDecl/getBeginLoc");
      methods.push_back(data_model.getBeginLoc127);
      data_model.getRBraceLoc4 = arboretum_create_named_node("/clang/NamespaceDecl/getRBraceLoc");
      methods.push_back(data_model.getRBraceLoc4);
    arboretum_create_edge(data_model.NamespaceDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeclaratorDecl = arboretum_create_named_node("/clang/DeclaratorDecl");
  arboretum_create_edge(data_model.DeclaratorDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeSourceInfo8 = arboretum_create_named_node("/clang/DeclaratorDecl/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo8);
      data_model.getInnerLocStart1 = arboretum_create_named_node("/clang/DeclaratorDecl/getInnerLocStart");
      methods.push_back(data_model.getInnerLocStart1);
      data_model.getOuterLocStart1 = arboretum_create_named_node("/clang/DeclaratorDecl/getOuterLocStart");
      methods.push_back(data_model.getOuterLocStart1);
      data_model.getSourceRange45 = arboretum_create_named_node("/clang/DeclaratorDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange45);
      data_model.getBeginLoc128 = arboretum_create_named_node("/clang/DeclaratorDecl/getBeginLoc");
      methods.push_back(data_model.getBeginLoc128);
      data_model.getQualifier12 = arboretum_create_named_node("/clang/DeclaratorDecl/getQualifier");
      methods.push_back(data_model.getQualifier12);
      data_model.getQualifierLoc11 = arboretum_create_named_node("/clang/DeclaratorDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc11);
      data_model.getTrailingRequiresClause2 = arboretum_create_named_node("/clang/DeclaratorDecl/getTrailingRequiresClause");
      methods.push_back(data_model.getTrailingRequiresClause2);
      data_model.getNumTemplateParameterLists1 = arboretum_create_named_node("/clang/DeclaratorDecl/getNumTemplateParameterLists");
      methods.push_back(data_model.getNumTemplateParameterLists1);
      data_model.getTypeSpecStartLoc = arboretum_create_named_node("/clang/DeclaratorDecl/getTypeSpecStartLoc");
      methods.push_back(data_model.getTypeSpecStartLoc);
      data_model.getTypeSpecEndLoc = arboretum_create_named_node("/clang/DeclaratorDecl/getTypeSpecEndLoc");
      methods.push_back(data_model.getTypeSpecEndLoc);
    arboretum_create_edge(data_model.DeclaratorDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeNullableResultAttr = arboretum_create_named_node("/clang/TypeNullableResultAttr");
  arboretum_create_edge(data_model.TypeNullableResultAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeNullableResultAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDADeviceBuiltinSurfaceTypeAttr = arboretum_create_named_node("/clang/CUDADeviceBuiltinSurfaceTypeAttr");
  arboretum_create_edge(data_model.CUDADeviceBuiltinSurfaceTypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDADeviceBuiltinSurfaceTypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MipsInterruptAttr = arboretum_create_named_node("/clang/MipsInterruptAttr");
  arboretum_create_edge(data_model.MipsInterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MipsInterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OwnershipAttr = arboretum_create_named_node("/clang/OwnershipAttr");
  arboretum_create_edge(data_model.OwnershipAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OwnershipAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NSReturnsNotRetainedAttr = arboretum_create_named_node("/clang/NSReturnsNotRetainedAttr");
  arboretum_create_edge(data_model.NSReturnsNotRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NSReturnsNotRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReleaseCapabilityAttr = arboretum_create_named_node("/clang/ReleaseCapabilityAttr");
  arboretum_create_edge(data_model.ReleaseCapabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReleaseCapabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ChooseExpr = arboretum_create_named_node("/clang/ChooseExpr");
  arboretum_create_edge(data_model.ChooseExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isConditionTrue = arboretum_create_named_node("/clang/ChooseExpr/isConditionTrue");
      methods.push_back(data_model.isConditionTrue);
      data_model.isConditionDependent = arboretum_create_named_node("/clang/ChooseExpr/isConditionDependent");
      methods.push_back(data_model.isConditionDependent);
      data_model.getChosenSubExpr = arboretum_create_named_node("/clang/ChooseExpr/getChosenSubExpr");
      methods.push_back(data_model.getChosenSubExpr);
      data_model.getCond12 = arboretum_create_named_node("/clang/ChooseExpr/getCond");
      methods.push_back(data_model.getCond12);
      data_model.getLHS8 = arboretum_create_named_node("/clang/ChooseExpr/getLHS");
      methods.push_back(data_model.getLHS8);
      data_model.getRHS8 = arboretum_create_named_node("/clang/ChooseExpr/getRHS");
      methods.push_back(data_model.getRHS8);
      data_model.getBuiltinLoc5 = arboretum_create_named_node("/clang/ChooseExpr/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc5);
      data_model.getRParenLoc27 = arboretum_create_named_node("/clang/ChooseExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc27);
      data_model.getBeginLoc129 = arboretum_create_named_node("/clang/ChooseExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc129);
      data_model.getEndLoc129 = arboretum_create_named_node("/clang/ChooseExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc129);
      data_model.children239 = arboretum_create_named_node("/clang/ChooseExpr/children");
      methods.push_back(data_model.children239);
    arboretum_create_edge(data_model.ChooseExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLIntelReqdSubGroupSizeAttr = arboretum_create_named_node("/clang/OpenCLIntelReqdSubGroupSizeAttr");
  arboretum_create_edge(data_model.OpenCLIntelReqdSubGroupSizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLIntelReqdSubGroupSizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PureAttr = arboretum_create_named_node("/clang/PureAttr");
  arboretum_create_edge(data_model.PureAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PureAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OptimizeNoneAttr = arboretum_create_named_node("/clang/OptimizeNoneAttr");
  arboretum_create_edge(data_model.OptimizeNoneAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OptimizeNoneAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LTOVisibilityPublicAttr = arboretum_create_named_node("/clang/LTOVisibilityPublicAttr");
  arboretum_create_edge(data_model.LTOVisibilityPublicAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LTOVisibilityPublicAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FinalAttr = arboretum_create_named_node("/clang/FinalAttr");
  arboretum_create_edge(data_model.FinalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FinalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BTFTypeTagAttr = arboretum_create_named_node("/clang/BTFTypeTagAttr");
  arboretum_create_edge(data_model.BTFTypeTagAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BTFTypeTagAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InjectedClassNameType = arboretum_create_named_node("/clang/InjectedClassNameType");
  arboretum_create_edge(data_model.InjectedClassNameType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInjectedSpecializationType = arboretum_create_named_node("/clang/InjectedClassNameType/getInjectedSpecializationType");
      methods.push_back(data_model.getInjectedSpecializationType);
      data_model.getInjectedTST = arboretum_create_named_node("/clang/InjectedClassNameType/getInjectedTST");
      methods.push_back(data_model.getInjectedTST);
      data_model.getTemplateName = arboretum_create_named_node("/clang/InjectedClassNameType/getTemplateName");
      methods.push_back(data_model.getTemplateName);
      data_model.getDecl7 = arboretum_create_named_node("/clang/InjectedClassNameType/getDecl");
      methods.push_back(data_model.getDecl7);
      data_model.isSugared16 = arboretum_create_named_node("/clang/InjectedClassNameType/isSugared");
      methods.push_back(data_model.isSugared16);
      data_model.desugar16 = arboretum_create_named_node("/clang/InjectedClassNameType/desugar");
      methods.push_back(data_model.desugar16);
    arboretum_create_edge(data_model.InjectedClassNameType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCriticalDirective = arboretum_create_named_node("/clang/OMPCriticalDirective");
  arboretum_create_edge(data_model.OMPCriticalDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCriticalDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXTemporaryObjectExpr = arboretum_create_named_node("/clang/CXXTemporaryObjectExpr");
  arboretum_create_edge(data_model.CXXTemporaryObjectExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeSourceInfo9 = arboretum_create_named_node("/clang/CXXTemporaryObjectExpr/getTypeSourceInfo");
      methods.push_back(data_model.getTypeSourceInfo9);
      data_model.getBeginLoc130 = arboretum_create_named_node("/clang/CXXTemporaryObjectExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc130);
      data_model.getEndLoc130 = arboretum_create_named_node("/clang/CXXTemporaryObjectExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc130);
    arboretum_create_edge(data_model.CXXTemporaryObjectExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFUnknownTransferAttr = arboretum_create_named_node("/clang/CFUnknownTransferAttr");
  arboretum_create_edge(data_model.CFUnknownTransferAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFUnknownTransferAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXDeductionGuideDecl = arboretum_create_named_node("/clang/CXXDeductionGuideDecl");
  arboretum_create_edge(data_model.CXXDeductionGuideDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExplicitSpecifier3 = arboretum_create_named_node("/clang/CXXDeductionGuideDecl/getExplicitSpecifier");
      methods.push_back(data_model.getExplicitSpecifier3);
      data_model.isExplicit2 = arboretum_create_named_node("/clang/CXXDeductionGuideDecl/isExplicit");
      methods.push_back(data_model.isExplicit2);
      data_model.getDeducedTemplate = arboretum_create_named_node("/clang/CXXDeductionGuideDecl/getDeducedTemplate");
      methods.push_back(data_model.getDeducedTemplate);
      data_model.getCorrespondingConstructor = arboretum_create_named_node("/clang/CXXDeductionGuideDecl/getCorrespondingConstructor");
      methods.push_back(data_model.getCorrespondingConstructor);
      data_model.getDeductionCandidateKind = arboretum_create_named_node("/clang/CXXDeductionGuideDecl/getDeductionCandidateKind");
      methods.push_back(data_model.getDeductionCandidateKind);
    arboretum_create_edge(data_model.CXXDeductionGuideDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PreserveMostAttr = arboretum_create_named_node("/clang/PreserveMostAttr");
  arboretum_create_edge(data_model.PreserveMostAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PreserveMostAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCRequiresPropertyDefsAttr = arboretum_create_named_node("/clang/ObjCRequiresPropertyDefsAttr");
  arboretum_create_edge(data_model.ObjCRequiresPropertyDefsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCRequiresPropertyDefsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoDebugAttr = arboretum_create_named_node("/clang/NoDebugAttr");
  arboretum_create_edge(data_model.NoDebugAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoDebugAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.Ptr32Attr = arboretum_create_named_node("/clang/Ptr32Attr");
  arboretum_create_edge(data_model.Ptr32Attr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.Ptr32Attr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLResourceAttr = arboretum_create_named_node("/clang/HLSLResourceAttr");
  arboretum_create_edge(data_model.HLSLResourceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLResourceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCOwnershipAttr = arboretum_create_named_node("/clang/ObjCOwnershipAttr");
  arboretum_create_edge(data_model.ObjCOwnershipAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCOwnershipAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MinVectorWidthAttr = arboretum_create_named_node("/clang/MinVectorWidthAttr");
  arboretum_create_edge(data_model.MinVectorWidthAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MinVectorWidthAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnumTypeLoc = arboretum_create_named_node("/clang/EnumTypeLoc");
  arboretum_create_edge(data_model.EnumTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl8 = arboretum_create_named_node("/clang/EnumTypeLoc/getDecl");
      methods.push_back(data_model.getDecl8);
    arboretum_create_edge(data_model.EnumTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLPrivateAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLPrivateAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLPrivateAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLPrivateAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExclusiveTrylockFunctionAttr = arboretum_create_named_node("/clang/ExclusiveTrylockFunctionAttr");
  arboretum_create_edge(data_model.ExclusiveTrylockFunctionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ExclusiveTrylockFunctionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTeamsDistributeParallelForDirective = arboretum_create_named_node("/clang/OMPTeamsDistributeParallelForDirective");
  arboretum_create_edge(data_model.OMPTeamsDistributeParallelForDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTeamsDistributeParallelForDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoBuiltinAttr = arboretum_create_named_node("/clang/NoBuiltinAttr");
  arboretum_create_edge(data_model.NoBuiltinAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoBuiltinAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftPrivateAttr = arboretum_create_named_node("/clang/SwiftPrivateAttr");
  arboretum_create_edge(data_model.SwiftPrivateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftPrivateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXTypeidExpr = arboretum_create_named_node("/clang/CXXTypeidExpr");
  arboretum_create_edge(data_model.CXXTypeidExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isPotentiallyEvaluated = arboretum_create_named_node("/clang/CXXTypeidExpr/isPotentiallyEvaluated");
      methods.push_back(data_model.isPotentiallyEvaluated);
      data_model.isTypeOperand1 = arboretum_create_named_node("/clang/CXXTypeidExpr/isTypeOperand");
      methods.push_back(data_model.isTypeOperand1);
      data_model.getTypeOperandSourceInfo1 = arboretum_create_named_node("/clang/CXXTypeidExpr/getTypeOperandSourceInfo");
      methods.push_back(data_model.getTypeOperandSourceInfo1);
      data_model.getExprOperand1 = arboretum_create_named_node("/clang/CXXTypeidExpr/getExprOperand");
      methods.push_back(data_model.getExprOperand1);
      data_model.getBeginLoc131 = arboretum_create_named_node("/clang/CXXTypeidExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc131);
      data_model.getEndLoc131 = arboretum_create_named_node("/clang/CXXTypeidExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc131);
      data_model.getSourceRange46 = arboretum_create_named_node("/clang/CXXTypeidExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange46);
      data_model.children241 = arboretum_create_named_node("/clang/CXXTypeidExpr/children");
      methods.push_back(data_model.children241);
    arboretum_create_edge(data_model.CXXTypeidExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBridgeRelatedAttr = arboretum_create_named_node("/clang/ObjCBridgeRelatedAttr");
  arboretum_create_edge(data_model.ObjCBridgeRelatedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBridgeRelatedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstantMatrixType = arboretum_create_named_node("/clang/ConstantMatrixType");
  arboretum_create_edge(data_model.ConstantMatrixType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNumRows = arboretum_create_named_node("/clang/ConstantMatrixType/getNumRows");
      methods.push_back(data_model.getNumRows);
      data_model.getNumColumns = arboretum_create_named_node("/clang/ConstantMatrixType/getNumColumns");
      methods.push_back(data_model.getNumColumns);
      data_model.getNumElementsFlattened = arboretum_create_named_node("/clang/ConstantMatrixType/getNumElementsFlattened");
      methods.push_back(data_model.getNumElementsFlattened);
    arboretum_create_edge(data_model.ConstantMatrixType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCExternallyRetainedAttr = arboretum_create_named_node("/clang/ObjCExternallyRetainedAttr");
  arboretum_create_edge(data_model.ObjCExternallyRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCExternallyRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MipsLongCallAttr = arboretum_create_named_node("/clang/MipsLongCallAttr");
  arboretum_create_edge(data_model.MipsLongCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MipsLongCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCSubclassingRestrictedAttr = arboretum_create_named_node("/clang/ObjCSubclassingRestrictedAttr");
  arboretum_create_edge(data_model.ObjCSubclassingRestrictedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCSubclassingRestrictedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AddressSpaceAttr = arboretum_create_named_node("/clang/AddressSpaceAttr");
  arboretum_create_edge(data_model.AddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBridgeMutableAttr = arboretum_create_named_node("/clang/ObjCBridgeMutableAttr");
  arboretum_create_edge(data_model.ObjCBridgeMutableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBridgeMutableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCIndirectCopyRestoreExpr = arboretum_create_named_node("/clang/ObjCIndirectCopyRestoreExpr");
  arboretum_create_edge(data_model.ObjCIndirectCopyRestoreExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCIndirectCopyRestoreExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OSReturnsRetainedOnNonZeroAttr = arboretum_create_named_node("/clang/OSReturnsRetainedOnNonZeroAttr");
  arboretum_create_edge(data_model.OSReturnsRetainedOnNonZeroAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OSReturnsRetainedOnNonZeroAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DecltypeType = arboretum_create_named_node("/clang/DecltypeType");
  arboretum_create_edge(data_model.DecltypeType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnderlyingExpr1 = arboretum_create_named_node("/clang/DecltypeType/getUnderlyingExpr");
      methods.push_back(data_model.getUnderlyingExpr1);
      data_model.getUnderlyingType2 = arboretum_create_named_node("/clang/DecltypeType/getUnderlyingType");
      methods.push_back(data_model.getUnderlyingType2);
      data_model.desugar17 = arboretum_create_named_node("/clang/DecltypeType/desugar");
      methods.push_back(data_model.desugar17);
      data_model.isSugared17 = arboretum_create_named_node("/clang/DecltypeType/isSugared");
      methods.push_back(data_model.isSugared17);
    arboretum_create_edge(data_model.DecltypeType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SPtrAttr = arboretum_create_named_node("/clang/SPtrAttr");
  arboretum_create_edge(data_model.SPtrAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SPtrAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLParamModifierAttr = arboretum_create_named_node("/clang/HLSLParamModifierAttr");
  arboretum_create_edge(data_model.HLSLParamModifierAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLParamModifierAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TestTypestateAttr = arboretum_create_named_node("/clang/TestTypestateAttr");
  arboretum_create_edge(data_model.TestTypestateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TestTypestateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CFAuditedTransferAttr = arboretum_create_named_node("/clang/CFAuditedTransferAttr");
  arboretum_create_edge(data_model.CFAuditedTransferAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CFAuditedTransferAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PreserveAllAttr = arboretum_create_named_node("/clang/PreserveAllAttr");
  arboretum_create_edge(data_model.PreserveAllAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PreserveAllAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCSubscriptRefExpr = arboretum_create_named_node("/clang/ObjCSubscriptRefExpr");
  arboretum_create_edge(data_model.ObjCSubscriptRefExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCSubscriptRefExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDeclareVariantAttr = arboretum_create_named_node("/clang/OMPDeclareVariantAttr");
  arboretum_create_edge(data_model.OMPDeclareVariantAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDeclareVariantAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCExplicitProtocolImplAttr = arboretum_create_named_node("/clang/ObjCExplicitProtocolImplAttr");
  arboretum_create_edge(data_model.ObjCExplicitProtocolImplAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCExplicitProtocolImplAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPAllocateDeclAttr = arboretum_create_named_node("/clang/OMPAllocateDeclAttr");
  arboretum_create_edge(data_model.OMPAllocateDeclAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPAllocateDeclAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MicroMipsAttr = arboretum_create_named_node("/clang/MicroMipsAttr");
  arboretum_create_edge(data_model.MicroMipsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MicroMipsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GenericSelectionExpr = arboretum_create_named_node("/clang/GenericSelectionExpr");
  arboretum_create_edge(data_model.GenericSelectionExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNumAssocs = arboretum_create_named_node("/clang/GenericSelectionExpr/getNumAssocs");
      methods.push_back(data_model.getNumAssocs);
      data_model.getResultIndex = arboretum_create_named_node("/clang/GenericSelectionExpr/getResultIndex");
      methods.push_back(data_model.getResultIndex);
      data_model.isResultDependent = arboretum_create_named_node("/clang/GenericSelectionExpr/isResultDependent");
      methods.push_back(data_model.isResultDependent);
      data_model.isExprPredicate = arboretum_create_named_node("/clang/GenericSelectionExpr/isExprPredicate");
      methods.push_back(data_model.isExprPredicate);
      data_model.isTypePredicate = arboretum_create_named_node("/clang/GenericSelectionExpr/isTypePredicate");
      methods.push_back(data_model.isTypePredicate);
      data_model.getControllingExpr1 = arboretum_create_named_node("/clang/GenericSelectionExpr/getControllingExpr");
      methods.push_back(data_model.getControllingExpr1);
      data_model.getControllingType1 = arboretum_create_named_node("/clang/GenericSelectionExpr/getControllingType");
      methods.push_back(data_model.getControllingType1);
      data_model.getResultExpr3 = arboretum_create_named_node("/clang/GenericSelectionExpr/getResultExpr");
      methods.push_back(data_model.getResultExpr3);
      data_model.getAssocExprs = arboretum_create_named_node("/clang/GenericSelectionExpr/getAssocExprs");
      methods.push_back(data_model.getAssocExprs);
      data_model.getAssocTypeSourceInfos = arboretum_create_named_node("/clang/GenericSelectionExpr/getAssocTypeSourceInfos");
      methods.push_back(data_model.getAssocTypeSourceInfos);
      data_model.associations1 = arboretum_create_named_node("/clang/GenericSelectionExpr/associations");
      methods.push_back(data_model.associations1);
      data_model.getGenericLoc = arboretum_create_named_node("/clang/GenericSelectionExpr/getGenericLoc");
      methods.push_back(data_model.getGenericLoc);
      data_model.getDefaultLoc2 = arboretum_create_named_node("/clang/GenericSelectionExpr/getDefaultLoc");
      methods.push_back(data_model.getDefaultLoc2);
      data_model.getRParenLoc28 = arboretum_create_named_node("/clang/GenericSelectionExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc28);
      data_model.getBeginLoc134 = arboretum_create_named_node("/clang/GenericSelectionExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc134);
      data_model.getEndLoc134 = arboretum_create_named_node("/clang/GenericSelectionExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc134);
      data_model.children247 = arboretum_create_named_node("/clang/GenericSelectionExpr/children");
      methods.push_back(data_model.children247);
    arboretum_create_edge(data_model.GenericSelectionExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HIPManagedAttr = arboretum_create_named_node("/clang/HIPManagedAttr");
  arboretum_create_edge(data_model.HIPManagedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HIPManagedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ZeroCallUsedRegsAttr = arboretum_create_named_node("/clang/ZeroCallUsedRegsAttr");
  arboretum_create_edge(data_model.ZeroCallUsedRegsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ZeroCallUsedRegsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCExceptionAttr = arboretum_create_named_node("/clang/ObjCExceptionAttr");
  arboretum_create_edge(data_model.ObjCExceptionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCExceptionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ClassTemplatePartialSpecializationDecl = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl");
  arboretum_create_edge(data_model.ClassTemplatePartialSpecializationDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateParameters2 = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl/getTemplateParameters");
      methods.push_back(data_model.getTemplateParameters2);
      data_model.hasAssociatedConstraints2 = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl/hasAssociatedConstraints");
      methods.push_back(data_model.hasAssociatedConstraints2);
      data_model.getTemplateArgsAsWritten2 = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl/getTemplateArgsAsWritten");
      methods.push_back(data_model.getTemplateArgsAsWritten2);
      data_model.getInstantiatedFromMember1 = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl/getInstantiatedFromMember");
      methods.push_back(data_model.getInstantiatedFromMember1);
      data_model.getInstantiatedFromMemberTemplate4 = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl/getInstantiatedFromMemberTemplate");
      methods.push_back(data_model.getInstantiatedFromMemberTemplate4);
      data_model.getInjectedSpecializationType1 = arboretum_create_named_node("/clang/ClassTemplatePartialSpecializationDecl/getInjectedSpecializationType");
      methods.push_back(data_model.getInjectedSpecializationType1);
    arboretum_create_edge(data_model.ClassTemplatePartialSpecializationDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BuiltinType = arboretum_create_named_node("/clang/BuiltinType");
  arboretum_create_edge(data_model.BuiltinType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getKind8 = arboretum_create_named_node("/clang/BuiltinType/getKind");
      methods.push_back(data_model.getKind8);
      data_model.isSugared18 = arboretum_create_named_node("/clang/BuiltinType/isSugared");
      methods.push_back(data_model.isSugared18);
      data_model.desugar18 = arboretum_create_named_node("/clang/BuiltinType/desugar");
      methods.push_back(data_model.desugar18);
      data_model.isInteger = arboretum_create_named_node("/clang/BuiltinType/isInteger");
      methods.push_back(data_model.isInteger);
      data_model.isSignedInteger = arboretum_create_named_node("/clang/BuiltinType/isSignedInteger");
      methods.push_back(data_model.isSignedInteger);
      data_model.isUnsignedInteger = arboretum_create_named_node("/clang/BuiltinType/isUnsignedInteger");
      methods.push_back(data_model.isUnsignedInteger);
      data_model.isFloatingPoint = arboretum_create_named_node("/clang/BuiltinType/isFloatingPoint");
      methods.push_back(data_model.isFloatingPoint);
      data_model.isSVEBool = arboretum_create_named_node("/clang/BuiltinType/isSVEBool");
      methods.push_back(data_model.isSVEBool);
      data_model.isSVECount = arboretum_create_named_node("/clang/BuiltinType/isSVECount");
      methods.push_back(data_model.isSVECount);
      data_model.isPlaceholderType1 = arboretum_create_named_node("/clang/BuiltinType/isPlaceholderType");
      methods.push_back(data_model.isPlaceholderType1);
      data_model.isNonOverloadPlaceholderType1 = arboretum_create_named_node("/clang/BuiltinType/isNonOverloadPlaceholderType");
      methods.push_back(data_model.isNonOverloadPlaceholderType1);
    arboretum_create_edge(data_model.BuiltinType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NotTailCalledAttr = arboretum_create_named_node("/clang/NotTailCalledAttr");
  arboretum_create_edge(data_model.NotTailCalledAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NotTailCalledAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MaybeUndefAttr = arboretum_create_named_node("/clang/MaybeUndefAttr");
  arboretum_create_edge(data_model.MaybeUndefAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MaybeUndefAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArrayTypeLoc = arboretum_create_named_node("/clang/ArrayTypeLoc");
  arboretum_create_edge(data_model.ArrayTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLBracketLoc = arboretum_create_named_node("/clang/ArrayTypeLoc/getLBracketLoc");
      methods.push_back(data_model.getLBracketLoc);
      data_model.getRBracketLoc4 = arboretum_create_named_node("/clang/ArrayTypeLoc/getRBracketLoc");
      methods.push_back(data_model.getRBracketLoc4);
      data_model.getBracketsRange = arboretum_create_named_node("/clang/ArrayTypeLoc/getBracketsRange");
      methods.push_back(data_model.getBracketsRange);
      data_model.getSizeExpr = arboretum_create_named_node("/clang/ArrayTypeLoc/getSizeExpr");
      methods.push_back(data_model.getSizeExpr);
      data_model.getElementLoc3 = arboretum_create_named_node("/clang/ArrayTypeLoc/getElementLoc");
      methods.push_back(data_model.getElementLoc3);
      data_model.getLocalSourceRange9 = arboretum_create_named_node("/clang/ArrayTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange9);
      data_model.getInnerType6 = arboretum_create_named_node("/clang/ArrayTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType6);
    arboretum_create_edge(data_model.ArrayTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDistributeDirective = arboretum_create_named_node("/clang/OMPDistributeDirective");
  arboretum_create_edge(data_model.OMPDistributeDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDistributeDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CPUSpecificAttr = arboretum_create_named_node("/clang/CPUSpecificAttr");
  arboretum_create_edge(data_model.CPUSpecificAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CPUSpecificAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FriendDecl = arboretum_create_named_node("/clang/FriendDecl");
  arboretum_create_edge(data_model.FriendDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getFriendType = arboretum_create_named_node("/clang/FriendDecl/getFriendType");
      methods.push_back(data_model.getFriendType);
      data_model.getFriendTypeNumTemplateParameterLists = arboretum_create_named_node("/clang/FriendDecl/getFriendTypeNumTemplateParameterLists");
      methods.push_back(data_model.getFriendTypeNumTemplateParameterLists);
      data_model.getFriendDecl = arboretum_create_named_node("/clang/FriendDecl/getFriendDecl");
      methods.push_back(data_model.getFriendDecl);
      data_model.getFriendLoc = arboretum_create_named_node("/clang/FriendDecl/getFriendLoc");
      methods.push_back(data_model.getFriendLoc);
      data_model.getSourceRange47 = arboretum_create_named_node("/clang/FriendDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange47);
      data_model.isUnsupportedFriend = arboretum_create_named_node("/clang/FriendDecl/isUnsupportedFriend");
      methods.push_back(data_model.isUnsupportedFriend);
    arboretum_create_edge(data_model.FriendDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TargetVersionAttr = arboretum_create_named_node("/clang/TargetVersionAttr");
  arboretum_create_edge(data_model.TargetVersionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TargetVersionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoUwtableAttr = arboretum_create_named_node("/clang/NoUwtableAttr");
  arboretum_create_edge(data_model.NoUwtableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoUwtableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DoStmt = arboretum_create_named_node("/clang/DoStmt");
  arboretum_create_edge(data_model.DoStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCond14 = arboretum_create_named_node("/clang/DoStmt/getCond");
      methods.push_back(data_model.getCond14);
      data_model.getBody19 = arboretum_create_named_node("/clang/DoStmt/getBody");
      methods.push_back(data_model.getBody19);
      data_model.getDoLoc = arboretum_create_named_node("/clang/DoStmt/getDoLoc");
      methods.push_back(data_model.getDoLoc);
      data_model.getWhileLoc1 = arboretum_create_named_node("/clang/DoStmt/getWhileLoc");
      methods.push_back(data_model.getWhileLoc1);
      data_model.getRParenLoc29 = arboretum_create_named_node("/clang/DoStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc29);
      data_model.getBeginLoc135 = arboretum_create_named_node("/clang/DoStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc135);
      data_model.getEndLoc135 = arboretum_create_named_node("/clang/DoStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc135);
      data_model.children249 = arboretum_create_named_node("/clang/DoStmt/children");
      methods.push_back(data_model.children249);
    arboretum_create_edge(data_model.DoStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoUniqueAddressAttr = arboretum_create_named_node("/clang/NoUniqueAddressAttr");
  arboretum_create_edge(data_model.NoUniqueAddressAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoUniqueAddressAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoThreadSafetyAnalysisAttr = arboretum_create_named_node("/clang/NoThreadSafetyAnalysisAttr");
  arboretum_create_edge(data_model.NoThreadSafetyAnalysisAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoThreadSafetyAnalysisAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoSplitStackAttr = arboretum_create_named_node("/clang/NoSplitStackAttr");
  arboretum_create_edge(data_model.NoSplitStackAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoSplitStackAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AcquiredAfterAttr = arboretum_create_named_node("/clang/AcquiredAfterAttr");
  arboretum_create_edge(data_model.AcquiredAfterAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AcquiredAfterAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSNoVTableAttr = arboretum_create_named_node("/clang/MSNoVTableAttr");
  arboretum_create_edge(data_model.MSNoVTableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSNoVTableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXNoexceptExpr = arboretum_create_named_node("/clang/CXXNoexceptExpr");
  arboretum_create_edge(data_model.CXXNoexceptExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOperand1 = arboretum_create_named_node("/clang/CXXNoexceptExpr/getOperand");
      methods.push_back(data_model.getOperand1);
      data_model.getBeginLoc136 = arboretum_create_named_node("/clang/CXXNoexceptExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc136);
      data_model.getEndLoc136 = arboretum_create_named_node("/clang/CXXNoexceptExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc136);
      data_model.getSourceRange48 = arboretum_create_named_node("/clang/CXXNoexceptExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange48);
      data_model.getValue11 = arboretum_create_named_node("/clang/CXXNoexceptExpr/getValue");
      methods.push_back(data_model.getValue11);
      data_model.children251 = arboretum_create_named_node("/clang/CXXNoexceptExpr/children");
      methods.push_back(data_model.children251);
    arboretum_create_edge(data_model.CXXNoexceptExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelMaskedDirective = arboretum_create_named_node("/clang/OMPParallelMaskedDirective");
  arboretum_create_edge(data_model.OMPParallelMaskedDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelMaskedDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NSConsumesSelfAttr = arboretum_create_named_node("/clang/NSConsumesSelfAttr");
  arboretum_create_edge(data_model.NSConsumesSelfAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NSConsumesSelfAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RValueReferenceTypeLoc = arboretum_create_named_node("/clang/RValueReferenceTypeLoc");
  arboretum_create_edge(data_model.RValueReferenceTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAmpAmpLoc1 = arboretum_create_named_node("/clang/RValueReferenceTypeLoc/getAmpAmpLoc");
      methods.push_back(data_model.getAmpAmpLoc1);
    arboretum_create_edge(data_model.RValueReferenceTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionReturnThunksAttr = arboretum_create_named_node("/clang/FunctionReturnThunksAttr");
  arboretum_create_edge(data_model.FunctionReturnThunksAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FunctionReturnThunksAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AMDGPUKernelCallAttr = arboretum_create_named_node("/clang/AMDGPUKernelCallAttr");
  arboretum_create_edge(data_model.AMDGPUKernelCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AMDGPUKernelCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IntelOclBiccAttr = arboretum_create_named_node("/clang/IntelOclBiccAttr");
  arboretum_create_edge(data_model.IntelOclBiccAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.IntelOclBiccAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoSpeculativeLoadHardeningAttr = arboretum_create_named_node("/clang/NoSpeculativeLoadHardeningAttr");
  arboretum_create_edge(data_model.NoSpeculativeLoadHardeningAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoSpeculativeLoadHardeningAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SourceLocExpr = arboretum_create_named_node("/clang/SourceLocExpr");
  arboretum_create_edge(data_model.SourceLocExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBuiltinStr = arboretum_create_named_node("/clang/SourceLocExpr/getBuiltinStr");
      methods.push_back(data_model.getBuiltinStr);
      data_model.getIdentKind1 = arboretum_create_named_node("/clang/SourceLocExpr/getIdentKind");
      methods.push_back(data_model.getIdentKind1);
      data_model.isIntType = arboretum_create_named_node("/clang/SourceLocExpr/isIntType");
      methods.push_back(data_model.isIntType);
      data_model.getParentContext = arboretum_create_named_node("/clang/SourceLocExpr/getParentContext");
      methods.push_back(data_model.getParentContext);
      data_model.getLocation15 = arboretum_create_named_node("/clang/SourceLocExpr/getLocation");
      methods.push_back(data_model.getLocation15);
      data_model.getBeginLoc137 = arboretum_create_named_node("/clang/SourceLocExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc137);
      data_model.getEndLoc137 = arboretum_create_named_node("/clang/SourceLocExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc137);
      data_model.children253 = arboretum_create_named_node("/clang/SourceLocExpr/children");
      methods.push_back(data_model.children253);
    arboretum_create_edge(data_model.SourceLocExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftNewTypeAttr = arboretum_create_named_node("/clang/SwiftNewTypeAttr");
  arboretum_create_edge(data_model.SwiftNewTypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftNewTypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AvailabilityAttr = arboretum_create_named_node("/clang/AvailabilityAttr");
  arboretum_create_edge(data_model.AvailabilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AvailabilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCDirectAttr = arboretum_create_named_node("/clang/ObjCDirectAttr");
  arboretum_create_edge(data_model.ObjCDirectAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCDirectAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IBOutletAttr = arboretum_create_named_node("/clang/IBOutletAttr");
  arboretum_create_edge(data_model.IBOutletAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.IBOutletAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoreturnStmt = arboretum_create_named_node("/clang/CoreturnStmt");
  arboretum_create_edge(data_model.CoreturnStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getKeywordLoc1 = arboretum_create_named_node("/clang/CoreturnStmt/getKeywordLoc");
      methods.push_back(data_model.getKeywordLoc1);
      data_model.getOperand2 = arboretum_create_named_node("/clang/CoreturnStmt/getOperand");
      methods.push_back(data_model.getOperand2);
      data_model.getPromiseCall = arboretum_create_named_node("/clang/CoreturnStmt/getPromiseCall");
      methods.push_back(data_model.getPromiseCall);
      data_model.isImplicit5 = arboretum_create_named_node("/clang/CoreturnStmt/isImplicit");
      methods.push_back(data_model.isImplicit5);
      data_model.getBeginLoc138 = arboretum_create_named_node("/clang/CoreturnStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc138);
      data_model.getEndLoc138 = arboretum_create_named_node("/clang/CoreturnStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc138);
      data_model.children255 = arboretum_create_named_node("/clang/CoreturnStmt/children");
      methods.push_back(data_model.children255);
    arboretum_create_edge(data_model.CoreturnStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CodeModelAttr = arboretum_create_named_node("/clang/CodeModelAttr");
  arboretum_create_edge(data_model.CodeModelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CodeModelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DLLImportAttr = arboretum_create_named_node("/clang/DLLImportAttr");
  arboretum_create_edge(data_model.DLLImportAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DLLImportAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ModeAttr = arboretum_create_named_node("/clang/ModeAttr");
  arboretum_create_edge(data_model.ModeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ModeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FlattenAttr = arboretum_create_named_node("/clang/FlattenAttr");
  arboretum_create_edge(data_model.FlattenAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FlattenAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentDecltypeType = arboretum_create_named_node("/clang/DependentDecltypeType");
  arboretum_create_edge(data_model.DependentDecltypeType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DependentDecltypeType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoSanitizeAttr = arboretum_create_named_node("/clang/NoSanitizeAttr");
  arboretum_create_edge(data_model.NoSanitizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoSanitizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AtomicType = arboretum_create_named_node("/clang/AtomicType");
  arboretum_create_edge(data_model.AtomicType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValueType1 = arboretum_create_named_node("/clang/AtomicType/getValueType");
      methods.push_back(data_model.getValueType1);
      data_model.isSugared19 = arboretum_create_named_node("/clang/AtomicType/isSugared");
      methods.push_back(data_model.isSugared19);
      data_model.desugar19 = arboretum_create_named_node("/clang/AtomicType/desugar");
      methods.push_back(data_model.desugar19);
    arboretum_create_edge(data_model.AtomicType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCReturnsInnerPointerAttr = arboretum_create_named_node("/clang/ObjCReturnsInnerPointerAttr");
  arboretum_create_edge(data_model.ObjCReturnsInnerPointerAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCReturnsInnerPointerAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AlignMac68kAttr = arboretum_create_named_node("/clang/AlignMac68kAttr");
  arboretum_create_edge(data_model.AlignMac68kAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AlignMac68kAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXNamedCastExpr = arboretum_create_named_node("/clang/CXXNamedCastExpr");
  arboretum_create_edge(data_model.CXXNamedCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCastName = arboretum_create_named_node("/clang/CXXNamedCastExpr/getCastName");
      methods.push_back(data_model.getCastName);
      data_model.getOperatorLoc9 = arboretum_create_named_node("/clang/CXXNamedCastExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc9);
      data_model.getRParenLoc30 = arboretum_create_named_node("/clang/CXXNamedCastExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc30);
      data_model.getBeginLoc139 = arboretum_create_named_node("/clang/CXXNamedCastExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc139);
      data_model.getEndLoc139 = arboretum_create_named_node("/clang/CXXNamedCastExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc139);
      data_model.getAngleBrackets = arboretum_create_named_node("/clang/CXXNamedCastExpr/getAngleBrackets");
      methods.push_back(data_model.getAngleBrackets);
    arboretum_create_edge(data_model.CXXNamedCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoRandomizeLayoutAttr = arboretum_create_named_node("/clang/NoRandomizeLayoutAttr");
  arboretum_create_edge(data_model.NoRandomizeLayoutAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoRandomizeLayoutAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingDecl = arboretum_create_named_node("/clang/UsingDecl");
  arboretum_create_edge(data_model.UsingDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUsingLoc4 = arboretum_create_named_node("/clang/UsingDecl/getUsingLoc");
      methods.push_back(data_model.getUsingLoc4);
      data_model.getQualifierLoc12 = arboretum_create_named_node("/clang/UsingDecl/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc12);
      data_model.getQualifier13 = arboretum_create_named_node("/clang/UsingDecl/getQualifier");
      methods.push_back(data_model.getQualifier13);
      data_model.getNameInfo5 = arboretum_create_named_node("/clang/UsingDecl/getNameInfo");
      methods.push_back(data_model.getNameInfo5);
      data_model.isAccessDeclaration1 = arboretum_create_named_node("/clang/UsingDecl/isAccessDeclaration");
      methods.push_back(data_model.isAccessDeclaration1);
      data_model.hasTypename = arboretum_create_named_node("/clang/UsingDecl/hasTypename");
      methods.push_back(data_model.hasTypename);
      data_model.getSourceRange49 = arboretum_create_named_node("/clang/UsingDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange49);
      data_model.getCanonicalDecl57 = arboretum_create_named_node("/clang/UsingDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl57);
    arboretum_create_edge(data_model.UsingDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SysVABIAttr = arboretum_create_named_node("/clang/SysVABIAttr");
  arboretum_create_edge(data_model.SysVABIAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SysVABIAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoMips16Attr = arboretum_create_named_node("/clang/NoMips16Attr");
  arboretum_create_edge(data_model.NoMips16Attr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoMips16Attr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionNoProtoType = arboretum_create_named_node("/clang/FunctionNoProtoType");
  arboretum_create_edge(data_model.FunctionNoProtoType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared20 = arboretum_create_named_node("/clang/FunctionNoProtoType/isSugared");
      methods.push_back(data_model.isSugared20);
      data_model.desugar20 = arboretum_create_named_node("/clang/FunctionNoProtoType/desugar");
      methods.push_back(data_model.desugar20);
    arboretum_create_edge(data_model.FunctionNoProtoType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoDestroyAttr = arboretum_create_named_node("/clang/NoDestroyAttr");
  arboretum_create_edge(data_model.NoDestroyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoDestroyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftObjCMembersAttr = arboretum_create_named_node("/clang/SwiftObjCMembersAttr");
  arboretum_create_edge(data_model.SwiftObjCMembersAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftObjCMembersAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoAliasAttr = arboretum_create_named_node("/clang/NoAliasAttr");
  arboretum_create_edge(data_model.NoAliasAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoAliasAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PcsAttr = arboretum_create_named_node("/clang/PcsAttr");
  arboretum_create_edge(data_model.PcsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PcsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LockReturnedAttr = arboretum_create_named_node("/clang/LockReturnedAttr");
  arboretum_create_edge(data_model.LockReturnedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LockReturnedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLShaderAttr = arboretum_create_named_node("/clang/HLSLShaderAttr");
  arboretum_create_edge(data_model.HLSLShaderAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLShaderAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StdCallAttr = arboretum_create_named_node("/clang/StdCallAttr");
  arboretum_create_edge(data_model.StdCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.StdCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCRuntimeNameAttr = arboretum_create_named_node("/clang/ObjCRuntimeNameAttr");
  arboretum_create_edge(data_model.ObjCRuntimeNameAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCRuntimeNameAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DLLExportAttr = arboretum_create_named_node("/clang/DLLExportAttr");
  arboretum_create_edge(data_model.DLLExportAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DLLExportAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AttributedType = arboretum_create_named_node("/clang/AttributedType");
  arboretum_create_edge(data_model.AttributedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAttrKind1 = arboretum_create_named_node("/clang/AttributedType/getAttrKind");
      methods.push_back(data_model.getAttrKind1);
      data_model.getModifiedType1 = arboretum_create_named_node("/clang/AttributedType/getModifiedType");
      methods.push_back(data_model.getModifiedType1);
      data_model.getEquivalentType = arboretum_create_named_node("/clang/AttributedType/getEquivalentType");
      methods.push_back(data_model.getEquivalentType);
      data_model.isSugared21 = arboretum_create_named_node("/clang/AttributedType/isSugared");
      methods.push_back(data_model.isSugared21);
      data_model.desugar21 = arboretum_create_named_node("/clang/AttributedType/desugar");
      methods.push_back(data_model.desugar21);
      data_model.isQualifier1 = arboretum_create_named_node("/clang/AttributedType/isQualifier");
      methods.push_back(data_model.isQualifier1);
      data_model.isMSTypeSpec = arboretum_create_named_node("/clang/AttributedType/isMSTypeSpec");
      methods.push_back(data_model.isMSTypeSpec);
      data_model.isWebAssemblyFuncrefSpec = arboretum_create_named_node("/clang/AttributedType/isWebAssemblyFuncrefSpec");
      methods.push_back(data_model.isWebAssemblyFuncrefSpec);
      data_model.isCallingConv = arboretum_create_named_node("/clang/AttributedType/isCallingConv");
      methods.push_back(data_model.isCallingConv);
      data_model.getImmediateNullability = arboretum_create_named_node("/clang/AttributedType/getImmediateNullability");
      methods.push_back(data_model.getImmediateNullability);
    arboretum_create_edge(data_model.AttributedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ComplexTypeLoc = arboretum_create_named_node("/clang/ComplexTypeLoc");
  arboretum_create_edge(data_model.ComplexTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ComplexTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AVRInterruptAttr = arboretum_create_named_node("/clang/AVRInterruptAttr");
  arboretum_create_edge(data_model.AVRInterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AVRInterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentUnaryTransformType = arboretum_create_named_node("/clang/DependentUnaryTransformType");
  arboretum_create_edge(data_model.DependentUnaryTransformType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DependentUnaryTransformType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MinSizeAttr = arboretum_create_named_node("/clang/MinSizeAttr");
  arboretum_create_edge(data_model.MinSizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MinSizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MayAliasAttr = arboretum_create_named_node("/clang/MayAliasAttr");
  arboretum_create_edge(data_model.MayAliasAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MayAliasAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MipsShortCallAttr = arboretum_create_named_node("/clang/MipsShortCallAttr");
  arboretum_create_edge(data_model.MipsShortCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MipsShortCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoProfileFunctionAttr = arboretum_create_named_node("/clang/NoProfileFunctionAttr");
  arboretum_create_edge(data_model.NoProfileFunctionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoProfileFunctionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CmseNSEntryAttr = arboretum_create_named_node("/clang/CmseNSEntryAttr");
  arboretum_create_edge(data_model.CmseNSEntryAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CmseNSEntryAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DestructorAttr = arboretum_create_named_node("/clang/DestructorAttr");
  arboretum_create_edge(data_model.DestructorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DestructorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSVtorDispAttr = arboretum_create_named_node("/clang/MSVtorDispAttr");
  arboretum_create_edge(data_model.MSVtorDispAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSVtorDispAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSStructAttr = arboretum_create_named_node("/clang/MSStructAttr");
  arboretum_create_edge(data_model.MSStructAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSStructAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPSingleDirective = arboretum_create_named_node("/clang/OMPSingleDirective");
  arboretum_create_edge(data_model.OMPSingleDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPSingleDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SizeOfPackExpr = arboretum_create_named_node("/clang/SizeOfPackExpr");
  arboretum_create_edge(data_model.SizeOfPackExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOperatorLoc10 = arboretum_create_named_node("/clang/SizeOfPackExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc10);
      data_model.getPackLoc = arboretum_create_named_node("/clang/SizeOfPackExpr/getPackLoc");
      methods.push_back(data_model.getPackLoc);
      data_model.getRParenLoc31 = arboretum_create_named_node("/clang/SizeOfPackExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc31);
      data_model.getPack = arboretum_create_named_node("/clang/SizeOfPackExpr/getPack");
      methods.push_back(data_model.getPack);
      data_model.getPackLength = arboretum_create_named_node("/clang/SizeOfPackExpr/getPackLength");
      methods.push_back(data_model.getPackLength);
      data_model.isPartiallySubstituted = arboretum_create_named_node("/clang/SizeOfPackExpr/isPartiallySubstituted");
      methods.push_back(data_model.isPartiallySubstituted);
      data_model.getPartialArguments = arboretum_create_named_node("/clang/SizeOfPackExpr/getPartialArguments");
      methods.push_back(data_model.getPartialArguments);
      data_model.getBeginLoc140 = arboretum_create_named_node("/clang/SizeOfPackExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc140);
      data_model.getEndLoc140 = arboretum_create_named_node("/clang/SizeOfPackExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc140);
      data_model.children257 = arboretum_create_named_node("/clang/SizeOfPackExpr/children");
      methods.push_back(data_model.children257);
    arboretum_create_edge(data_model.SizeOfPackExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCTypeParamTypeLoc = arboretum_create_named_node("/clang/ObjCTypeParamTypeLoc");
  arboretum_create_edge(data_model.ObjCTypeParamTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCTypeParamTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DesignatedInitExpr = arboretum_create_named_node("/clang/DesignatedInitExpr");
  arboretum_create_edge(data_model.DesignatedInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.size1 = arboretum_create_named_node("/clang/DesignatedInitExpr/size");
      methods.push_back(data_model.size1);
      data_model.designators1 = arboretum_create_named_node("/clang/DesignatedInitExpr/designators");
      methods.push_back(data_model.designators1);
      data_model.getEqualOrColonLoc = arboretum_create_named_node("/clang/DesignatedInitExpr/getEqualOrColonLoc");
      methods.push_back(data_model.getEqualOrColonLoc);
      data_model.isDirectInit1 = arboretum_create_named_node("/clang/DesignatedInitExpr/isDirectInit");
      methods.push_back(data_model.isDirectInit1);
      data_model.usesGNUSyntax = arboretum_create_named_node("/clang/DesignatedInitExpr/usesGNUSyntax");
      methods.push_back(data_model.usesGNUSyntax);
      data_model.getInit12 = arboretum_create_named_node("/clang/DesignatedInitExpr/getInit");
      methods.push_back(data_model.getInit12);
      data_model.getNumSubExprs4 = arboretum_create_named_node("/clang/DesignatedInitExpr/getNumSubExprs");
      methods.push_back(data_model.getNumSubExprs4);
      data_model.getDesignatorsSourceRange = arboretum_create_named_node("/clang/DesignatedInitExpr/getDesignatorsSourceRange");
      methods.push_back(data_model.getDesignatorsSourceRange);
      data_model.getBeginLoc141 = arboretum_create_named_node("/clang/DesignatedInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc141);
      data_model.getEndLoc141 = arboretum_create_named_node("/clang/DesignatedInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc141);
      data_model.children259 = arboretum_create_named_node("/clang/DesignatedInitExpr/children");
      methods.push_back(data_model.children259);
    arboretum_create_edge(data_model.DesignatedInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLNumThreadsAttr = arboretum_create_named_node("/clang/HLSLNumThreadsAttr");
  arboretum_create_edge(data_model.HLSLNumThreadsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLNumThreadsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TrivialABIAttr = arboretum_create_named_node("/clang/TrivialABIAttr");
  arboretum_create_edge(data_model.TrivialABIAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TrivialABIAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MaxFieldAlignmentAttr = arboretum_create_named_node("/clang/MaxFieldAlignmentAttr");
  arboretum_create_edge(data_model.MaxFieldAlignmentAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MaxFieldAlignmentAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSP430InterruptAttr = arboretum_create_named_node("/clang/MSP430InterruptAttr");
  arboretum_create_edge(data_model.MSP430InterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSP430InterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCAtCatchStmt = arboretum_create_named_node("/clang/ObjCAtCatchStmt");
  arboretum_create_edge(data_model.ObjCAtCatchStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCAtCatchStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReturnTypestateAttr = arboretum_create_named_node("/clang/ReturnTypestateAttr");
  arboretum_create_edge(data_model.ReturnTypestateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReturnTypestateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTeamsGenericLoopDirective = arboretum_create_named_node("/clang/OMPTeamsGenericLoopDirective");
  arboretum_create_edge(data_model.OMPTeamsGenericLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTeamsGenericLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeDecl = arboretum_create_named_node("/clang/TypeDecl");
  arboretum_create_edge(data_model.TypeDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeForDecl1 = arboretum_create_named_node("/clang/TypeDecl/getTypeForDecl");
      methods.push_back(data_model.getTypeForDecl1);
      data_model.getBeginLoc143 = arboretum_create_named_node("/clang/TypeDecl/getBeginLoc");
      methods.push_back(data_model.getBeginLoc143);
      data_model.getSourceRange50 = arboretum_create_named_node("/clang/TypeDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange50);
    arboretum_create_edge(data_model.TypeDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstAttr = arboretum_create_named_node("/clang/ConstAttr");
  arboretum_create_edge(data_model.ConstAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConstAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSInheritanceAttr = arboretum_create_named_node("/clang/MSInheritanceAttr");
  arboretum_create_edge(data_model.MSInheritanceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSInheritanceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCTypeParamDecl = arboretum_create_named_node("/clang/ObjCTypeParamDecl");
  arboretum_create_edge(data_model.ObjCTypeParamDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCTypeParamDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSConstexprAttr = arboretum_create_named_node("/clang/MSConstexprAttr");
  arboretum_create_edge(data_model.MSConstexprAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSConstexprAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftBridgedTypedefAttr = arboretum_create_named_node("/clang/SwiftBridgedTypedefAttr");
  arboretum_create_edge(data_model.SwiftBridgedTypedefAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftBridgedTypedefAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCMethodFamilyAttr = arboretum_create_named_node("/clang/ObjCMethodFamilyAttr");
  arboretum_create_edge(data_model.ObjCMethodFamilyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCMethodFamilyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBridgedCastExpr = arboretum_create_named_node("/clang/ObjCBridgedCastExpr");
  arboretum_create_edge(data_model.ObjCBridgedCastExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBridgedCastExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LocksExcludedAttr = arboretum_create_named_node("/clang/LocksExcludedAttr");
  arboretum_create_edge(data_model.LocksExcludedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LocksExcludedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VectorType = arboretum_create_named_node("/clang/VectorType");
  arboretum_create_edge(data_model.VectorType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElementType3 = arboretum_create_named_node("/clang/VectorType/getElementType");
      methods.push_back(data_model.getElementType3);
      data_model.getNumElements2 = arboretum_create_named_node("/clang/VectorType/getNumElements");
      methods.push_back(data_model.getNumElements2);
      data_model.isSugared22 = arboretum_create_named_node("/clang/VectorType/isSugared");
      methods.push_back(data_model.isSugared22);
      data_model.desugar22 = arboretum_create_named_node("/clang/VectorType/desugar");
      methods.push_back(data_model.desugar22);
      data_model.getVectorKind = arboretum_create_named_node("/clang/VectorType/getVectorKind");
      methods.push_back(data_model.getVectorKind);
    arboretum_create_edge(data_model.VectorType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HotAttr = arboretum_create_named_node("/clang/HotAttr");
  arboretum_create_edge(data_model.HotAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HotAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPThreadPrivateDeclAttr = arboretum_create_named_node("/clang/OMPThreadPrivateDeclAttr");
  arboretum_create_edge(data_model.OMPThreadPrivateDeclAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPThreadPrivateDeclAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXInheritedCtorInitExpr = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr");
  arboretum_create_edge(data_model.CXXInheritedCtorInitExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getConstructor1 = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/getConstructor");
      methods.push_back(data_model.getConstructor1);
      data_model.constructsVBase = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/constructsVBase");
      methods.push_back(data_model.constructsVBase);
      data_model.getConstructionKind1 = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/getConstructionKind");
      methods.push_back(data_model.getConstructionKind1);
      data_model.inheritedFromVBase = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/inheritedFromVBase");
      methods.push_back(data_model.inheritedFromVBase);
      data_model.getLocation16 = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/getLocation");
      methods.push_back(data_model.getLocation16);
      data_model.getBeginLoc145 = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc145);
      data_model.getEndLoc144 = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc144);
      data_model.children263 = arboretum_create_named_node("/clang/CXXInheritedCtorInitExpr/children");
      methods.push_back(data_model.children263);
    arboretum_create_edge(data_model.CXXInheritedCtorInitExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSAllocatorAttr = arboretum_create_named_node("/clang/MSAllocatorAttr");
  arboretum_create_edge(data_model.MSAllocatorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSAllocatorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnumExtensibilityAttr = arboretum_create_named_node("/clang/EnumExtensibilityAttr");
  arboretum_create_edge(data_model.EnumExtensibilityAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.EnumExtensibilityAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SubstNonTypeTemplateParmExpr = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr");
  arboretum_create_edge(data_model.SubstNonTypeTemplateParmExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameLoc6 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getNameLoc");
      methods.push_back(data_model.getNameLoc6);
      data_model.getBeginLoc146 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc146);
      data_model.getEndLoc145 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc145);
      data_model.getReplacement1 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getReplacement");
      methods.push_back(data_model.getReplacement1);
      data_model.getAssociatedDecl2 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getAssociatedDecl");
      methods.push_back(data_model.getAssociatedDecl2);
      data_model.getIndex5 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getIndex");
      methods.push_back(data_model.getIndex5);
      data_model.getPackIndex1 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getPackIndex");
      methods.push_back(data_model.getPackIndex1);
      data_model.getParameter = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/getParameter");
      methods.push_back(data_model.getParameter);
      data_model.isReferenceParameter = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/isReferenceParameter");
      methods.push_back(data_model.isReferenceParameter);
      data_model.children265 = arboretum_create_named_node("/clang/SubstNonTypeTemplateParmExpr/children");
      methods.push_back(data_model.children265);
    arboretum_create_edge(data_model.SubstNonTypeTemplateParmExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDAConstantAttr = arboretum_create_named_node("/clang/CUDAConstantAttr");
  arboretum_create_edge(data_model.CUDAConstantAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDAConstantAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoStackProtectorAttr = arboretum_create_named_node("/clang/NoStackProtectorAttr");
  arboretum_create_edge(data_model.NoStackProtectorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoStackProtectorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DiagnoseIfAttr = arboretum_create_named_node("/clang/DiagnoseIfAttr");
  arboretum_create_edge(data_model.DiagnoseIfAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DiagnoseIfAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeTagForDatatypeAttr = arboretum_create_named_node("/clang/TypeTagForDatatypeAttr");
  arboretum_create_edge(data_model.TypeTagForDatatypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeTagForDatatypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSABIAttr = arboretum_create_named_node("/clang/MSABIAttr");
  arboretum_create_edge(data_model.MSABIAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MSABIAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReadOnlyPlacementAttr = arboretum_create_named_node("/clang/ReadOnlyPlacementAttr");
  arboretum_create_edge(data_model.ReadOnlyPlacementAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ReadOnlyPlacementAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CountedByAttr = arboretum_create_named_node("/clang/CountedByAttr");
  arboretum_create_edge(data_model.CountedByAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CountedByAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RedeclarableTemplateDecl = arboretum_create_named_node("/clang/RedeclarableTemplateDecl");
  arboretum_create_edge(data_model.RedeclarableTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCanonicalDecl59 = arboretum_create_named_node("/clang/RedeclarableTemplateDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl59);
      data_model.isMemberSpecialization2 = arboretum_create_named_node("/clang/RedeclarableTemplateDecl/isMemberSpecialization");
      methods.push_back(data_model.isMemberSpecialization2);
      data_model.getInstantiatedFromMemberTemplate5 = arboretum_create_named_node("/clang/RedeclarableTemplateDecl/getInstantiatedFromMemberTemplate");
      methods.push_back(data_model.getInstantiatedFromMemberTemplate5);
    arboretum_create_edge(data_model.RedeclarableTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParenTypeLoc = arboretum_create_named_node("/clang/ParenTypeLoc");
  arboretum_create_edge(data_model.ParenTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLParenLoc14 = arboretum_create_named_node("/clang/ParenTypeLoc/getLParenLoc");
      methods.push_back(data_model.getLParenLoc14);
      data_model.getRParenLoc33 = arboretum_create_named_node("/clang/ParenTypeLoc/getRParenLoc");
      methods.push_back(data_model.getRParenLoc33);
      data_model.getLocalSourceRange11 = arboretum_create_named_node("/clang/ParenTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange11);
      data_model.getInnerLoc = arboretum_create_named_node("/clang/ParenTypeLoc/getInnerLoc");
      methods.push_back(data_model.getInnerLoc);
      data_model.getInnerType7 = arboretum_create_named_node("/clang/ParenTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType7);
    arboretum_create_edge(data_model.ParenTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MIGServerRoutineAttr = arboretum_create_named_node("/clang/MIGServerRoutineAttr");
  arboretum_create_edge(data_model.MIGServerRoutineAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.MIGServerRoutineAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RandomizeLayoutAttr = arboretum_create_named_node("/clang/RandomizeLayoutAttr");
  arboretum_create_edge(data_model.RandomizeLayoutAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RandomizeLayoutAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroWrapperAttr = arboretum_create_named_node("/clang/CoroWrapperAttr");
  arboretum_create_edge(data_model.CoroWrapperAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CoroWrapperAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroReturnTypeAttr = arboretum_create_named_node("/clang/CoroReturnTypeAttr");
  arboretum_create_edge(data_model.CoroReturnTypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CoroReturnTypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.M68kRTDAttr = arboretum_create_named_node("/clang/M68kRTDAttr");
  arboretum_create_edge(data_model.M68kRTDAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.M68kRTDAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDeclareTargetDeclAttr = arboretum_create_named_node("/clang/OMPDeclareTargetDeclAttr");
  arboretum_create_edge(data_model.OMPDeclareTargetDeclAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDeclareTargetDeclAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSPropertyRefExpr = arboretum_create_named_node("/clang/MSPropertyRefExpr");
  arboretum_create_edge(data_model.MSPropertyRefExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange52 = arboretum_create_named_node("/clang/MSPropertyRefExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange52);
      data_model.isImplicitAccess3 = arboretum_create_named_node("/clang/MSPropertyRefExpr/isImplicitAccess");
      methods.push_back(data_model.isImplicitAccess3);
      data_model.getBeginLoc147 = arboretum_create_named_node("/clang/MSPropertyRefExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc147);
      data_model.getEndLoc146 = arboretum_create_named_node("/clang/MSPropertyRefExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc146);
      data_model.children267 = arboretum_create_named_node("/clang/MSPropertyRefExpr/children");
      methods.push_back(data_model.children267);
      data_model.getBaseExpr1 = arboretum_create_named_node("/clang/MSPropertyRefExpr/getBaseExpr");
      methods.push_back(data_model.getBaseExpr1);
      data_model.getPropertyDecl = arboretum_create_named_node("/clang/MSPropertyRefExpr/getPropertyDecl");
      methods.push_back(data_model.getPropertyDecl);
      data_model.isArrow7 = arboretum_create_named_node("/clang/MSPropertyRefExpr/isArrow");
      methods.push_back(data_model.isArrow7);
      data_model.getMemberLoc3 = arboretum_create_named_node("/clang/MSPropertyRefExpr/getMemberLoc");
      methods.push_back(data_model.getMemberLoc3);
      data_model.getQualifierLoc13 = arboretum_create_named_node("/clang/MSPropertyRefExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc13);
    arboretum_create_edge(data_model.MSPropertyRefExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LifetimeBoundAttr = arboretum_create_named_node("/clang/LifetimeBoundAttr");
  arboretum_create_edge(data_model.LifetimeBoundAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LifetimeBoundAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CarriesDependencyAttr = arboretum_create_named_node("/clang/CarriesDependencyAttr");
  arboretum_create_edge(data_model.CarriesDependencyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CarriesDependencyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LeafAttr = arboretum_create_named_node("/clang/LeafAttr");
  arboretum_create_edge(data_model.LeafAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LeafAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RISCVInterruptAttr = arboretum_create_named_node("/clang/RISCVInterruptAttr");
  arboretum_create_edge(data_model.RISCVInterruptAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.RISCVInterruptAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OverloadableAttr = arboretum_create_named_node("/clang/OverloadableAttr");
  arboretum_create_edge(data_model.OverloadableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OverloadableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCObjectTypeLoc = arboretum_create_named_node("/clang/ObjCObjectTypeLoc");
  arboretum_create_edge(data_model.ObjCObjectTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCObjectTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LayoutVersionAttr = arboretum_create_named_node("/clang/LayoutVersionAttr");
  arboretum_create_edge(data_model.LayoutVersionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.LayoutVersionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InternalLinkageAttr = arboretum_create_named_node("/clang/InternalLinkageAttr");
  arboretum_create_edge(data_model.InternalLinkageAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.InternalLinkageAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCDirectMembersAttr = arboretum_create_named_node("/clang/ObjCDirectMembersAttr");
  arboretum_create_edge(data_model.ObjCDirectMembersAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCDirectMembersAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTaskLoopDirective = arboretum_create_named_node("/clang/OMPTaskLoopDirective");
  arboretum_create_edge(data_model.OMPTaskLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTaskLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCMethodDecl = arboretum_create_named_node("/clang/ObjCMethodDecl");
  arboretum_create_edge(data_model.ObjCMethodDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCMethodDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IBOutletCollectionAttr = arboretum_create_named_node("/clang/IBOutletCollectionAttr");
  arboretum_create_edge(data_model.IBOutletCollectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.IBOutletCollectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DisableTailCallsAttr = arboretum_create_named_node("/clang/DisableTailCallsAttr");
  arboretum_create_edge(data_model.DisableTailCallsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DisableTailCallsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FormatAttr = arboretum_create_named_node("/clang/FormatAttr");
  arboretum_create_edge(data_model.FormatAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FormatAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FallThroughAttr = arboretum_create_named_node("/clang/FallThroughAttr");
  arboretum_create_edge(data_model.FallThroughAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FallThroughAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IBActionAttr = arboretum_create_named_node("/clang/IBActionAttr");
  arboretum_create_edge(data_model.IBActionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.IBActionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDAHostAttr = arboretum_create_named_node("/clang/CUDAHostAttr");
  arboretum_create_edge(data_model.CUDAHostAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDAHostAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FriendTemplateDecl = arboretum_create_named_node("/clang/FriendTemplateDecl");
  arboretum_create_edge(data_model.FriendTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getFriendType1 = arboretum_create_named_node("/clang/FriendTemplateDecl/getFriendType");
      methods.push_back(data_model.getFriendType1);
      data_model.getFriendDecl1 = arboretum_create_named_node("/clang/FriendTemplateDecl/getFriendDecl");
      methods.push_back(data_model.getFriendDecl1);
      data_model.getFriendLoc1 = arboretum_create_named_node("/clang/FriendTemplateDecl/getFriendLoc");
      methods.push_back(data_model.getFriendLoc1);
      data_model.getNumTemplateParameters = arboretum_create_named_node("/clang/FriendTemplateDecl/getNumTemplateParameters");
      methods.push_back(data_model.getNumTemplateParameters);
    arboretum_create_edge(data_model.FriendTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLResourceBindingAttr = arboretum_create_named_node("/clang/HLSLResourceBindingAttr");
  arboretum_create_edge(data_model.HLSLResourceBindingAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLResourceBindingAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.XRayInstrumentAttr = arboretum_create_named_node("/clang/XRayInstrumentAttr");
  arboretum_create_edge(data_model.XRayInstrumentAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.XRayInstrumentAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BuiltinTemplateDecl = arboretum_create_named_node("/clang/BuiltinTemplateDecl");
  arboretum_create_edge(data_model.BuiltinTemplateDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange54 = arboretum_create_named_node("/clang/BuiltinTemplateDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange54);
      data_model.getBuiltinTemplateKind = arboretum_create_named_node("/clang/BuiltinTemplateDecl/getBuiltinTemplateKind");
      methods.push_back(data_model.getBuiltinTemplateKind);
    arboretum_create_edge(data_model.BuiltinTemplateDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDeclareMapperDecl = arboretum_create_named_node("/clang/OMPDeclareMapperDecl");
  arboretum_create_edge(data_model.OMPDeclareMapperDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDeclareMapperDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DisableSanitizerInstrumentationAttr = arboretum_create_named_node("/clang/DisableSanitizerInstrumentationAttr");
  arboretum_create_edge(data_model.DisableSanitizerInstrumentationAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DisableSanitizerInstrumentationAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GuardedVarAttr = arboretum_create_named_node("/clang/GuardedVarAttr");
  arboretum_create_edge(data_model.GuardedVarAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.GuardedVarAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCPropertyRefExpr = arboretum_create_named_node("/clang/ObjCPropertyRefExpr");
  arboretum_create_edge(data_model.ObjCPropertyRefExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCPropertyRefExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBridgeAttr = arboretum_create_named_node("/clang/ObjCBridgeAttr");
  arboretum_create_edge(data_model.ObjCBridgeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBridgeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WeakImportAttr = arboretum_create_named_node("/clang/WeakImportAttr");
  arboretum_create_edge(data_model.WeakImportAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WeakImportAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FormatArgAttr = arboretum_create_named_node("/clang/FormatArgAttr");
  arboretum_create_edge(data_model.FormatArgAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FormatArgAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExternalSourceSymbolAttr = arboretum_create_named_node("/clang/ExternalSourceSymbolAttr");
  arboretum_create_edge(data_model.ExternalSourceSymbolAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ExternalSourceSymbolAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IndirectGotoStmt = arboretum_create_named_node("/clang/IndirectGotoStmt");
  arboretum_create_edge(data_model.IndirectGotoStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getGotoLoc1 = arboretum_create_named_node("/clang/IndirectGotoStmt/getGotoLoc");
      methods.push_back(data_model.getGotoLoc1);
      data_model.getStarLoc1 = arboretum_create_named_node("/clang/IndirectGotoStmt/getStarLoc");
      methods.push_back(data_model.getStarLoc1);
      data_model.getTarget1 = arboretum_create_named_node("/clang/IndirectGotoStmt/getTarget");
      methods.push_back(data_model.getTarget1);
      data_model.getConstantTarget1 = arboretum_create_named_node("/clang/IndirectGotoStmt/getConstantTarget");
      methods.push_back(data_model.getConstantTarget1);
      data_model.getBeginLoc150 = arboretum_create_named_node("/clang/IndirectGotoStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc150);
      data_model.getEndLoc149 = arboretum_create_named_node("/clang/IndirectGotoStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc149);
      data_model.children271 = arboretum_create_named_node("/clang/IndirectGotoStmt/children");
      methods.push_back(data_model.children271);
    arboretum_create_edge(data_model.IndirectGotoStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXOperatorCallExpr = arboretum_create_named_node("/clang/CXXOperatorCallExpr");
  arboretum_create_edge(data_model.CXXOperatorCallExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOperator2 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/getOperator");
      methods.push_back(data_model.getOperator2);
      data_model.isAssignmentOp4 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/isAssignmentOp");
      methods.push_back(data_model.isAssignmentOp4);
      data_model.isComparisonOp4 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/isComparisonOp");
      methods.push_back(data_model.isComparisonOp4);
      data_model.isInfixBinaryOp = arboretum_create_named_node("/clang/CXXOperatorCallExpr/isInfixBinaryOp");
      methods.push_back(data_model.isInfixBinaryOp);
      data_model.getOperatorLoc11 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/getOperatorLoc");
      methods.push_back(data_model.getOperatorLoc11);
      data_model.getExprLoc17 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/getExprLoc");
      methods.push_back(data_model.getExprLoc17);
      data_model.getBeginLoc151 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc151);
      data_model.getEndLoc150 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc150);
      data_model.getSourceRange55 = arboretum_create_named_node("/clang/CXXOperatorCallExpr/getSourceRange");
      methods.push_back(data_model.getSourceRange55);
    arboretum_create_edge(data_model.CXXOperatorCallExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCPropertyImplDecl = arboretum_create_named_node("/clang/ObjCPropertyImplDecl");
  arboretum_create_edge(data_model.ObjCPropertyImplDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCPropertyImplDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnforceTCBLeafAttr = arboretum_create_named_node("/clang/EnforceTCBLeafAttr");
  arboretum_create_edge(data_model.EnforceTCBLeafAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.EnforceTCBLeafAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftCallAttr = arboretum_create_named_node("/clang/SwiftCallAttr");
  arboretum_create_edge(data_model.SwiftCallAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftCallAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnableIfAttr = arboretum_create_named_node("/clang/EnableIfAttr");
  arboretum_create_edge(data_model.EnableIfAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.EnableIfAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeducedTemplateSpecializationType = arboretum_create_named_node("/clang/DeducedTemplateSpecializationType");
  arboretum_create_edge(data_model.DeducedTemplateSpecializationType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateName1 = arboretum_create_named_node("/clang/DeducedTemplateSpecializationType/getTemplateName");
      methods.push_back(data_model.getTemplateName1);
    arboretum_create_edge(data_model.DeducedTemplateSpecializationType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SetTypestateAttr = arboretum_create_named_node("/clang/SetTypestateAttr");
  arboretum_create_edge(data_model.SetTypestateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SetTypestateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCArrayLiteral = arboretum_create_named_node("/clang/ObjCArrayLiteral");
  arboretum_create_edge(data_model.ObjCArrayLiteral, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCArrayLiteral, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OSReturnsRetainedAttr = arboretum_create_named_node("/clang/OSReturnsRetainedAttr");
  arboretum_create_edge(data_model.OSReturnsRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OSReturnsRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AtomicTypeLoc = arboretum_create_named_node("/clang/AtomicTypeLoc");
  arboretum_create_edge(data_model.AtomicTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getValueLoc1 = arboretum_create_named_node("/clang/AtomicTypeLoc/getValueLoc");
      methods.push_back(data_model.getValueLoc1);
      data_model.getLocalSourceRange13 = arboretum_create_named_node("/clang/AtomicTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange13);
      data_model.getKWLoc1 = arboretum_create_named_node("/clang/AtomicTypeLoc/getKWLoc");
      methods.push_back(data_model.getKWLoc1);
      data_model.getLParenLoc15 = arboretum_create_named_node("/clang/AtomicTypeLoc/getLParenLoc");
      methods.push_back(data_model.getLParenLoc15);
      data_model.getRParenLoc34 = arboretum_create_named_node("/clang/AtomicTypeLoc/getRParenLoc");
      methods.push_back(data_model.getRParenLoc34);
      data_model.getParensRange = arboretum_create_named_node("/clang/AtomicTypeLoc/getParensRange");
      methods.push_back(data_model.getParensRange);
      data_model.getInnerType9 = arboretum_create_named_node("/clang/AtomicTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType9);
    arboretum_create_edge(data_model.AtomicTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OwnerAttr = arboretum_create_named_node("/clang/OwnerAttr");
  arboretum_create_edge(data_model.OwnerAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OwnerAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.StmtExpr = arboretum_create_named_node("/clang/StmtExpr");
  arboretum_create_edge(data_model.StmtExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSubStmt11 = arboretum_create_named_node("/clang/StmtExpr/getSubStmt");
      methods.push_back(data_model.getSubStmt11);
      data_model.getBeginLoc154 = arboretum_create_named_node("/clang/StmtExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc154);
      data_model.getEndLoc152 = arboretum_create_named_node("/clang/StmtExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc152);
      data_model.getLParenLoc16 = arboretum_create_named_node("/clang/StmtExpr/getLParenLoc");
      methods.push_back(data_model.getLParenLoc16);
      data_model.getRParenLoc35 = arboretum_create_named_node("/clang/StmtExpr/getRParenLoc");
      methods.push_back(data_model.getRParenLoc35);
      data_model.getTemplateDepth1 = arboretum_create_named_node("/clang/StmtExpr/getTemplateDepth");
      methods.push_back(data_model.getTemplateDepth1);
      data_model.children275 = arboretum_create_named_node("/clang/StmtExpr/children");
      methods.push_back(data_model.children275);
    arboretum_create_edge(data_model.StmtExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoMicroMipsAttr = arboretum_create_named_node("/clang/NoMicroMipsAttr");
  arboretum_create_edge(data_model.NoMicroMipsAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoMicroMipsAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeprecatedAttr = arboretum_create_named_node("/clang/DeprecatedAttr");
  arboretum_create_edge(data_model.DeprecatedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DeprecatedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPParallelMasterTaskLoopDirective = arboretum_create_named_node("/clang/OMPParallelMasterTaskLoopDirective");
  arboretum_create_edge(data_model.OMPParallelMasterTaskLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPParallelMasterTaskLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BlocksAttr = arboretum_create_named_node("/clang/BlocksAttr");
  arboretum_create_edge(data_model.BlocksAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BlocksAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoDuplicateAttr = arboretum_create_named_node("/clang/NoDuplicateAttr");
  arboretum_create_edge(data_model.NoDuplicateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoDuplicateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OpenCLGenericAddressSpaceAttr = arboretum_create_named_node("/clang/OpenCLGenericAddressSpaceAttr");
  arboretum_create_edge(data_model.OpenCLGenericAddressSpaceAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OpenCLGenericAddressSpaceAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OSConsumedAttr = arboretum_create_named_node("/clang/OSConsumedAttr");
  arboretum_create_edge(data_model.OSConsumedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OSConsumedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DLLExportStaticLocalAttr = arboretum_create_named_node("/clang/DLLExportStaticLocalAttr");
  arboretum_create_edge(data_model.DLLExportStaticLocalAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DLLExportStaticLocalAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NSReturnsRetainedAttr = arboretum_create_named_node("/clang/NSReturnsRetainedAttr");
  arboretum_create_edge(data_model.NSReturnsRetainedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NSReturnsRetainedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParenType = arboretum_create_named_node("/clang/ParenType");
  arboretum_create_edge(data_model.ParenType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInnerType10 = arboretum_create_named_node("/clang/ParenType/getInnerType");
      methods.push_back(data_model.getInnerType10);
      data_model.isSugared23 = arboretum_create_named_node("/clang/ParenType/isSugared");
      methods.push_back(data_model.isSugared23);
      data_model.desugar23 = arboretum_create_named_node("/clang/ParenType/desugar");
      methods.push_back(data_model.desugar23);
    arboretum_create_edge(data_model.ParenType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BuiltinTypeLoc = arboretum_create_named_node("/clang/BuiltinTypeLoc");
  arboretum_create_edge(data_model.BuiltinTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBuiltinLoc6 = arboretum_create_named_node("/clang/BuiltinTypeLoc/getBuiltinLoc");
      methods.push_back(data_model.getBuiltinLoc6);
      data_model.getNameLoc7 = arboretum_create_named_node("/clang/BuiltinTypeLoc/getNameLoc");
      methods.push_back(data_model.getNameLoc7);
      data_model.getWrittenBuiltinSpecs1 = arboretum_create_named_node("/clang/BuiltinTypeLoc/getWrittenBuiltinSpecs");
      methods.push_back(data_model.getWrittenBuiltinSpecs1);
      data_model.needsExtraLocalData = arboretum_create_named_node("/clang/BuiltinTypeLoc/needsExtraLocalData");
      methods.push_back(data_model.needsExtraLocalData);
      data_model.getExtraLocalDataSize2 = arboretum_create_named_node("/clang/BuiltinTypeLoc/getExtraLocalDataSize");
      methods.push_back(data_model.getExtraLocalDataSize2);
      data_model.getExtraLocalDataAlignment2 = arboretum_create_named_node("/clang/BuiltinTypeLoc/getExtraLocalDataAlignment");
      methods.push_back(data_model.getExtraLocalDataAlignment2);
      data_model.getLocalSourceRange14 = arboretum_create_named_node("/clang/BuiltinTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange14);
      data_model.getWrittenSignSpec = arboretum_create_named_node("/clang/BuiltinTypeLoc/getWrittenSignSpec");
      methods.push_back(data_model.getWrittenSignSpec);
      data_model.hasWrittenSignSpec = arboretum_create_named_node("/clang/BuiltinTypeLoc/hasWrittenSignSpec");
      methods.push_back(data_model.hasWrittenSignSpec);
      data_model.getWrittenWidthSpec = arboretum_create_named_node("/clang/BuiltinTypeLoc/getWrittenWidthSpec");
      methods.push_back(data_model.getWrittenWidthSpec);
      data_model.hasWrittenWidthSpec = arboretum_create_named_node("/clang/BuiltinTypeLoc/hasWrittenWidthSpec");
      methods.push_back(data_model.hasWrittenWidthSpec);
      data_model.getWrittenTypeSpec = arboretum_create_named_node("/clang/BuiltinTypeLoc/getWrittenTypeSpec");
      methods.push_back(data_model.getWrittenTypeSpec);
      data_model.hasWrittenTypeSpec = arboretum_create_named_node("/clang/BuiltinTypeLoc/hasWrittenTypeSpec");
      methods.push_back(data_model.hasWrittenTypeSpec);
      data_model.hasModeAttr = arboretum_create_named_node("/clang/BuiltinTypeLoc/hasModeAttr");
      methods.push_back(data_model.hasModeAttr);
    arboretum_create_edge(data_model.BuiltinTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DecayedType = arboretum_create_named_node("/clang/DecayedType");
  arboretum_create_edge(data_model.DecayedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecayedType = arboretum_create_named_node("/clang/DecayedType/getDecayedType");
      methods.push_back(data_model.getDecayedType);
      data_model.getPointeeType4 = arboretum_create_named_node("/clang/DecayedType/getPointeeType");
      methods.push_back(data_model.getPointeeType4);
    arboretum_create_edge(data_model.DecayedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeOfType = arboretum_create_named_node("/clang/TypeOfType");
  arboretum_create_edge(data_model.TypeOfType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnmodifiedType = arboretum_create_named_node("/clang/TypeOfType/getUnmodifiedType");
      methods.push_back(data_model.getUnmodifiedType);
      data_model.desugar24 = arboretum_create_named_node("/clang/TypeOfType/desugar");
      methods.push_back(data_model.desugar24);
      data_model.isSugared24 = arboretum_create_named_node("/clang/TypeOfType/isSugared");
      methods.push_back(data_model.isSugared24);
      data_model.getKind9 = arboretum_create_named_node("/clang/TypeOfType/getKind");
      methods.push_back(data_model.getKind9);
    arboretum_create_edge(data_model.TypeOfType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TagType = arboretum_create_named_node("/clang/TagType");
  arboretum_create_edge(data_model.TagType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl10 = arboretum_create_named_node("/clang/TagType/getDecl");
      methods.push_back(data_model.getDecl10);
      data_model.isBeingDefined1 = arboretum_create_named_node("/clang/TagType/isBeingDefined");
      methods.push_back(data_model.isBeingDefined1);
    arboretum_create_edge(data_model.TagType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXConstructorDecl = arboretum_create_named_node("/clang/CXXConstructorDecl");
  arboretum_create_edge(data_model.CXXConstructorDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getExplicitSpecifier5 = arboretum_create_named_node("/clang/CXXConstructorDecl/getExplicitSpecifier");
      methods.push_back(data_model.getExplicitSpecifier5);
      data_model.isExplicit3 = arboretum_create_named_node("/clang/CXXConstructorDecl/isExplicit");
      methods.push_back(data_model.isExplicit3);
      data_model.inits7 = arboretum_create_named_node("/clang/CXXConstructorDecl/inits");
      methods.push_back(data_model.inits7);
      data_model.init_begin3 = arboretum_create_named_node("/clang/CXXConstructorDecl/init_begin");
      methods.push_back(data_model.init_begin3);
      data_model.init_end3 = arboretum_create_named_node("/clang/CXXConstructorDecl/init_end");
      methods.push_back(data_model.init_end3);
      data_model.init_rbegin1 = arboretum_create_named_node("/clang/CXXConstructorDecl/init_rbegin");
      methods.push_back(data_model.init_rbegin1);
      data_model.init_rend1 = arboretum_create_named_node("/clang/CXXConstructorDecl/init_rend");
      methods.push_back(data_model.init_rend1);
      data_model.getNumCtorInitializers = arboretum_create_named_node("/clang/CXXConstructorDecl/getNumCtorInitializers");
      methods.push_back(data_model.getNumCtorInitializers);
      data_model.isDelegatingConstructor = arboretum_create_named_node("/clang/CXXConstructorDecl/isDelegatingConstructor");
      methods.push_back(data_model.isDelegatingConstructor);
      data_model.getTargetConstructor = arboretum_create_named_node("/clang/CXXConstructorDecl/getTargetConstructor");
      methods.push_back(data_model.getTargetConstructor);
      data_model.isDefaultConstructor = arboretum_create_named_node("/clang/CXXConstructorDecl/isDefaultConstructor");
      methods.push_back(data_model.isDefaultConstructor);
      data_model.isCopyConstructor1 = arboretum_create_named_node("/clang/CXXConstructorDecl/isCopyConstructor");
      methods.push_back(data_model.isCopyConstructor1);
      data_model.isMoveConstructor1 = arboretum_create_named_node("/clang/CXXConstructorDecl/isMoveConstructor");
      methods.push_back(data_model.isMoveConstructor1);
      data_model.isCopyOrMoveConstructor1 = arboretum_create_named_node("/clang/CXXConstructorDecl/isCopyOrMoveConstructor");
      methods.push_back(data_model.isCopyOrMoveConstructor1);
      data_model.isSpecializationCopyingObject = arboretum_create_named_node("/clang/CXXConstructorDecl/isSpecializationCopyingObject");
      methods.push_back(data_model.isSpecializationCopyingObject);
      data_model.isInheritingConstructor = arboretum_create_named_node("/clang/CXXConstructorDecl/isInheritingConstructor");
      methods.push_back(data_model.isInheritingConstructor);
      data_model.getInheritedConstructor = arboretum_create_named_node("/clang/CXXConstructorDecl/getInheritedConstructor");
      methods.push_back(data_model.getInheritedConstructor);
      data_model.getCanonicalDecl63 = arboretum_create_named_node("/clang/CXXConstructorDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl63);
    arboretum_create_edge(data_model.CXXConstructorDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCNonLazyClassAttr = arboretum_create_named_node("/clang/ObjCNonLazyClassAttr");
  arboretum_create_edge(data_model.ObjCNonLazyClassAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCNonLazyClassAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateSpecializationType = arboretum_create_named_node("/clang/TemplateSpecializationType");
  arboretum_create_edge(data_model.TemplateSpecializationType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isCurrentInstantiation1 = arboretum_create_named_node("/clang/TemplateSpecializationType/isCurrentInstantiation");
      methods.push_back(data_model.isCurrentInstantiation1);
      data_model.isTypeAlias1 = arboretum_create_named_node("/clang/TemplateSpecializationType/isTypeAlias");
      methods.push_back(data_model.isTypeAlias1);
      data_model.getAliasedType = arboretum_create_named_node("/clang/TemplateSpecializationType/getAliasedType");
      methods.push_back(data_model.getAliasedType);
      data_model.getTemplateName2 = arboretum_create_named_node("/clang/TemplateSpecializationType/getTemplateName");
      methods.push_back(data_model.getTemplateName2);
      data_model.template_arguments5 = arboretum_create_named_node("/clang/TemplateSpecializationType/template_arguments");
      methods.push_back(data_model.template_arguments5);
      data_model.isSugared25 = arboretum_create_named_node("/clang/TemplateSpecializationType/isSugared");
      methods.push_back(data_model.isSugared25);
      data_model.desugar25 = arboretum_create_named_node("/clang/TemplateSpecializationType/desugar");
      methods.push_back(data_model.desugar25);
    arboretum_create_edge(data_model.TemplateSpecializationType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCObjectTypeImpl = arboretum_create_named_node("/clang/ObjCObjectTypeImpl");
  arboretum_create_edge(data_model.ObjCObjectTypeImpl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCObjectTypeImpl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AcquiredBeforeAttr = arboretum_create_named_node("/clang/AcquiredBeforeAttr");
  arboretum_create_edge(data_model.AcquiredBeforeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AcquiredBeforeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SubstTemplateTypeParmPackType = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType");
  arboretum_create_edge(data_model.SubstTemplateTypeParmPackType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getIdentifier4 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getIdentifier");
      methods.push_back(data_model.getIdentifier4);
      data_model.getAssociatedDecl3 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getAssociatedDecl");
      methods.push_back(data_model.getAssociatedDecl3);
      data_model.getReplacedParameter1 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getReplacedParameter");
      methods.push_back(data_model.getReplacedParameter1);
      data_model.getIndex6 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getIndex");
      methods.push_back(data_model.getIndex6);
      data_model.getFinal = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getFinal");
      methods.push_back(data_model.getFinal);
      data_model.getNumArgs6 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getNumArgs");
      methods.push_back(data_model.getNumArgs6);
      data_model.isSugared26 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/isSugared");
      methods.push_back(data_model.isSugared26);
      data_model.desugar26 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/desugar");
      methods.push_back(data_model.desugar26);
      data_model.getArgumentPack1 = arboretum_create_named_node("/clang/SubstTemplateTypeParmPackType/getArgumentPack");
      methods.push_back(data_model.getArgumentPack1);
    arboretum_create_edge(data_model.SubstTemplateTypeParmPackType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPTargetTeamsDistributeDirective = arboretum_create_named_node("/clang/OMPTargetTeamsDistributeDirective");
  arboretum_create_edge(data_model.OMPTargetTeamsDistributeDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPTargetTeamsDistributeDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ElaboratedType = arboretum_create_named_node("/clang/ElaboratedType");
  arboretum_create_edge(data_model.ElaboratedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getQualifier14 = arboretum_create_named_node("/clang/ElaboratedType/getQualifier");
      methods.push_back(data_model.getQualifier14);
      data_model.getNamedType = arboretum_create_named_node("/clang/ElaboratedType/getNamedType");
      methods.push_back(data_model.getNamedType);
      data_model.desugar27 = arboretum_create_named_node("/clang/ElaboratedType/desugar");
      methods.push_back(data_model.desugar27);
      data_model.isSugared27 = arboretum_create_named_node("/clang/ElaboratedType/isSugared");
      methods.push_back(data_model.isSugared27);
      data_model.getOwnedTagDecl = arboretum_create_named_node("/clang/ElaboratedType/getOwnedTagDecl");
      methods.push_back(data_model.getOwnedTagDecl);
    arboretum_create_edge(data_model.ElaboratedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AMDGPUFlatWorkGroupSizeAttr = arboretum_create_named_node("/clang/AMDGPUFlatWorkGroupSizeAttr");
  arboretum_create_edge(data_model.AMDGPUFlatWorkGroupSizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AMDGPUFlatWorkGroupSizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FlagEnumAttr = arboretum_create_named_node("/clang/FlagEnumAttr");
  arboretum_create_edge(data_model.FlagEnumAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FlagEnumAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentBitIntType = arboretum_create_named_node("/clang/DependentBitIntType");
  arboretum_create_edge(data_model.DependentBitIntType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isUnsigned1 = arboretum_create_named_node("/clang/DependentBitIntType/isUnsigned");
      methods.push_back(data_model.isUnsigned1);
      data_model.isSigned1 = arboretum_create_named_node("/clang/DependentBitIntType/isSigned");
      methods.push_back(data_model.isSigned1);
      data_model.getNumBitsExpr = arboretum_create_named_node("/clang/DependentBitIntType/getNumBitsExpr");
      methods.push_back(data_model.getNumBitsExpr);
      data_model.isSugared28 = arboretum_create_named_node("/clang/DependentBitIntType/isSugared");
      methods.push_back(data_model.isSugared28);
      data_model.desugar28 = arboretum_create_named_node("/clang/DependentBitIntType/desugar");
      methods.push_back(data_model.desugar28);
    arboretum_create_edge(data_model.DependentBitIntType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCPropertyDecl = arboretum_create_named_node("/clang/ObjCPropertyDecl");
  arboretum_create_edge(data_model.ObjCPropertyDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCPropertyDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaClangTextSectionAttr = arboretum_create_named_node("/clang/PragmaClangTextSectionAttr");
  arboretum_create_edge(data_model.PragmaClangTextSectionAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PragmaClangTextSectionAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCObjectPointerType = arboretum_create_named_node("/clang/ObjCObjectPointerType");
  arboretum_create_edge(data_model.ObjCObjectPointerType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCObjectPointerType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ExcludeFromExplicitInstantiationAttr = arboretum_create_named_node("/clang/ExcludeFromExplicitInstantiationAttr");
  arboretum_create_edge(data_model.ExcludeFromExplicitInstantiationAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ExcludeFromExplicitInstantiationAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnaryTransformType = arboretum_create_named_node("/clang/UnaryTransformType");
  arboretum_create_edge(data_model.UnaryTransformType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared30 = arboretum_create_named_node("/clang/UnaryTransformType/isSugared");
      methods.push_back(data_model.isSugared30);
      data_model.desugar30 = arboretum_create_named_node("/clang/UnaryTransformType/desugar");
      methods.push_back(data_model.desugar30);
      data_model.getUnderlyingType3 = arboretum_create_named_node("/clang/UnaryTransformType/getUnderlyingType");
      methods.push_back(data_model.getUnderlyingType3);
      data_model.getBaseType3 = arboretum_create_named_node("/clang/UnaryTransformType/getBaseType");
      methods.push_back(data_model.getBaseType3);
      data_model.getUTTKind = arboretum_create_named_node("/clang/UnaryTransformType/getUTTKind");
      methods.push_back(data_model.getUTTKind);
    arboretum_create_edge(data_model.UnaryTransformType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLBufferDecl = arboretum_create_named_node("/clang/HLSLBufferDecl");
  arboretum_create_edge(data_model.HLSLBufferDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange59 = arboretum_create_named_node("/clang/HLSLBufferDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange59);
      data_model.getLocStart = arboretum_create_named_node("/clang/HLSLBufferDecl/getLocStart");
      methods.push_back(data_model.getLocStart);
      data_model.getLBraceLoc2 = arboretum_create_named_node("/clang/HLSLBufferDecl/getLBraceLoc");
      methods.push_back(data_model.getLBraceLoc2);
      data_model.getRBraceLoc5 = arboretum_create_named_node("/clang/HLSLBufferDecl/getRBraceLoc");
      methods.push_back(data_model.getRBraceLoc5);
      data_model.isCBuffer = arboretum_create_named_node("/clang/HLSLBufferDecl/isCBuffer");
      methods.push_back(data_model.isCBuffer);
    arboretum_create_edge(data_model.HLSLBufferDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentTypeOfExprType = arboretum_create_named_node("/clang/DependentTypeOfExprType");
  arboretum_create_edge(data_model.DependentTypeOfExprType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DependentTypeOfExprType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BPFPreserveAccessIndexAttr = arboretum_create_named_node("/clang/BPFPreserveAccessIndexAttr");
  arboretum_create_edge(data_model.BPFPreserveAccessIndexAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BPFPreserveAccessIndexAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.EnumType = arboretum_create_named_node("/clang/EnumType");
  arboretum_create_edge(data_model.EnumType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl11 = arboretum_create_named_node("/clang/EnumType/getDecl");
      methods.push_back(data_model.getDecl11);
      data_model.isSugared31 = arboretum_create_named_node("/clang/EnumType/isSugared");
      methods.push_back(data_model.isSugared31);
      data_model.desugar31 = arboretum_create_named_node("/clang/EnumType/desugar");
      methods.push_back(data_model.desugar31);
    arboretum_create_edge(data_model.EnumType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeWithKeyword = arboretum_create_named_node("/clang/TypeWithKeyword");
  arboretum_create_edge(data_model.TypeWithKeyword, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getKeyword = arboretum_create_named_node("/clang/TypeWithKeyword/getKeyword");
      methods.push_back(data_model.getKeyword);
    arboretum_create_edge(data_model.TypeWithKeyword, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AutoType = arboretum_create_named_node("/clang/AutoType");
  arboretum_create_edge(data_model.AutoType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypeConstraintArguments = arboretum_create_named_node("/clang/AutoType/getTypeConstraintArguments");
      methods.push_back(data_model.getTypeConstraintArguments);
      data_model.getTypeConstraintConcept = arboretum_create_named_node("/clang/AutoType/getTypeConstraintConcept");
      methods.push_back(data_model.getTypeConstraintConcept);
      data_model.isConstrained = arboretum_create_named_node("/clang/AutoType/isConstrained");
      methods.push_back(data_model.isConstrained);
      data_model.isDecltypeAuto = arboretum_create_named_node("/clang/AutoType/isDecltypeAuto");
      methods.push_back(data_model.isDecltypeAuto);
      data_model.isGNUAutoType = arboretum_create_named_node("/clang/AutoType/isGNUAutoType");
      methods.push_back(data_model.isGNUAutoType);
      data_model.getKeyword1 = arboretum_create_named_node("/clang/AutoType/getKeyword");
      methods.push_back(data_model.getKeyword1);
    arboretum_create_edge(data_model.AutoType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BreakStmt = arboretum_create_named_node("/clang/BreakStmt");
  arboretum_create_edge(data_model.BreakStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBreakLoc = arboretum_create_named_node("/clang/BreakStmt/getBreakLoc");
      methods.push_back(data_model.getBreakLoc);
      data_model.getBeginLoc155 = arboretum_create_named_node("/clang/BreakStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc155);
      data_model.getEndLoc153 = arboretum_create_named_node("/clang/BreakStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc153);
      data_model.children277 = arboretum_create_named_node("/clang/BreakStmt/children");
      methods.push_back(data_model.children277);
    arboretum_create_edge(data_model.BreakStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UuidAttr = arboretum_create_named_node("/clang/UuidAttr");
  arboretum_create_edge(data_model.UuidAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UuidAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PreferredTypeAttr = arboretum_create_named_node("/clang/PreferredTypeAttr");
  arboretum_create_edge(data_model.PreferredTypeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PreferredTypeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PackExpansionType = arboretum_create_named_node("/clang/PackExpansionType");
  arboretum_create_edge(data_model.PackExpansionType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getPattern3 = arboretum_create_named_node("/clang/PackExpansionType/getPattern");
      methods.push_back(data_model.getPattern3);
      data_model.getNumExpansions3 = arboretum_create_named_node("/clang/PackExpansionType/getNumExpansions");
      methods.push_back(data_model.getNumExpansions3);
      data_model.isSugared32 = arboretum_create_named_node("/clang/PackExpansionType/isSugared");
      methods.push_back(data_model.isSugared32);
      data_model.desugar32 = arboretum_create_named_node("/clang/PackExpansionType/desugar");
      methods.push_back(data_model.desugar32);
    arboretum_create_edge(data_model.PackExpansionType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConsumableAutoCastAttr = arboretum_create_named_node("/clang/ConsumableAutoCastAttr");
  arboretum_create_edge(data_model.ConsumableAutoCastAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConsumableAutoCastAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentNameType = arboretum_create_named_node("/clang/DependentNameType");
  arboretum_create_edge(data_model.DependentNameType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getQualifier15 = arboretum_create_named_node("/clang/DependentNameType/getQualifier");
      methods.push_back(data_model.getQualifier15);
      data_model.getIdentifier5 = arboretum_create_named_node("/clang/DependentNameType/getIdentifier");
      methods.push_back(data_model.getIdentifier5);
      data_model.isSugared33 = arboretum_create_named_node("/clang/DependentNameType/isSugared");
      methods.push_back(data_model.isSugared33);
      data_model.desugar33 = arboretum_create_named_node("/clang/DependentNameType/desugar");
      methods.push_back(data_model.desugar33);
    arboretum_create_edge(data_model.DependentNameType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstantArrayType = arboretum_create_named_node("/clang/ConstantArrayType");
  arboretum_create_edge(data_model.ConstantArrayType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSize = arboretum_create_named_node("/clang/ConstantArrayType/getSize");
      methods.push_back(data_model.getSize);
      data_model.getSizeExpr1 = arboretum_create_named_node("/clang/ConstantArrayType/getSizeExpr");
      methods.push_back(data_model.getSizeExpr1);
      data_model.isSugared34 = arboretum_create_named_node("/clang/ConstantArrayType/isSugared");
      methods.push_back(data_model.isSugared34);
      data_model.desugar34 = arboretum_create_named_node("/clang/ConstantArrayType/desugar");
      methods.push_back(data_model.desugar34);
    arboretum_create_edge(data_model.ConstantArrayType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NSReturnsAutoreleasedAttr = arboretum_create_named_node("/clang/NSReturnsAutoreleasedAttr");
  arboretum_create_edge(data_model.NSReturnsAutoreleasedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NSReturnsAutoreleasedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeOfExprType = arboretum_create_named_node("/clang/TypeOfExprType");
  arboretum_create_edge(data_model.TypeOfExprType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnderlyingExpr2 = arboretum_create_named_node("/clang/TypeOfExprType/getUnderlyingExpr");
      methods.push_back(data_model.getUnderlyingExpr2);
      data_model.getKind10 = arboretum_create_named_node("/clang/TypeOfExprType/getKind");
      methods.push_back(data_model.getKind10);
      data_model.desugar35 = arboretum_create_named_node("/clang/TypeOfExprType/desugar");
      methods.push_back(data_model.desugar35);
      data_model.isSugared35 = arboretum_create_named_node("/clang/TypeOfExprType/isSugared");
      methods.push_back(data_model.isSugared35);
    arboretum_create_edge(data_model.TypeOfExprType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ArmMveStrictPolymorphismAttr = arboretum_create_named_node("/clang/ArmMveStrictPolymorphismAttr");
  arboretum_create_edge(data_model.ArmMveStrictPolymorphismAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ArmMveStrictPolymorphismAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCInterfaceType = arboretum_create_named_node("/clang/ObjCInterfaceType");
  arboretum_create_edge(data_model.ObjCInterfaceType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCInterfaceType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwiftBridgeAttr = arboretum_create_named_node("/clang/SwiftBridgeAttr");
  arboretum_create_edge(data_model.SwiftBridgeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SwiftBridgeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InheritableAttr = arboretum_create_named_node("/clang/InheritableAttr");
  arboretum_create_edge(data_model.InheritableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.InheritableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingType = arboretum_create_named_node("/clang/UsingType");
  arboretum_create_edge(data_model.UsingType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getFoundDecl4 = arboretum_create_named_node("/clang/UsingType/getFoundDecl");
      methods.push_back(data_model.getFoundDecl4);
      data_model.getUnderlyingType4 = arboretum_create_named_node("/clang/UsingType/getUnderlyingType");
      methods.push_back(data_model.getUnderlyingType4);
      data_model.isSugared37 = arboretum_create_named_node("/clang/UsingType/isSugared");
      methods.push_back(data_model.isSugared37);
      data_model.desugar37 = arboretum_create_named_node("/clang/UsingType/desugar");
      methods.push_back(data_model.desugar37);
      data_model.typeMatchesDecl = arboretum_create_named_node("/clang/UsingType/typeMatchesDecl");
      methods.push_back(data_model.typeMatchesDecl);
    arboretum_create_edge(data_model.UsingType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UPtrAttr = arboretum_create_named_node("/clang/UPtrAttr");
  arboretum_create_edge(data_model.UPtrAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UPtrAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionType = arboretum_create_named_node("/clang/FunctionType");
  arboretum_create_edge(data_model.FunctionType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getReturnType2 = arboretum_create_named_node("/clang/FunctionType/getReturnType");
      methods.push_back(data_model.getReturnType2);
      data_model.getHasRegParm = arboretum_create_named_node("/clang/FunctionType/getHasRegParm");
      methods.push_back(data_model.getHasRegParm);
      data_model.getRegParmType = arboretum_create_named_node("/clang/FunctionType/getRegParmType");
      methods.push_back(data_model.getRegParmType);
      data_model.getNoReturnAttr = arboretum_create_named_node("/clang/FunctionType/getNoReturnAttr");
      methods.push_back(data_model.getNoReturnAttr);
      data_model.getCmseNSCallAttr = arboretum_create_named_node("/clang/FunctionType/getCmseNSCallAttr");
      methods.push_back(data_model.getCmseNSCallAttr);
      data_model.getCallConv = arboretum_create_named_node("/clang/FunctionType/getCallConv");
      methods.push_back(data_model.getCallConv);
      data_model.getExtInfo4 = arboretum_create_named_node("/clang/FunctionType/getExtInfo");
      methods.push_back(data_model.getExtInfo4);
      data_model.isConst1 = arboretum_create_named_node("/clang/FunctionType/isConst");
      methods.push_back(data_model.isConst1);
      data_model.isVolatile3 = arboretum_create_named_node("/clang/FunctionType/isVolatile");
      methods.push_back(data_model.isVolatile3);
      data_model.isRestrict = arboretum_create_named_node("/clang/FunctionType/isRestrict");
      methods.push_back(data_model.isRestrict);
    arboretum_create_edge(data_model.FunctionType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AdjustedType = arboretum_create_named_node("/clang/AdjustedType");
  arboretum_create_edge(data_model.AdjustedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getOriginalType = arboretum_create_named_node("/clang/AdjustedType/getOriginalType");
      methods.push_back(data_model.getOriginalType);
      data_model.getAdjustedType = arboretum_create_named_node("/clang/AdjustedType/getAdjustedType");
      methods.push_back(data_model.getAdjustedType);
      data_model.isSugared38 = arboretum_create_named_node("/clang/AdjustedType/isSugared");
      methods.push_back(data_model.isSugared38);
      data_model.desugar38 = arboretum_create_named_node("/clang/AdjustedType/desugar");
      methods.push_back(data_model.desugar38);
    arboretum_create_edge(data_model.AdjustedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentSizedExtVectorType = arboretum_create_named_node("/clang/DependentSizedExtVectorType");
  arboretum_create_edge(data_model.DependentSizedExtVectorType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSizeExpr2 = arboretum_create_named_node("/clang/DependentSizedExtVectorType/getSizeExpr");
      methods.push_back(data_model.getSizeExpr2);
      data_model.getElementType4 = arboretum_create_named_node("/clang/DependentSizedExtVectorType/getElementType");
      methods.push_back(data_model.getElementType4);
      data_model.getAttributeLoc1 = arboretum_create_named_node("/clang/DependentSizedExtVectorType/getAttributeLoc");
      methods.push_back(data_model.getAttributeLoc1);
      data_model.isSugared39 = arboretum_create_named_node("/clang/DependentSizedExtVectorType/isSugared");
      methods.push_back(data_model.isSugared39);
      data_model.desugar39 = arboretum_create_named_node("/clang/DependentSizedExtVectorType/desugar");
      methods.push_back(data_model.desugar39);
    arboretum_create_edge(data_model.DependentSizedExtVectorType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMaskedDirective = arboretum_create_named_node("/clang/OMPMaskedDirective");
  arboretum_create_edge(data_model.OMPMaskedDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMaskedDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypedefType = arboretum_create_named_node("/clang/TypedefType");
  arboretum_create_edge(data_model.TypedefType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl13 = arboretum_create_named_node("/clang/TypedefType/getDecl");
      methods.push_back(data_model.getDecl13);
      data_model.isSugared40 = arboretum_create_named_node("/clang/TypedefType/isSugared");
      methods.push_back(data_model.isSugared40);
      data_model.desugar40 = arboretum_create_named_node("/clang/TypedefType/desugar");
      methods.push_back(data_model.desugar40);
      data_model.typeMatchesDecl1 = arboretum_create_named_node("/clang/TypedefType/typeMatchesDecl");
      methods.push_back(data_model.typeMatchesDecl1);
    arboretum_create_edge(data_model.TypedefType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXForRangeStmt = arboretum_create_named_node("/clang/CXXForRangeStmt");
  arboretum_create_edge(data_model.CXXForRangeStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInit14 = arboretum_create_named_node("/clang/CXXForRangeStmt/getInit");
      methods.push_back(data_model.getInit14);
      data_model.getLoopVariable1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getLoopVariable");
      methods.push_back(data_model.getLoopVariable1);
      data_model.getRangeInit1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getRangeInit");
      methods.push_back(data_model.getRangeInit1);
      data_model.getRangeStmt1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getRangeStmt");
      methods.push_back(data_model.getRangeStmt1);
      data_model.getBeginStmt1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getBeginStmt");
      methods.push_back(data_model.getBeginStmt1);
      data_model.getEndStmt1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getEndStmt");
      methods.push_back(data_model.getEndStmt1);
      data_model.getCond18 = arboretum_create_named_node("/clang/CXXForRangeStmt/getCond");
      methods.push_back(data_model.getCond18);
      data_model.getInc4 = arboretum_create_named_node("/clang/CXXForRangeStmt/getInc");
      methods.push_back(data_model.getInc4);
      data_model.getLoopVarStmt1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getLoopVarStmt");
      methods.push_back(data_model.getLoopVarStmt1);
      data_model.getBody22 = arboretum_create_named_node("/clang/CXXForRangeStmt/getBody");
      methods.push_back(data_model.getBody22);
      data_model.getForLoc1 = arboretum_create_named_node("/clang/CXXForRangeStmt/getForLoc");
      methods.push_back(data_model.getForLoc1);
      data_model.getCoawaitLoc = arboretum_create_named_node("/clang/CXXForRangeStmt/getCoawaitLoc");
      methods.push_back(data_model.getCoawaitLoc);
      data_model.getColonLoc4 = arboretum_create_named_node("/clang/CXXForRangeStmt/getColonLoc");
      methods.push_back(data_model.getColonLoc4);
      data_model.getRParenLoc36 = arboretum_create_named_node("/clang/CXXForRangeStmt/getRParenLoc");
      methods.push_back(data_model.getRParenLoc36);
      data_model.getBeginLoc156 = arboretum_create_named_node("/clang/CXXForRangeStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc156);
      data_model.getEndLoc154 = arboretum_create_named_node("/clang/CXXForRangeStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc154);
      data_model.children279 = arboretum_create_named_node("/clang/CXXForRangeStmt/children");
      methods.push_back(data_model.children279);
    arboretum_create_edge(data_model.CXXForRangeStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConceptDecl = arboretum_create_named_node("/clang/ConceptDecl");
  arboretum_create_edge(data_model.ConceptDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getConstraintExpr = arboretum_create_named_node("/clang/ConceptDecl/getConstraintExpr");
      methods.push_back(data_model.getConstraintExpr);
      data_model.getSourceRange60 = arboretum_create_named_node("/clang/ConceptDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange60);
      data_model.isTypeConcept = arboretum_create_named_node("/clang/ConceptDecl/isTypeConcept");
      methods.push_back(data_model.isTypeConcept);
      data_model.getCanonicalDecl65 = arboretum_create_named_node("/clang/ConceptDecl/getCanonicalDecl");
      methods.push_back(data_model.getCanonicalDecl65);
    arboretum_create_edge(data_model.ConceptDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentVectorType = arboretum_create_named_node("/clang/DependentVectorType");
  arboretum_create_edge(data_model.DependentVectorType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSizeExpr3 = arboretum_create_named_node("/clang/DependentVectorType/getSizeExpr");
      methods.push_back(data_model.getSizeExpr3);
      data_model.getElementType5 = arboretum_create_named_node("/clang/DependentVectorType/getElementType");
      methods.push_back(data_model.getElementType5);
      data_model.getAttributeLoc2 = arboretum_create_named_node("/clang/DependentVectorType/getAttributeLoc");
      methods.push_back(data_model.getAttributeLoc2);
      data_model.getVectorKind1 = arboretum_create_named_node("/clang/DependentVectorType/getVectorKind");
      methods.push_back(data_model.getVectorKind1);
      data_model.isSugared41 = arboretum_create_named_node("/clang/DependentVectorType/isSugared");
      methods.push_back(data_model.isSugared41);
      data_model.desugar41 = arboretum_create_named_node("/clang/DependentVectorType/desugar");
      methods.push_back(data_model.desugar41);
    arboretum_create_edge(data_model.DependentVectorType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SwitchCase = arboretum_create_named_node("/clang/SwitchCase");
  arboretum_create_edge(data_model.SwitchCase, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNextSwitchCase = arboretum_create_named_node("/clang/SwitchCase/getNextSwitchCase");
      methods.push_back(data_model.getNextSwitchCase);
      data_model.getKeywordLoc2 = arboretum_create_named_node("/clang/SwitchCase/getKeywordLoc");
      methods.push_back(data_model.getKeywordLoc2);
      data_model.getColonLoc5 = arboretum_create_named_node("/clang/SwitchCase/getColonLoc");
      methods.push_back(data_model.getColonLoc5);
      data_model.getSubStmt13 = arboretum_create_named_node("/clang/SwitchCase/getSubStmt");
      methods.push_back(data_model.getSubStmt13);
      data_model.getBeginLoc157 = arboretum_create_named_node("/clang/SwitchCase/getBeginLoc");
      methods.push_back(data_model.getBeginLoc157);
      data_model.getEndLoc155 = arboretum_create_named_node("/clang/SwitchCase/getEndLoc");
      methods.push_back(data_model.getEndLoc155);
    arboretum_create_edge(data_model.SwitchCase, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCRequiresSuperAttr = arboretum_create_named_node("/clang/ObjCRequiresSuperAttr");
  arboretum_create_edge(data_model.ObjCRequiresSuperAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCRequiresSuperAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentAddressSpaceType = arboretum_create_named_node("/clang/DependentAddressSpaceType");
  arboretum_create_edge(data_model.DependentAddressSpaceType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAddrSpaceExpr = arboretum_create_named_node("/clang/DependentAddressSpaceType/getAddrSpaceExpr");
      methods.push_back(data_model.getAddrSpaceExpr);
      data_model.getPointeeType6 = arboretum_create_named_node("/clang/DependentAddressSpaceType/getPointeeType");
      methods.push_back(data_model.getPointeeType6);
      data_model.getAttributeLoc3 = arboretum_create_named_node("/clang/DependentAddressSpaceType/getAttributeLoc");
      methods.push_back(data_model.getAttributeLoc3);
      data_model.isSugared42 = arboretum_create_named_node("/clang/DependentAddressSpaceType/isSugared");
      methods.push_back(data_model.isSugared42);
      data_model.desugar42 = arboretum_create_named_node("/clang/DependentAddressSpaceType/desugar");
      methods.push_back(data_model.desugar42);
    arboretum_create_edge(data_model.DependentAddressSpaceType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CXXNullPtrLiteralExpr = arboretum_create_named_node("/clang/CXXNullPtrLiteralExpr");
  arboretum_create_edge(data_model.CXXNullPtrLiteralExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc158 = arboretum_create_named_node("/clang/CXXNullPtrLiteralExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc158);
      data_model.getEndLoc156 = arboretum_create_named_node("/clang/CXXNullPtrLiteralExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc156);
      data_model.getLocation19 = arboretum_create_named_node("/clang/CXXNullPtrLiteralExpr/getLocation");
      methods.push_back(data_model.getLocation19);
      data_model.children281 = arboretum_create_named_node("/clang/CXXNullPtrLiteralExpr/children");
      methods.push_back(data_model.children281);
    arboretum_create_edge(data_model.CXXNullPtrLiteralExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WorkGroupSizeHintAttr = arboretum_create_named_node("/clang/WorkGroupSizeHintAttr");
  arboretum_create_edge(data_model.WorkGroupSizeHintAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WorkGroupSizeHintAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AlignedAttr = arboretum_create_named_node("/clang/AlignedAttr");
  arboretum_create_edge(data_model.AlignedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AlignedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeducedType = arboretum_create_named_node("/clang/DeducedType");
  arboretum_create_edge(data_model.DeducedType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared43 = arboretum_create_named_node("/clang/DeducedType/isSugared");
      methods.push_back(data_model.isSugared43);
      data_model.desugar43 = arboretum_create_named_node("/clang/DeducedType/desugar");
      methods.push_back(data_model.desugar43);
      data_model.getDeducedType = arboretum_create_named_node("/clang/DeducedType/getDeducedType");
      methods.push_back(data_model.getDeducedType);
      data_model.isDeduced = arboretum_create_named_node("/clang/DeducedType/isDeduced");
      methods.push_back(data_model.isDeduced);
    arboretum_create_edge(data_model.DeducedType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AnnotateAttr = arboretum_create_named_node("/clang/AnnotateAttr");
  arboretum_create_edge(data_model.AnnotateAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AnnotateAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentSizedArrayType = arboretum_create_named_node("/clang/DependentSizedArrayType");
  arboretum_create_edge(data_model.DependentSizedArrayType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSizeExpr4 = arboretum_create_named_node("/clang/DependentSizedArrayType/getSizeExpr");
      methods.push_back(data_model.getSizeExpr4);
      data_model.getBracketsRange1 = arboretum_create_named_node("/clang/DependentSizedArrayType/getBracketsRange");
      methods.push_back(data_model.getBracketsRange1);
      data_model.getLBracketLoc1 = arboretum_create_named_node("/clang/DependentSizedArrayType/getLBracketLoc");
      methods.push_back(data_model.getLBracketLoc1);
      data_model.getRBracketLoc5 = arboretum_create_named_node("/clang/DependentSizedArrayType/getRBracketLoc");
      methods.push_back(data_model.getRBracketLoc5);
      data_model.isSugared44 = arboretum_create_named_node("/clang/DependentSizedArrayType/isSugared");
      methods.push_back(data_model.isSugared44);
      data_model.desugar44 = arboretum_create_named_node("/clang/DependentSizedArrayType/desugar");
      methods.push_back(data_model.desugar44);
    arboretum_create_edge(data_model.DependentSizedArrayType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IncompleteArrayType = arboretum_create_named_node("/clang/IncompleteArrayType");
  arboretum_create_edge(data_model.IncompleteArrayType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared45 = arboretum_create_named_node("/clang/IncompleteArrayType/isSugared");
      methods.push_back(data_model.isSugared45);
      data_model.desugar45 = arboretum_create_named_node("/clang/IncompleteArrayType/desugar");
      methods.push_back(data_model.desugar45);
    arboretum_create_edge(data_model.IncompleteArrayType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReferenceType = arboretum_create_named_node("/clang/ReferenceType");
  arboretum_create_edge(data_model.ReferenceType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSpelledAsLValue = arboretum_create_named_node("/clang/ReferenceType/isSpelledAsLValue");
      methods.push_back(data_model.isSpelledAsLValue);
      data_model.isInnerRef = arboretum_create_named_node("/clang/ReferenceType/isInnerRef");
      methods.push_back(data_model.isInnerRef);
      data_model.getPointeeTypeAsWritten = arboretum_create_named_node("/clang/ReferenceType/getPointeeTypeAsWritten");
      methods.push_back(data_model.getPointeeTypeAsWritten);
      data_model.getPointeeType7 = arboretum_create_named_node("/clang/ReferenceType/getPointeeType");
      methods.push_back(data_model.getPointeeType7);
    arboretum_create_edge(data_model.ReferenceType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMasterTaskLoopDirective = arboretum_create_named_node("/clang/OMPMasterTaskLoopDirective");
  arboretum_create_edge(data_model.OMPMasterTaskLoopDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMasterTaskLoopDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RValueReferenceType = arboretum_create_named_node("/clang/RValueReferenceType");
  arboretum_create_edge(data_model.RValueReferenceType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.isSugared46 = arboretum_create_named_node("/clang/RValueReferenceType/isSugared");
      methods.push_back(data_model.isSugared46);
      data_model.desugar46 = arboretum_create_named_node("/clang/RValueReferenceType/desugar");
      methods.push_back(data_model.desugar46);
    arboretum_create_edge(data_model.RValueReferenceType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.X86ForceAlignArgPointerAttr = arboretum_create_named_node("/clang/X86ForceAlignArgPointerAttr");
  arboretum_create_edge(data_model.X86ForceAlignArgPointerAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.X86ForceAlignArgPointerAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnlikelyAttr = arboretum_create_named_node("/clang/UnlikelyAttr");
  arboretum_create_edge(data_model.UnlikelyAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.UnlikelyAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnresolvedUsingTypeLoc = arboretum_create_named_node("/clang/UnresolvedUsingTypeLoc");
  arboretum_create_edge(data_model.UnresolvedUsingTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl14 = arboretum_create_named_node("/clang/UnresolvedUsingTypeLoc/getDecl");
      methods.push_back(data_model.getDecl14);
    arboretum_create_edge(data_model.UnresolvedUsingTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCProtocolExpr = arboretum_create_named_node("/clang/ObjCProtocolExpr");
  arboretum_create_edge(data_model.ObjCProtocolExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCProtocolExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VariableArrayType = arboretum_create_named_node("/clang/VariableArrayType");
  arboretum_create_edge(data_model.VariableArrayType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSizeExpr5 = arboretum_create_named_node("/clang/VariableArrayType/getSizeExpr");
      methods.push_back(data_model.getSizeExpr5);
      data_model.getBracketsRange2 = arboretum_create_named_node("/clang/VariableArrayType/getBracketsRange");
      methods.push_back(data_model.getBracketsRange2);
      data_model.getLBracketLoc2 = arboretum_create_named_node("/clang/VariableArrayType/getLBracketLoc");
      methods.push_back(data_model.getLBracketLoc2);
      data_model.getRBracketLoc6 = arboretum_create_named_node("/clang/VariableArrayType/getRBracketLoc");
      methods.push_back(data_model.getRBracketLoc6);
      data_model.isSugared47 = arboretum_create_named_node("/clang/VariableArrayType/isSugared");
      methods.push_back(data_model.isSugared47);
      data_model.desugar47 = arboretum_create_named_node("/clang/VariableArrayType/desugar");
      methods.push_back(data_model.desugar47);
    arboretum_create_edge(data_model.VariableArrayType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PipeType = arboretum_create_named_node("/clang/PipeType");
  arboretum_create_edge(data_model.PipeType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElementType6 = arboretum_create_named_node("/clang/PipeType/getElementType");
      methods.push_back(data_model.getElementType6);
      data_model.isSugared48 = arboretum_create_named_node("/clang/PipeType/isSugared");
      methods.push_back(data_model.isSugared48);
      data_model.desugar48 = arboretum_create_named_node("/clang/PipeType/desugar");
      methods.push_back(data_model.desugar48);
      data_model.isReadOnly2 = arboretum_create_named_node("/clang/PipeType/isReadOnly");
      methods.push_back(data_model.isReadOnly2);
    arboretum_create_edge(data_model.PipeType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypedefTypeLoc = arboretum_create_named_node("/clang/TypedefTypeLoc");
  arboretum_create_edge(data_model.TypedefTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypedefNameDecl = arboretum_create_named_node("/clang/TypedefTypeLoc/getTypedefNameDecl");
      methods.push_back(data_model.getTypedefNameDecl);
    arboretum_create_edge(data_model.TypedefTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.InjectedClassNameTypeLoc = arboretum_create_named_node("/clang/InjectedClassNameTypeLoc");
  arboretum_create_edge(data_model.InjectedClassNameTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl15 = arboretum_create_named_node("/clang/InjectedClassNameTypeLoc/getDecl");
      methods.push_back(data_model.getDecl15);
    arboretum_create_edge(data_model.InjectedClassNameTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UsingTypeLoc = arboretum_create_named_node("/clang/UsingTypeLoc");
  arboretum_create_edge(data_model.UsingTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnderlyingType5 = arboretum_create_named_node("/clang/UsingTypeLoc/getUnderlyingType");
      methods.push_back(data_model.getUnderlyingType5);
      data_model.getFoundDecl5 = arboretum_create_named_node("/clang/UsingTypeLoc/getFoundDecl");
      methods.push_back(data_model.getFoundDecl5);
    arboretum_create_edge(data_model.UsingTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstantMatrixTypeLoc = arboretum_create_named_node("/clang/ConstantMatrixTypeLoc");
  arboretum_create_edge(data_model.ConstantMatrixTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConstantMatrixTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MacroQualifiedTypeLoc = arboretum_create_named_node("/clang/MacroQualifiedTypeLoc");
  arboretum_create_edge(data_model.MacroQualifiedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInnerLoc1 = arboretum_create_named_node("/clang/MacroQualifiedTypeLoc/getInnerLoc");
      methods.push_back(data_model.getInnerLoc1);
      data_model.getMacroIdentifier1 = arboretum_create_named_node("/clang/MacroQualifiedTypeLoc/getMacroIdentifier");
      methods.push_back(data_model.getMacroIdentifier1);
      data_model.getExpansionLoc = arboretum_create_named_node("/clang/MacroQualifiedTypeLoc/getExpansionLoc");
      methods.push_back(data_model.getExpansionLoc);
      data_model.getInnerType11 = arboretum_create_named_node("/clang/MacroQualifiedTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType11);
      data_model.getLocalSourceRange15 = arboretum_create_named_node("/clang/MacroQualifiedTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange15);
    arboretum_create_edge(data_model.MacroQualifiedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentNameTypeLoc = arboretum_create_named_node("/clang/DependentNameTypeLoc");
  arboretum_create_edge(data_model.DependentNameTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElaboratedKeywordLoc = arboretum_create_named_node("/clang/DependentNameTypeLoc/getElaboratedKeywordLoc");
      methods.push_back(data_model.getElaboratedKeywordLoc);
      data_model.getQualifierLoc14 = arboretum_create_named_node("/clang/DependentNameTypeLoc/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc14);
      data_model.getNameLoc8 = arboretum_create_named_node("/clang/DependentNameTypeLoc/getNameLoc");
      methods.push_back(data_model.getNameLoc8);
      data_model.getLocalSourceRange16 = arboretum_create_named_node("/clang/DependentNameTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange16);
    arboretum_create_edge(data_model.DependentNameTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentAddressSpaceTypeLoc = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc");
  arboretum_create_edge(data_model.DependentAddressSpaceTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAttrNameLoc = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc/getAttrNameLoc");
      methods.push_back(data_model.getAttrNameLoc);
      data_model.getAttrExprOperand = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc/getAttrExprOperand");
      methods.push_back(data_model.getAttrExprOperand);
      data_model.getAttrOperandParensRange = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc/getAttrOperandParensRange");
      methods.push_back(data_model.getAttrOperandParensRange);
      data_model.getLocalSourceRange17 = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange17);
      data_model.getInnerType12 = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType12);
      data_model.getPointeeTypeLoc = arboretum_create_named_node("/clang/DependentAddressSpaceTypeLoc/getPointeeTypeLoc");
      methods.push_back(data_model.getPointeeTypeLoc);
    arboretum_create_edge(data_model.DependentAddressSpaceTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.GNUInlineAttr = arboretum_create_named_node("/clang/GNUInlineAttr");
  arboretum_create_edge(data_model.GNUInlineAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.GNUInlineAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BlockPointerTypeLoc = arboretum_create_named_node("/clang/BlockPointerTypeLoc");
  arboretum_create_edge(data_model.BlockPointerTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCaretLoc = arboretum_create_named_node("/clang/BlockPointerTypeLoc/getCaretLoc");
      methods.push_back(data_model.getCaretLoc);
    arboretum_create_edge(data_model.BlockPointerTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCObjectPointerTypeLoc = arboretum_create_named_node("/clang/ObjCObjectPointerTypeLoc");
  arboretum_create_edge(data_model.ObjCObjectPointerTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCObjectPointerTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCBoxableAttr = arboretum_create_named_node("/clang/ObjCBoxableAttr");
  arboretum_create_edge(data_model.ObjCBoxableAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCBoxableAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionProtoTypeLoc = arboretum_create_named_node("/clang/FunctionProtoTypeLoc");
  arboretum_create_edge(data_model.FunctionProtoTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FunctionProtoTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCNonRuntimeProtocolAttr = arboretum_create_named_node("/clang/ObjCNonRuntimeProtocolAttr");
  arboretum_create_edge(data_model.ObjCNonRuntimeProtocolAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCNonRuntimeProtocolAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateSpecializationTypeLoc = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc");
  arboretum_create_edge(data_model.TemplateSpecializationTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateKeywordLoc6 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc6);
      data_model.getLAngleLoc4 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc4);
      data_model.getRAngleLoc4 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc4);
      data_model.getNumArgs7 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getNumArgs");
      methods.push_back(data_model.getNumArgs7);
      data_model.getTemplateNameLoc = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getTemplateNameLoc");
      methods.push_back(data_model.getTemplateNameLoc);
      data_model.getLocalSourceRange18 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange18);
      data_model.getExtraLocalDataSize3 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getExtraLocalDataSize");
      methods.push_back(data_model.getExtraLocalDataSize3);
      data_model.getExtraLocalDataAlignment3 = arboretum_create_named_node("/clang/TemplateSpecializationTypeLoc/getExtraLocalDataAlignment");
      methods.push_back(data_model.getExtraLocalDataAlignment3);
    arboretum_create_edge(data_model.TemplateSpecializationTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.QualifiedTypeLoc = arboretum_create_named_node("/clang/QualifiedTypeLoc");
  arboretum_create_edge(data_model.QualifiedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLocalSourceRange19 = arboretum_create_named_node("/clang/QualifiedTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange19);
      data_model.getUnqualifiedLoc1 = arboretum_create_named_node("/clang/QualifiedTypeLoc/getUnqualifiedLoc");
      methods.push_back(data_model.getUnqualifiedLoc1);
      data_model.getNextTypeLoc1 = arboretum_create_named_node("/clang/QualifiedTypeLoc/getNextTypeLoc");
      methods.push_back(data_model.getNextTypeLoc1);
      data_model.getLocalDataSize1 = arboretum_create_named_node("/clang/QualifiedTypeLoc/getLocalDataSize");
      methods.push_back(data_model.getLocalDataSize1);
      data_model.getLocalDataAlignment = arboretum_create_named_node("/clang/QualifiedTypeLoc/getLocalDataAlignment");
      methods.push_back(data_model.getLocalDataAlignment);
    arboretum_create_edge(data_model.QualifiedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BTFTagAttributedTypeLoc = arboretum_create_named_node("/clang/BTFTagAttributedTypeLoc");
  arboretum_create_edge(data_model.BTFTagAttributedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getWrappedLoc = arboretum_create_named_node("/clang/BTFTagAttributedTypeLoc/getWrappedLoc");
      methods.push_back(data_model.getWrappedLoc);
      data_model.getAttr2 = arboretum_create_named_node("/clang/BTFTagAttributedTypeLoc/getAttr");
      methods.push_back(data_model.getAttr2);
      data_model.getLocalSourceRange20 = arboretum_create_named_node("/clang/BTFTagAttributedTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange20);
      data_model.getInnerType13 = arboretum_create_named_node("/clang/BTFTagAttributedTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType13);
    arboretum_create_edge(data_model.BTFTagAttributedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.WebAssemblyImportNameAttr = arboretum_create_named_node("/clang/WebAssemblyImportNameAttr");
  arboretum_create_edge(data_model.WebAssemblyImportNameAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.WebAssemblyImportNameAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionTypeLoc = arboretum_create_named_node("/clang/FunctionTypeLoc");
  arboretum_create_edge(data_model.FunctionTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getLocalRangeBegin = arboretum_create_named_node("/clang/FunctionTypeLoc/getLocalRangeBegin");
      methods.push_back(data_model.getLocalRangeBegin);
      data_model.getLocalRangeEnd = arboretum_create_named_node("/clang/FunctionTypeLoc/getLocalRangeEnd");
      methods.push_back(data_model.getLocalRangeEnd);
      data_model.getLParenLoc18 = arboretum_create_named_node("/clang/FunctionTypeLoc/getLParenLoc");
      methods.push_back(data_model.getLParenLoc18);
      data_model.getRParenLoc38 = arboretum_create_named_node("/clang/FunctionTypeLoc/getRParenLoc");
      methods.push_back(data_model.getRParenLoc38);
      data_model.getParensRange1 = arboretum_create_named_node("/clang/FunctionTypeLoc/getParensRange");
      methods.push_back(data_model.getParensRange1);
      data_model.getExceptionSpecRange = arboretum_create_named_node("/clang/FunctionTypeLoc/getExceptionSpecRange");
      methods.push_back(data_model.getExceptionSpecRange);
      data_model.getParams4 = arboretum_create_named_node("/clang/FunctionTypeLoc/getParams");
      methods.push_back(data_model.getParams4);
      data_model.getParmArray = arboretum_create_named_node("/clang/FunctionTypeLoc/getParmArray");
      methods.push_back(data_model.getParmArray);
      data_model.getNumParams4 = arboretum_create_named_node("/clang/FunctionTypeLoc/getNumParams");
      methods.push_back(data_model.getNumParams4);
      data_model.getReturnLoc1 = arboretum_create_named_node("/clang/FunctionTypeLoc/getReturnLoc");
      methods.push_back(data_model.getReturnLoc1);
      data_model.getLocalSourceRange21 = arboretum_create_named_node("/clang/FunctionTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange21);
      data_model.getExtraLocalDataSize4 = arboretum_create_named_node("/clang/FunctionTypeLoc/getExtraLocalDataSize");
      methods.push_back(data_model.getExtraLocalDataSize4);
      data_model.getExtraLocalDataAlignment4 = arboretum_create_named_node("/clang/FunctionTypeLoc/getExtraLocalDataAlignment");
      methods.push_back(data_model.getExtraLocalDataAlignment4);
      data_model.getInnerType14 = arboretum_create_named_node("/clang/FunctionTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType14);
    arboretum_create_edge(data_model.FunctionTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPCancelDirective = arboretum_create_named_node("/clang/OMPCancelDirective");
  arboretum_create_edge(data_model.OMPCancelDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPCancelDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentSizedArrayTypeLoc = arboretum_create_named_node("/clang/DependentSizedArrayTypeLoc");
  arboretum_create_edge(data_model.DependentSizedArrayTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DependentSizedArrayTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCKindOfAttr = arboretum_create_named_node("/clang/ObjCKindOfAttr");
  arboretum_create_edge(data_model.ObjCKindOfAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCKindOfAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentTemplateSpecializationTypeLoc = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc");
  arboretum_create_edge(data_model.DependentTemplateSpecializationTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElaboratedKeywordLoc1 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getElaboratedKeywordLoc");
      methods.push_back(data_model.getElaboratedKeywordLoc1);
      data_model.getQualifierLoc15 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc15);
      data_model.getTemplateKeywordLoc7 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc7);
      data_model.getTemplateNameLoc1 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getTemplateNameLoc");
      methods.push_back(data_model.getTemplateNameLoc1);
      data_model.getLAngleLoc5 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc5);
      data_model.getRAngleLoc5 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc5);
      data_model.getNumArgs8 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getNumArgs");
      methods.push_back(data_model.getNumArgs8);
      data_model.getLocalSourceRange22 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange22);
      data_model.getExtraLocalDataSize5 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getExtraLocalDataSize");
      methods.push_back(data_model.getExtraLocalDataSize5);
      data_model.getExtraLocalDataAlignment5 = arboretum_create_named_node("/clang/DependentTemplateSpecializationTypeLoc/getExtraLocalDataAlignment");
      methods.push_back(data_model.getExtraLocalDataAlignment5);
    arboretum_create_edge(data_model.DependentTemplateSpecializationTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDispatchDirective = arboretum_create_named_node("/clang/OMPDispatchDirective");
  arboretum_create_edge(data_model.OMPDispatchDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDispatchDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.HLSLSV_DispatchThreadIDAttr = arboretum_create_named_node("/clang/HLSLSV_DispatchThreadIDAttr");
  arboretum_create_edge(data_model.HLSLSV_DispatchThreadIDAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.HLSLSV_DispatchThreadIDAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AllocSizeAttr = arboretum_create_named_node("/clang/AllocSizeAttr");
  arboretum_create_edge(data_model.AllocSizeAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AllocSizeAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.VariableArrayTypeLoc = arboretum_create_named_node("/clang/VariableArrayTypeLoc");
  arboretum_create_edge(data_model.VariableArrayTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.VariableArrayTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentScopeDeclRefExpr = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr");
  arboretum_create_edge(data_model.DependentScopeDeclRefExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameInfo6 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getNameInfo");
      methods.push_back(data_model.getNameInfo6);
      data_model.getDeclName1 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getDeclName");
      methods.push_back(data_model.getDeclName1);
      data_model.getLocation20 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getLocation");
      methods.push_back(data_model.getLocation20);
      data_model.getQualifierLoc16 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc16);
      data_model.getQualifier16 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getQualifier");
      methods.push_back(data_model.getQualifier16);
      data_model.getTemplateKeywordLoc8 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getTemplateKeywordLoc");
      methods.push_back(data_model.getTemplateKeywordLoc8);
      data_model.getLAngleLoc6 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc6);
      data_model.getRAngleLoc6 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc6);
      data_model.hasTemplateKeyword4 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/hasTemplateKeyword");
      methods.push_back(data_model.hasTemplateKeyword4);
      data_model.hasExplicitTemplateArgs5 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs5);
      data_model.getTemplateArgs6 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getTemplateArgs");
      methods.push_back(data_model.getTemplateArgs6);
      data_model.getNumTemplateArgs4 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getNumTemplateArgs");
      methods.push_back(data_model.getNumTemplateArgs4);
      data_model.template_arguments6 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/template_arguments");
      methods.push_back(data_model.template_arguments6);
      data_model.getBeginLoc160 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc160);
      data_model.getEndLoc158 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc158);
      data_model.children285 = arboretum_create_named_node("/clang/DependentScopeDeclRefExpr/children");
      methods.push_back(data_model.children285);
    arboretum_create_edge(data_model.DependentScopeDeclRefExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MatrixTypeLoc = arboretum_create_named_node("/clang/MatrixTypeLoc");
  arboretum_create_edge(data_model.MatrixTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAttrNameLoc1 = arboretum_create_named_node("/clang/MatrixTypeLoc/getAttrNameLoc");
      methods.push_back(data_model.getAttrNameLoc1);
      data_model.getAttrRowOperand = arboretum_create_named_node("/clang/MatrixTypeLoc/getAttrRowOperand");
      methods.push_back(data_model.getAttrRowOperand);
      data_model.getAttrColumnOperand = arboretum_create_named_node("/clang/MatrixTypeLoc/getAttrColumnOperand");
      methods.push_back(data_model.getAttrColumnOperand);
      data_model.getAttrOperandParensRange1 = arboretum_create_named_node("/clang/MatrixTypeLoc/getAttrOperandParensRange");
      methods.push_back(data_model.getAttrOperandParensRange1);
      data_model.getLocalSourceRange23 = arboretum_create_named_node("/clang/MatrixTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange23);
    arboretum_create_edge(data_model.MatrixTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MSDependentExistsStmt = arboretum_create_named_node("/clang/MSDependentExistsStmt");
  arboretum_create_edge(data_model.MSDependentExistsStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getKeywordLoc3 = arboretum_create_named_node("/clang/MSDependentExistsStmt/getKeywordLoc");
      methods.push_back(data_model.getKeywordLoc3);
      data_model.isIfExists = arboretum_create_named_node("/clang/MSDependentExistsStmt/isIfExists");
      methods.push_back(data_model.isIfExists);
      data_model.isIfNotExists = arboretum_create_named_node("/clang/MSDependentExistsStmt/isIfNotExists");
      methods.push_back(data_model.isIfNotExists);
      data_model.getQualifierLoc17 = arboretum_create_named_node("/clang/MSDependentExistsStmt/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc17);
      data_model.getNameInfo7 = arboretum_create_named_node("/clang/MSDependentExistsStmt/getNameInfo");
      methods.push_back(data_model.getNameInfo7);
      data_model.getSubStmt14 = arboretum_create_named_node("/clang/MSDependentExistsStmt/getSubStmt");
      methods.push_back(data_model.getSubStmt14);
      data_model.getBeginLoc161 = arboretum_create_named_node("/clang/MSDependentExistsStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc161);
      data_model.getEndLoc159 = arboretum_create_named_node("/clang/MSDependentExistsStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc159);
      data_model.children287 = arboretum_create_named_node("/clang/MSDependentExistsStmt/children");
      methods.push_back(data_model.children287);
    arboretum_create_edge(data_model.MSDependentExistsStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PatchableFunctionEntryAttr = arboretum_create_named_node("/clang/PatchableFunctionEntryAttr");
  arboretum_create_edge(data_model.PatchableFunctionEntryAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.PatchableFunctionEntryAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnaryTransformTypeLoc = arboretum_create_named_node("/clang/UnaryTransformTypeLoc");
  arboretum_create_edge(data_model.UnaryTransformTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getKWLoc2 = arboretum_create_named_node("/clang/UnaryTransformTypeLoc/getKWLoc");
      methods.push_back(data_model.getKWLoc2);
      data_model.getLParenLoc19 = arboretum_create_named_node("/clang/UnaryTransformTypeLoc/getLParenLoc");
      methods.push_back(data_model.getLParenLoc19);
      data_model.getRParenLoc39 = arboretum_create_named_node("/clang/UnaryTransformTypeLoc/getRParenLoc");
      methods.push_back(data_model.getRParenLoc39);
      data_model.getUnderlyingTInfo = arboretum_create_named_node("/clang/UnaryTransformTypeLoc/getUnderlyingTInfo");
      methods.push_back(data_model.getUnderlyingTInfo);
      data_model.getLocalSourceRange24 = arboretum_create_named_node("/clang/UnaryTransformTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange24);
      data_model.getParensRange2 = arboretum_create_named_node("/clang/UnaryTransformTypeLoc/getParensRange");
      methods.push_back(data_model.getParensRange2);
    arboretum_create_edge(data_model.UnaryTransformTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CoroutineSuspendExpr = arboretum_create_named_node("/clang/CoroutineSuspendExpr");
  arboretum_create_edge(data_model.CoroutineSuspendExpr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getCommonExpr1 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getCommonExpr");
      methods.push_back(data_model.getCommonExpr1);
      data_model.getOpaqueValue1 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getOpaqueValue");
      methods.push_back(data_model.getOpaqueValue1);
      data_model.getReadyExpr = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getReadyExpr");
      methods.push_back(data_model.getReadyExpr);
      data_model.getSuspendExpr = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getSuspendExpr");
      methods.push_back(data_model.getSuspendExpr);
      data_model.getResumeExpr = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getResumeExpr");
      methods.push_back(data_model.getResumeExpr);
      data_model.getOperand3 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getOperand");
      methods.push_back(data_model.getOperand3);
      data_model.getKeywordLoc4 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getKeywordLoc");
      methods.push_back(data_model.getKeywordLoc4);
      data_model.getBeginLoc162 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getBeginLoc");
      methods.push_back(data_model.getBeginLoc162);
      data_model.getEndLoc160 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/getEndLoc");
      methods.push_back(data_model.getEndLoc160);
      data_model.children289 = arboretum_create_named_node("/clang/CoroutineSuspendExpr/children");
      methods.push_back(data_model.children289);
    arboretum_create_edge(data_model.CoroutineSuspendExpr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AnyX86NoCallerSavedRegistersAttr = arboretum_create_named_node("/clang/AnyX86NoCallerSavedRegistersAttr");
  arboretum_create_edge(data_model.AnyX86NoCallerSavedRegistersAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AnyX86NoCallerSavedRegistersAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RecordType = arboretum_create_named_node("/clang/RecordType");
  arboretum_create_edge(data_model.RecordType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl16 = arboretum_create_named_node("/clang/RecordType/getDecl");
      methods.push_back(data_model.getDecl16);
      data_model.hasConstFields = arboretum_create_named_node("/clang/RecordType/hasConstFields");
      methods.push_back(data_model.hasConstFields);
      data_model.isSugared49 = arboretum_create_named_node("/clang/RecordType/isSugared");
      methods.push_back(data_model.isSugared49);
      data_model.desugar49 = arboretum_create_named_node("/clang/RecordType/desugar");
      methods.push_back(data_model.desugar49);
    arboretum_create_edge(data_model.RecordType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeNullUnspecifiedAttr = arboretum_create_named_node("/clang/TypeNullUnspecifiedAttr");
  arboretum_create_edge(data_model.TypeNullUnspecifiedAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TypeNullUnspecifiedAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.UnqualTypeLoc = arboretum_create_named_node("/clang/UnqualTypeLoc");
  arboretum_create_edge(data_model.UnqualTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTypePtr1 = arboretum_create_named_node("/clang/UnqualTypeLoc/getTypePtr");
      methods.push_back(data_model.getTypePtr1);
      data_model.getTypeLocClass1 = arboretum_create_named_node("/clang/UnqualTypeLoc/getTypeLocClass");
      methods.push_back(data_model.getTypeLocClass1);
    arboretum_create_edge(data_model.UnqualTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.CUDAInvalidTargetAttr = arboretum_create_named_node("/clang/CUDAInvalidTargetAttr");
  arboretum_create_edge(data_model.CUDAInvalidTargetAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.CUDAInvalidTargetAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeOfTypeLoc = arboretum_create_named_node("/clang/TypeOfTypeLoc");
  arboretum_create_edge(data_model.TypeOfTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnmodifiedType1 = arboretum_create_named_node("/clang/TypeOfTypeLoc/getUnmodifiedType");
      methods.push_back(data_model.getUnmodifiedType1);
      data_model.getUnmodifiedTInfo = arboretum_create_named_node("/clang/TypeOfTypeLoc/getUnmodifiedTInfo");
      methods.push_back(data_model.getUnmodifiedTInfo);
    arboretum_create_edge(data_model.TypeOfTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeducedTypeLoc = arboretum_create_named_node("/clang/DeducedTypeLoc");
  arboretum_create_edge(data_model.DeducedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DeducedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.NoReturnAttr = arboretum_create_named_node("/clang/NoReturnAttr");
  arboretum_create_edge(data_model.NoReturnAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.NoReturnAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.IncompleteArrayTypeLoc = arboretum_create_named_node("/clang/IncompleteArrayTypeLoc");
  arboretum_create_edge(data_model.IncompleteArrayTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.IncompleteArrayTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeOfExprTypeLoc = arboretum_create_named_node("/clang/TypeOfExprTypeLoc");
  arboretum_create_edge(data_model.TypeOfExprTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getUnderlyingExpr3 = arboretum_create_named_node("/clang/TypeOfExprTypeLoc/getUnderlyingExpr");
      methods.push_back(data_model.getUnderlyingExpr3);
      data_model.getLocalSourceRange25 = arboretum_create_named_node("/clang/TypeOfExprTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange25);
    arboretum_create_edge(data_model.TypeOfExprTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ElaboratedTypeLoc = arboretum_create_named_node("/clang/ElaboratedTypeLoc");
  arboretum_create_edge(data_model.ElaboratedTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getElaboratedKeywordLoc2 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getElaboratedKeywordLoc");
      methods.push_back(data_model.getElaboratedKeywordLoc2);
      data_model.getQualifierLoc18 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getQualifierLoc");
      methods.push_back(data_model.getQualifierLoc18);
      data_model.getLocalSourceRange26 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange26);
      data_model.getNamedTypeLoc = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getNamedTypeLoc");
      methods.push_back(data_model.getNamedTypeLoc);
      data_model.getInnerType15 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType15);
      data_model.isEmpty1 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/isEmpty");
      methods.push_back(data_model.isEmpty1);
      data_model.getLocalDataAlignment1 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getLocalDataAlignment");
      methods.push_back(data_model.getLocalDataAlignment1);
      data_model.getLocalDataSize2 = arboretum_create_named_node("/clang/ElaboratedTypeLoc/getLocalDataSize");
      methods.push_back(data_model.getLocalDataSize2);
    arboretum_create_edge(data_model.ElaboratedTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ReferenceTypeLoc = arboretum_create_named_node("/clang/ReferenceTypeLoc");
  arboretum_create_edge(data_model.ReferenceTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getInnerType16 = arboretum_create_named_node("/clang/ReferenceTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType16);
    arboretum_create_edge(data_model.ReferenceTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ConstantArrayTypeLoc = arboretum_create_named_node("/clang/ConstantArrayTypeLoc");
  arboretum_create_edge(data_model.ConstantArrayTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ConstantArrayTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPDistributeSimdDirective = arboretum_create_named_node("/clang/OMPDistributeSimdDirective");
  arboretum_create_edge(data_model.OMPDistributeSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPDistributeSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.RecordTypeLoc = arboretum_create_named_node("/clang/RecordTypeLoc");
  arboretum_create_edge(data_model.RecordTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl17 = arboretum_create_named_node("/clang/RecordTypeLoc/getDecl");
      methods.push_back(data_model.getDecl17);
    arboretum_create_edge(data_model.RecordTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AssertSharedLockAttr = arboretum_create_named_node("/clang/AssertSharedLockAttr");
  arboretum_create_edge(data_model.AssertSharedLockAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.AssertSharedLockAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.AutoTypeLoc = arboretum_create_named_node("/clang/AutoTypeLoc");
  arboretum_create_edge(data_model.AutoTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getAutoKeyword = arboretum_create_named_node("/clang/AutoTypeLoc/getAutoKeyword");
      methods.push_back(data_model.getAutoKeyword);
      data_model.isDecltypeAuto1 = arboretum_create_named_node("/clang/AutoTypeLoc/isDecltypeAuto");
      methods.push_back(data_model.isDecltypeAuto1);
      data_model.getRParenLoc40 = arboretum_create_named_node("/clang/AutoTypeLoc/getRParenLoc");
      methods.push_back(data_model.getRParenLoc40);
      data_model.isConstrained1 = arboretum_create_named_node("/clang/AutoTypeLoc/isConstrained");
      methods.push_back(data_model.isConstrained1);
      data_model.getConceptReference1 = arboretum_create_named_node("/clang/AutoTypeLoc/getConceptReference");
      methods.push_back(data_model.getConceptReference1);
      data_model.getNestedNameSpecifierLoc1 = arboretum_create_named_node("/clang/AutoTypeLoc/getNestedNameSpecifierLoc");
      methods.push_back(data_model.getNestedNameSpecifierLoc1);
      data_model.getTemplateKWLoc1 = arboretum_create_named_node("/clang/AutoTypeLoc/getTemplateKWLoc");
      methods.push_back(data_model.getTemplateKWLoc1);
      data_model.getConceptNameLoc1 = arboretum_create_named_node("/clang/AutoTypeLoc/getConceptNameLoc");
      methods.push_back(data_model.getConceptNameLoc1);
      data_model.getFoundDecl6 = arboretum_create_named_node("/clang/AutoTypeLoc/getFoundDecl");
      methods.push_back(data_model.getFoundDecl6);
      data_model.getNamedConcept1 = arboretum_create_named_node("/clang/AutoTypeLoc/getNamedConcept");
      methods.push_back(data_model.getNamedConcept1);
      data_model.getConceptNameInfo1 = arboretum_create_named_node("/clang/AutoTypeLoc/getConceptNameInfo");
      methods.push_back(data_model.getConceptNameInfo1);
      data_model.hasExplicitTemplateArgs6 = arboretum_create_named_node("/clang/AutoTypeLoc/hasExplicitTemplateArgs");
      methods.push_back(data_model.hasExplicitTemplateArgs6);
      data_model.getLAngleLoc7 = arboretum_create_named_node("/clang/AutoTypeLoc/getLAngleLoc");
      methods.push_back(data_model.getLAngleLoc7);
      data_model.getRAngleLoc7 = arboretum_create_named_node("/clang/AutoTypeLoc/getRAngleLoc");
      methods.push_back(data_model.getRAngleLoc7);
      data_model.getNumArgs9 = arboretum_create_named_node("/clang/AutoTypeLoc/getNumArgs");
      methods.push_back(data_model.getNumArgs9);
      data_model.getLocalSourceRange27 = arboretum_create_named_node("/clang/AutoTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange27);
    arboretum_create_edge(data_model.AutoTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCForCollectionStmt = arboretum_create_named_node("/clang/ObjCForCollectionStmt");
  arboretum_create_edge(data_model.ObjCForCollectionStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCForCollectionStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ErrorAttr = arboretum_create_named_node("/clang/ErrorAttr");
  arboretum_create_edge(data_model.ErrorAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ErrorAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TagTypeLoc = arboretum_create_named_node("/clang/TagTypeLoc");
  arboretum_create_edge(data_model.TagTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl18 = arboretum_create_named_node("/clang/TagTypeLoc/getDecl");
      methods.push_back(data_model.getDecl18);
      data_model.isDefinition = arboretum_create_named_node("/clang/TagTypeLoc/isDefinition");
      methods.push_back(data_model.isDefinition);
    arboretum_create_edge(data_model.TagTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TypeSpecTypeLoc = arboretum_create_named_node("/clang/TypeSpecTypeLoc");
  arboretum_create_edge(data_model.TypeSpecTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getNameLoc9 = arboretum_create_named_node("/clang/TypeSpecTypeLoc/getNameLoc");
      methods.push_back(data_model.getNameLoc9);
      data_model.getLocalSourceRange28 = arboretum_create_named_node("/clang/TypeSpecTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange28);
    arboretum_create_edge(data_model.TypeSpecTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DependentBitIntTypeLoc = arboretum_create_named_node("/clang/DependentBitIntTypeLoc");
  arboretum_create_edge(data_model.DependentBitIntTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.DependentBitIntTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ObjCTypeParamType = arboretum_create_named_node("/clang/ObjCTypeParamType");
  arboretum_create_edge(data_model.ObjCTypeParamType, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.ObjCTypeParamType, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.BitIntTypeLoc = arboretum_create_named_node("/clang/BitIntTypeLoc");
  arboretum_create_edge(data_model.BitIntTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.BitIntTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SEHFinallyStmt = arboretum_create_named_node("/clang/SEHFinallyStmt");
  arboretum_create_edge(data_model.SEHFinallyStmt, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getBeginLoc164 = arboretum_create_named_node("/clang/SEHFinallyStmt/getBeginLoc");
      methods.push_back(data_model.getBeginLoc164);
      data_model.getFinallyLoc = arboretum_create_named_node("/clang/SEHFinallyStmt/getFinallyLoc");
      methods.push_back(data_model.getFinallyLoc);
      data_model.getEndLoc162 = arboretum_create_named_node("/clang/SEHFinallyStmt/getEndLoc");
      methods.push_back(data_model.getEndLoc162);
      data_model.getBlock1 = arboretum_create_named_node("/clang/SEHFinallyStmt/getBlock");
      methods.push_back(data_model.getBlock1);
      data_model.children293 = arboretum_create_named_node("/clang/SEHFinallyStmt/children");
      methods.push_back(data_model.children293);
    arboretum_create_edge(data_model.SEHFinallyStmt, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.DeducedTemplateSpecializationTypeLoc = arboretum_create_named_node("/clang/DeducedTemplateSpecializationTypeLoc");
  arboretum_create_edge(data_model.DeducedTemplateSpecializationTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getTemplateNameLoc2 = arboretum_create_named_node("/clang/DeducedTemplateSpecializationTypeLoc/getTemplateNameLoc");
      methods.push_back(data_model.getTemplateNameLoc2);
    arboretum_create_edge(data_model.DeducedTemplateSpecializationTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PackExpansionTypeLoc = arboretum_create_named_node("/clang/PackExpansionTypeLoc");
  arboretum_create_edge(data_model.PackExpansionTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getEllipsisLoc7 = arboretum_create_named_node("/clang/PackExpansionTypeLoc/getEllipsisLoc");
      methods.push_back(data_model.getEllipsisLoc7);
      data_model.getLocalSourceRange29 = arboretum_create_named_node("/clang/PackExpansionTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange29);
      data_model.getPatternLoc = arboretum_create_named_node("/clang/PackExpansionTypeLoc/getPatternLoc");
      methods.push_back(data_model.getPatternLoc);
      data_model.getInnerType17 = arboretum_create_named_node("/clang/PackExpansionTypeLoc/getInnerType");
      methods.push_back(data_model.getInnerType17);
    arboretum_create_edge(data_model.PackExpansionTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TemplateTypeParmTypeLoc = arboretum_create_named_node("/clang/TemplateTypeParmTypeLoc");
  arboretum_create_edge(data_model.TemplateTypeParmTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getDecl20 = arboretum_create_named_node("/clang/TemplateTypeParmTypeLoc/getDecl");
      methods.push_back(data_model.getDecl20);
    arboretum_create_edge(data_model.TemplateTypeParmTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.MemberPointerTypeLoc = arboretum_create_named_node("/clang/MemberPointerTypeLoc");
  arboretum_create_edge(data_model.MemberPointerTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getStarLoc3 = arboretum_create_named_node("/clang/MemberPointerTypeLoc/getStarLoc");
      methods.push_back(data_model.getStarLoc3);
      data_model.getClass1 = arboretum_create_named_node("/clang/MemberPointerTypeLoc/getClass");
      methods.push_back(data_model.getClass1);
      data_model.getClassTInfo = arboretum_create_named_node("/clang/MemberPointerTypeLoc/getClassTInfo");
      methods.push_back(data_model.getClassTInfo);
      data_model.getLocalSourceRange30 = arboretum_create_named_node("/clang/MemberPointerTypeLoc/getLocalSourceRange");
      methods.push_back(data_model.getLocalSourceRange30);
    arboretum_create_edge(data_model.MemberPointerTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.SubstTemplateTypeParmTypeLoc = arboretum_create_named_node("/clang/SubstTemplateTypeParmTypeLoc");
  arboretum_create_edge(data_model.SubstTemplateTypeParmTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.SubstTemplateTypeParmTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.OMPMasterTaskLoopSimdDirective = arboretum_create_named_node("/clang/OMPMasterTaskLoopSimdDirective");
  arboretum_create_edge(data_model.OMPMasterTaskLoopSimdDirective, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.OMPMasterTaskLoopSimdDirective, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.PragmaDetectMismatchDecl = arboretum_create_named_node("/clang/PragmaDetectMismatchDecl");
  arboretum_create_edge(data_model.PragmaDetectMismatchDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getName17 = arboretum_create_named_node("/clang/PragmaDetectMismatchDecl/getName");
      methods.push_back(data_model.getName17);
      data_model.getValue12 = arboretum_create_named_node("/clang/PragmaDetectMismatchDecl/getValue");
      methods.push_back(data_model.getValue12);
    arboretum_create_edge(data_model.PragmaDetectMismatchDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.LabelDecl = arboretum_create_named_node("/clang/LabelDecl");
  arboretum_create_edge(data_model.LabelDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getStmt2 = arboretum_create_named_node("/clang/LabelDecl/getStmt");
      methods.push_back(data_model.getStmt2);
      data_model.isGnuLocal = arboretum_create_named_node("/clang/LabelDecl/isGnuLocal");
      methods.push_back(data_model.isGnuLocal);
      data_model.getSourceRange61 = arboretum_create_named_node("/clang/LabelDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange61);
      data_model.isMSAsmLabel = arboretum_create_named_node("/clang/LabelDecl/isMSAsmLabel");
      methods.push_back(data_model.isMSAsmLabel);
      data_model.isResolvedMSAsmLabel = arboretum_create_named_node("/clang/LabelDecl/isResolvedMSAsmLabel");
      methods.push_back(data_model.isResolvedMSAsmLabel);
      data_model.getMSAsmLabel = arboretum_create_named_node("/clang/LabelDecl/getMSAsmLabel");
      methods.push_back(data_model.getMSAsmLabel);
    arboretum_create_edge(data_model.LabelDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.TLSModelAttr = arboretum_create_named_node("/clang/TLSModelAttr");
  arboretum_create_edge(data_model.TLSModelAttr, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.TLSModelAttr, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.FunctionNoProtoTypeLoc = arboretum_create_named_node("/clang/FunctionNoProtoTypeLoc");
  arboretum_create_edge(data_model.FunctionNoProtoTypeLoc, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
    arboretum_create_edge(data_model.FunctionNoProtoTypeLoc, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ImplicitParamDecl = arboretum_create_named_node("/clang/ImplicitParamDecl");
  arboretum_create_edge(data_model.ImplicitParamDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getParameterKind = arboretum_create_named_node("/clang/ImplicitParamDecl/getParameterKind");
      methods.push_back(data_model.getParameterKind);
    arboretum_create_edge(data_model.ImplicitParamDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  data_model.ParmVarDecl = arboretum_create_named_node("/clang/ParmVarDecl");
  arboretum_create_edge(data_model.ParmVarDecl, data_model.meta_class_, data_model.CXXRecordDecl);
  {
    std::vector<Entity*> methods;
      data_model.getSourceRange62 = arboretum_create_named_node("/clang/ParmVarDecl/getSourceRange");
      methods.push_back(data_model.getSourceRange62);
      data_model.isObjCMethodParameter = arboretum_create_named_node("/clang/ParmVarDecl/isObjCMethodParameter");
      methods.push_back(data_model.isObjCMethodParameter);
      data_model.isDestroyedInCallee = arboretum_create_named_node("/clang/ParmVarDecl/isDestroyedInCallee");
      methods.push_back(data_model.isDestroyedInCallee);
      data_model.getFunctionScopeDepth = arboretum_create_named_node("/clang/ParmVarDecl/getFunctionScopeDepth");
      methods.push_back(data_model.getFunctionScopeDepth);
      data_model.getFunctionScopeIndex = arboretum_create_named_node("/clang/ParmVarDecl/getFunctionScopeIndex");
      methods.push_back(data_model.getFunctionScopeIndex);
      data_model.getObjCDeclQualifier1 = arboretum_create_named_node("/clang/ParmVarDecl/getObjCDeclQualifier");
      methods.push_back(data_model.getObjCDeclQualifier1);
      data_model.isKNRPromoted = arboretum_create_named_node("/clang/ParmVarDecl/isKNRPromoted");
      methods.push_back(data_model.isKNRPromoted);
      data_model.isExplicitObjectParameter = arboretum_create_named_node("/clang/ParmVarDecl/isExplicitObjectParameter");
      methods.push_back(data_model.isExplicitObjectParameter);
      data_model.getExplicitObjectParamThisLoc = arboretum_create_named_node("/clang/ParmVarDecl/getExplicitObjectParamThisLoc");
      methods.push_back(data_model.getExplicitObjectParamThisLoc);
      data_model.getDefaultArg1 = arboretum_create_named_node("/clang/ParmVarDecl/getDefaultArg");
      methods.push_back(data_model.getDefaultArg1);
      data_model.getDefaultArgRange = arboretum_create_named_node("/clang/ParmVarDecl/getDefaultArgRange");
      methods.push_back(data_model.getDefaultArgRange);
      data_model.getUninstantiatedDefaultArg1 = arboretum_create_named_node("/clang/ParmVarDecl/getUninstantiatedDefaultArg");
      methods.push_back(data_model.getUninstantiatedDefaultArg1);
      data_model.hasDefaultArg = arboretum_create_named_node("/clang/ParmVarDecl/hasDefaultArg");
      methods.push_back(data_model.hasDefaultArg);
      data_model.hasUnparsedDefaultArg = arboretum_create_named_node("/clang/ParmVarDecl/hasUnparsedDefaultArg");
      methods.push_back(data_model.hasUnparsedDefaultArg);
      data_model.hasUninstantiatedDefaultArg = arboretum_create_named_node("/clang/ParmVarDecl/hasUninstantiatedDefaultArg");
      methods.push_back(data_model.hasUninstantiatedDefaultArg);
      data_model.hasInheritedDefaultArg = arboretum_create_named_node("/clang/ParmVarDecl/hasInheritedDefaultArg");
      methods.push_back(data_model.hasInheritedDefaultArg);
      data_model.getOriginalType1 = arboretum_create_named_node("/clang/ParmVarDecl/getOriginalType");
      methods.push_back(data_model.getOriginalType1);
    arboretum_create_edge(data_model.ParmVarDecl, data_model.meta_method_, data_model.arboretum_node_for(data_model.CXXMethodDecl, methods));
  }
  {
    data_model.enum_ValueKind_0 = arboretum_create_named_node("/clang/APValue/ValueKind");
    arboretum_create_edge(data_model.enum_ValueKind_0, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_None_1 = arboretum_create_named_node("/clang/APValue/None");
      arboretum_create_edge(data_model.enum_constant_None_1, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_1);
    }
    {
      data_model.enum_constant_Indeterminate_2 = arboretum_create_named_node("/clang/APValue/Indeterminate");
      arboretum_create_edge(data_model.enum_constant_Indeterminate_2, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Indeterminate_2);
    }
    {
      data_model.enum_constant_Int_3 = arboretum_create_named_node("/clang/APValue/Int");
      arboretum_create_edge(data_model.enum_constant_Int_3, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Int_3);
    }
    {
      data_model.enum_constant_Float_4 = arboretum_create_named_node("/clang/APValue/Float");
      arboretum_create_edge(data_model.enum_constant_Float_4, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Float_4);
    }
    {
      data_model.enum_constant_FixedPoint_5 = arboretum_create_named_node("/clang/APValue/FixedPoint");
      arboretum_create_edge(data_model.enum_constant_FixedPoint_5, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FixedPoint_5);
    }
    {
      data_model.enum_constant_ComplexInt_6 = arboretum_create_named_node("/clang/APValue/ComplexInt");
      arboretum_create_edge(data_model.enum_constant_ComplexInt_6, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ComplexInt_6);
    }
    {
      data_model.enum_constant_ComplexFloat_7 = arboretum_create_named_node("/clang/APValue/ComplexFloat");
      arboretum_create_edge(data_model.enum_constant_ComplexFloat_7, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ComplexFloat_7);
    }
    {
      data_model.enum_constant_LValue_8 = arboretum_create_named_node("/clang/APValue/LValue");
      arboretum_create_edge(data_model.enum_constant_LValue_8, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LValue_8);
    }
    {
      data_model.enum_constant_Vector_9 = arboretum_create_named_node("/clang/APValue/Vector");
      arboretum_create_edge(data_model.enum_constant_Vector_9, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Vector_9);
    }
    {
      data_model.enum_constant_Array_10 = arboretum_create_named_node("/clang/APValue/Array");
      arboretum_create_edge(data_model.enum_constant_Array_10, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Array_10);
    }
    {
      data_model.enum_constant_Struct_11 = arboretum_create_named_node("/clang/APValue/Struct");
      arboretum_create_edge(data_model.enum_constant_Struct_11, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Struct_11);
    }
    {
      data_model.enum_constant_Union_12 = arboretum_create_named_node("/clang/APValue/Union");
      arboretum_create_edge(data_model.enum_constant_Union_12, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Union_12);
    }
    {
      data_model.enum_constant_MemberPointer_13 = arboretum_create_named_node("/clang/APValue/MemberPointer");
      arboretum_create_edge(data_model.enum_constant_MemberPointer_13, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MemberPointer_13);
    }
    {
      data_model.enum_constant_AddrLabelDiff_14 = arboretum_create_named_node("/clang/APValue/AddrLabelDiff");
      arboretum_create_edge(data_model.enum_constant_AddrLabelDiff_14, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AddrLabelDiff_14);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_AccessSpecifier_15 = arboretum_create_named_node("/clang/AccessSpecifier");
    arboretum_create_edge(data_model.enum_AccessSpecifier_15, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_AS_public_16 = arboretum_create_named_node("/clang/AS_public");
      arboretum_create_edge(data_model.enum_constant_AS_public_16, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AS_public_16);
    }
    {
      data_model.enum_constant_AS_protected_17 = arboretum_create_named_node("/clang/AS_protected");
      arboretum_create_edge(data_model.enum_constant_AS_protected_17, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AS_protected_17);
    }
    {
      data_model.enum_constant_AS_private_18 = arboretum_create_named_node("/clang/AS_private");
      arboretum_create_edge(data_model.enum_constant_AS_private_18, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AS_private_18);
    }
    {
      data_model.enum_constant_AS_none_19 = arboretum_create_named_node("/clang/AS_none");
      arboretum_create_edge(data_model.enum_constant_AS_none_19, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AS_none_19);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ArraySizeModifier_20 = arboretum_create_named_node("/clang/ArraySizeModifier");
    arboretum_create_edge(data_model.enum_ArraySizeModifier_20, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Normal_21 = arboretum_create_named_node("/clang/ArraySizeModifier/Normal");
      arboretum_create_edge(data_model.enum_constant_Normal_21, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Normal_21);
    }
    {
      data_model.enum_constant_Static_22 = arboretum_create_named_node("/clang/ArraySizeModifier/Static");
      arboretum_create_edge(data_model.enum_constant_Static_22, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Static_22);
    }
    {
      data_model.enum_constant_Star_23 = arboretum_create_named_node("/clang/ArraySizeModifier/Star");
      arboretum_create_edge(data_model.enum_constant_Star_23, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Star_23);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ArrayTypeTrait_24 = arboretum_create_named_node("/clang/ArrayTypeTrait");
    arboretum_create_edge(data_model.enum_ArrayTypeTrait_24, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_ATT_ArrayRank_25 = arboretum_create_named_node("/clang/ATT_ArrayRank");
      arboretum_create_edge(data_model.enum_constant_ATT_ArrayRank_25, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ATT_ArrayRank_25);
    }
    {
      data_model.enum_constant_ATT_ArrayExtent_26 = arboretum_create_named_node("/clang/ATT_ArrayExtent");
      arboretum_create_edge(data_model.enum_constant_ATT_ArrayExtent_26, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ATT_ArrayExtent_26);
    }
    {
      data_model.enum_constant_ATT_Last_27 = arboretum_create_named_node("/clang/ATT_Last");
      arboretum_create_edge(data_model.enum_constant_ATT_Last_27, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ATT_Last_27);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_AtomicOp_28 = arboretum_create_named_node("/clang/AtomicExpr/AtomicOp");
    arboretum_create_edge(data_model.enum_AtomicOp_28, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_AO__c11_atomic_init_29 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_init");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_init_29, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_init_29);
    }
    {
      data_model.enum_constant_AO__c11_atomic_load_30 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_load");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_load_30, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_load_30);
    }
    {
      data_model.enum_constant_AO__c11_atomic_store_31 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_store");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_store_31, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_store_31);
    }
    {
      data_model.enum_constant_AO__c11_atomic_exchange_32 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_exchange_32, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_exchange_32);
    }
    {
      data_model.enum_constant_AO__c11_atomic_compare_exchange_strong_33 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_compare_exchange_strong");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_compare_exchange_strong_33, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_compare_exchange_strong_33);
    }
    {
      data_model.enum_constant_AO__c11_atomic_compare_exchange_weak_34 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_compare_exchange_weak");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_compare_exchange_weak_34, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_compare_exchange_weak_34);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_add_35 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_add");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_add_35, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_add_35);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_sub_36 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_sub");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_sub_36, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_sub_36);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_and_37 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_and");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_and_37, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_and_37);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_or_38 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_or");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_or_38, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_or_38);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_xor_39 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_xor");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_xor_39, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_xor_39);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_nand_40 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_nand");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_nand_40, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_nand_40);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_max_41 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_max");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_max_41, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_max_41);
    }
    {
      data_model.enum_constant_AO__c11_atomic_fetch_min_42 = arboretum_create_named_node("/clang/AtomicExpr/AO__c11_atomic_fetch_min");
      arboretum_create_edge(data_model.enum_constant_AO__c11_atomic_fetch_min_42, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__c11_atomic_fetch_min_42);
    }
    {
      data_model.enum_constant_AO__atomic_load_43 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_load");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_load_43, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_load_43);
    }
    {
      data_model.enum_constant_AO__atomic_load_n_44 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_load_n");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_load_n_44, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_load_n_44);
    }
    {
      data_model.enum_constant_AO__atomic_store_45 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_store");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_store_45, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_store_45);
    }
    {
      data_model.enum_constant_AO__atomic_store_n_46 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_store_n");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_store_n_46, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_store_n_46);
    }
    {
      data_model.enum_constant_AO__atomic_exchange_47 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_exchange_47, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_exchange_47);
    }
    {
      data_model.enum_constant_AO__atomic_exchange_n_48 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_exchange_n");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_exchange_n_48, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_exchange_n_48);
    }
    {
      data_model.enum_constant_AO__atomic_compare_exchange_49 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_compare_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_compare_exchange_49, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_compare_exchange_49);
    }
    {
      data_model.enum_constant_AO__atomic_compare_exchange_n_50 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_compare_exchange_n");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_compare_exchange_n_50, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_compare_exchange_n_50);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_add_51 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_add");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_add_51, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_add_51);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_sub_52 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_sub");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_sub_52, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_sub_52);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_and_53 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_and");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_and_53, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_and_53);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_or_54 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_or");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_or_54, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_or_54);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_xor_55 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_xor");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_xor_55, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_xor_55);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_nand_56 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_nand");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_nand_56, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_nand_56);
    }
    {
      data_model.enum_constant_AO__atomic_add_fetch_57 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_add_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_add_fetch_57, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_add_fetch_57);
    }
    {
      data_model.enum_constant_AO__atomic_sub_fetch_58 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_sub_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_sub_fetch_58, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_sub_fetch_58);
    }
    {
      data_model.enum_constant_AO__atomic_and_fetch_59 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_and_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_and_fetch_59, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_and_fetch_59);
    }
    {
      data_model.enum_constant_AO__atomic_or_fetch_60 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_or_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_or_fetch_60, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_or_fetch_60);
    }
    {
      data_model.enum_constant_AO__atomic_xor_fetch_61 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_xor_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_xor_fetch_61, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_xor_fetch_61);
    }
    {
      data_model.enum_constant_AO__atomic_max_fetch_62 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_max_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_max_fetch_62, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_max_fetch_62);
    }
    {
      data_model.enum_constant_AO__atomic_min_fetch_63 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_min_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_min_fetch_63, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_min_fetch_63);
    }
    {
      data_model.enum_constant_AO__atomic_nand_fetch_64 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_nand_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_nand_fetch_64, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_nand_fetch_64);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_load_65 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_load");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_load_65, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_load_65);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_load_n_66 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_load_n");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_load_n_66, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_load_n_66);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_store_67 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_store");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_store_67, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_store_67);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_store_n_68 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_store_n");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_store_n_68, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_store_n_68);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_exchange_69 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_exchange_69, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_exchange_69);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_exchange_n_70 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_exchange_n");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_exchange_n_70, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_exchange_n_70);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_compare_exchange_71 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_compare_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_compare_exchange_71, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_compare_exchange_71);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_compare_exchange_n_72 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_compare_exchange_n");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_compare_exchange_n_72, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_compare_exchange_n_72);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_add_73 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_add");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_add_73, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_add_73);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_sub_74 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_sub");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_sub_74, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_sub_74);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_and_75 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_and");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_and_75, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_and_75);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_or_76 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_or");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_or_76, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_or_76);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_xor_77 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_xor");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_xor_77, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_xor_77);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_nand_78 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_nand");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_nand_78, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_nand_78);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_add_fetch_79 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_add_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_add_fetch_79, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_add_fetch_79);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_sub_fetch_80 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_sub_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_sub_fetch_80, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_sub_fetch_80);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_and_fetch_81 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_and_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_and_fetch_81, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_and_fetch_81);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_or_fetch_82 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_or_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_or_fetch_82, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_or_fetch_82);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_xor_fetch_83 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_xor_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_xor_fetch_83, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_xor_fetch_83);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_max_fetch_84 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_max_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_max_fetch_84, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_max_fetch_84);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_min_fetch_85 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_min_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_min_fetch_85, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_min_fetch_85);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_nand_fetch_86 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_nand_fetch");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_nand_fetch_86, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_nand_fetch_86);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_min_87 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_min");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_min_87, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_min_87);
    }
    {
      data_model.enum_constant_AO__scoped_atomic_fetch_max_88 = arboretum_create_named_node("/clang/AtomicExpr/AO__scoped_atomic_fetch_max");
      arboretum_create_edge(data_model.enum_constant_AO__scoped_atomic_fetch_max_88, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__scoped_atomic_fetch_max_88);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_init_89 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_init");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_init_89, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_init_89);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_load_90 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_load");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_load_90, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_load_90);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_store_91 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_store");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_store_91, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_store_91);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_exchange_92 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_exchange_92, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_exchange_92);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_compare_exchange_strong_93 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_compare_exchange_strong");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_compare_exchange_strong_93, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_compare_exchange_strong_93);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_compare_exchange_weak_94 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_compare_exchange_weak");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_compare_exchange_weak_94, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_compare_exchange_weak_94);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_add_95 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_add");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_add_95, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_add_95);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_sub_96 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_sub");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_sub_96, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_sub_96);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_and_97 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_and");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_and_97, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_and_97);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_or_98 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_or");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_or_98, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_or_98);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_xor_99 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_xor");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_xor_99, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_xor_99);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_min_100 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_min");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_min_100, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_min_100);
    }
    {
      data_model.enum_constant_AO__opencl_atomic_fetch_max_101 = arboretum_create_named_node("/clang/AtomicExpr/AO__opencl_atomic_fetch_max");
      arboretum_create_edge(data_model.enum_constant_AO__opencl_atomic_fetch_max_101, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__opencl_atomic_fetch_max_101);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_min_102 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_min");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_min_102, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_min_102);
    }
    {
      data_model.enum_constant_AO__atomic_fetch_max_103 = arboretum_create_named_node("/clang/AtomicExpr/AO__atomic_fetch_max");
      arboretum_create_edge(data_model.enum_constant_AO__atomic_fetch_max_103, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__atomic_fetch_max_103);
    }
    {
      data_model.enum_constant_AO__hip_atomic_load_104 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_load");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_load_104, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_load_104);
    }
    {
      data_model.enum_constant_AO__hip_atomic_store_105 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_store");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_store_105, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_store_105);
    }
    {
      data_model.enum_constant_AO__hip_atomic_compare_exchange_weak_106 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_compare_exchange_weak");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_compare_exchange_weak_106, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_compare_exchange_weak_106);
    }
    {
      data_model.enum_constant_AO__hip_atomic_compare_exchange_strong_107 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_compare_exchange_strong");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_compare_exchange_strong_107, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_compare_exchange_strong_107);
    }
    {
      data_model.enum_constant_AO__hip_atomic_exchange_108 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_exchange");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_exchange_108, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_exchange_108);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_add_109 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_add");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_add_109, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_add_109);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_sub_110 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_sub");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_sub_110, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_sub_110);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_and_111 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_and");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_and_111, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_and_111);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_or_112 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_or");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_or_112, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_or_112);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_xor_113 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_xor");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_xor_113, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_xor_113);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_min_114 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_min");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_min_114, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_min_114);
    }
    {
      data_model.enum_constant_AO__hip_atomic_fetch_max_115 = arboretum_create_named_node("/clang/AtomicExpr/AO__hip_atomic_fetch_max");
      arboretum_create_edge(data_model.enum_constant_AO__hip_atomic_fetch_max_115, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AO__hip_atomic_fetch_max_115);
    }
    {
      data_model.enum_constant_BI_First_116 = arboretum_create_named_node("/clang/AtomicExpr/BI_First");
      arboretum_create_edge(data_model.enum_constant_BI_First_116, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BI_First_116);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_AutoTypeKeyword_117 = arboretum_create_named_node("/clang/AutoTypeKeyword");
    arboretum_create_edge(data_model.enum_AutoTypeKeyword_117, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Auto_118 = arboretum_create_named_node("/clang/AutoTypeKeyword/Auto");
      arboretum_create_edge(data_model.enum_constant_Auto_118, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Auto_118);
    }
    {
      data_model.enum_constant_DecltypeAuto_119 = arboretum_create_named_node("/clang/AutoTypeKeyword/DecltypeAuto");
      arboretum_create_edge(data_model.enum_constant_DecltypeAuto_119, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DecltypeAuto_119);
    }
    {
      data_model.enum_constant_GNUAutoType_120 = arboretum_create_named_node("/clang/AutoTypeKeyword/GNUAutoType");
      arboretum_create_edge(data_model.enum_constant_GNUAutoType_120, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_GNUAutoType_120);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_BinaryOperatorKind_121 = arboretum_create_named_node("/clang/BinaryOperatorKind");
    arboretum_create_edge(data_model.enum_BinaryOperatorKind_121, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_BO_PtrMemD_122 = arboretum_create_named_node("/clang/BO_PtrMemD");
      arboretum_create_edge(data_model.enum_constant_BO_PtrMemD_122, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_PtrMemD_122);
    }
    {
      data_model.enum_constant_BO_PtrMemI_123 = arboretum_create_named_node("/clang/BO_PtrMemI");
      arboretum_create_edge(data_model.enum_constant_BO_PtrMemI_123, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_PtrMemI_123);
    }
    {
      data_model.enum_constant_BO_Mul_124 = arboretum_create_named_node("/clang/BO_Mul");
      arboretum_create_edge(data_model.enum_constant_BO_Mul_124, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Mul_124);
    }
    {
      data_model.enum_constant_BO_Div_125 = arboretum_create_named_node("/clang/BO_Div");
      arboretum_create_edge(data_model.enum_constant_BO_Div_125, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Div_125);
    }
    {
      data_model.enum_constant_BO_Rem_126 = arboretum_create_named_node("/clang/BO_Rem");
      arboretum_create_edge(data_model.enum_constant_BO_Rem_126, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Rem_126);
    }
    {
      data_model.enum_constant_BO_Add_127 = arboretum_create_named_node("/clang/BO_Add");
      arboretum_create_edge(data_model.enum_constant_BO_Add_127, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Add_127);
    }
    {
      data_model.enum_constant_BO_Sub_128 = arboretum_create_named_node("/clang/BO_Sub");
      arboretum_create_edge(data_model.enum_constant_BO_Sub_128, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Sub_128);
    }
    {
      data_model.enum_constant_BO_Shl_129 = arboretum_create_named_node("/clang/BO_Shl");
      arboretum_create_edge(data_model.enum_constant_BO_Shl_129, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Shl_129);
    }
    {
      data_model.enum_constant_BO_Shr_130 = arboretum_create_named_node("/clang/BO_Shr");
      arboretum_create_edge(data_model.enum_constant_BO_Shr_130, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Shr_130);
    }
    {
      data_model.enum_constant_BO_Cmp_131 = arboretum_create_named_node("/clang/BO_Cmp");
      arboretum_create_edge(data_model.enum_constant_BO_Cmp_131, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Cmp_131);
    }
    {
      data_model.enum_constant_BO_LT_132 = arboretum_create_named_node("/clang/BO_LT");
      arboretum_create_edge(data_model.enum_constant_BO_LT_132, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_LT_132);
    }
    {
      data_model.enum_constant_BO_GT_133 = arboretum_create_named_node("/clang/BO_GT");
      arboretum_create_edge(data_model.enum_constant_BO_GT_133, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_GT_133);
    }
    {
      data_model.enum_constant_BO_LE_134 = arboretum_create_named_node("/clang/BO_LE");
      arboretum_create_edge(data_model.enum_constant_BO_LE_134, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_LE_134);
    }
    {
      data_model.enum_constant_BO_GE_135 = arboretum_create_named_node("/clang/BO_GE");
      arboretum_create_edge(data_model.enum_constant_BO_GE_135, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_GE_135);
    }
    {
      data_model.enum_constant_BO_EQ_136 = arboretum_create_named_node("/clang/BO_EQ");
      arboretum_create_edge(data_model.enum_constant_BO_EQ_136, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_EQ_136);
    }
    {
      data_model.enum_constant_BO_NE_137 = arboretum_create_named_node("/clang/BO_NE");
      arboretum_create_edge(data_model.enum_constant_BO_NE_137, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_NE_137);
    }
    {
      data_model.enum_constant_BO_And_138 = arboretum_create_named_node("/clang/BO_And");
      arboretum_create_edge(data_model.enum_constant_BO_And_138, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_And_138);
    }
    {
      data_model.enum_constant_BO_Xor_139 = arboretum_create_named_node("/clang/BO_Xor");
      arboretum_create_edge(data_model.enum_constant_BO_Xor_139, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Xor_139);
    }
    {
      data_model.enum_constant_BO_Or_140 = arboretum_create_named_node("/clang/BO_Or");
      arboretum_create_edge(data_model.enum_constant_BO_Or_140, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Or_140);
    }
    {
      data_model.enum_constant_BO_LAnd_141 = arboretum_create_named_node("/clang/BO_LAnd");
      arboretum_create_edge(data_model.enum_constant_BO_LAnd_141, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_LAnd_141);
    }
    {
      data_model.enum_constant_BO_LOr_142 = arboretum_create_named_node("/clang/BO_LOr");
      arboretum_create_edge(data_model.enum_constant_BO_LOr_142, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_LOr_142);
    }
    {
      data_model.enum_constant_BO_Assign_143 = arboretum_create_named_node("/clang/BO_Assign");
      arboretum_create_edge(data_model.enum_constant_BO_Assign_143, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Assign_143);
    }
    {
      data_model.enum_constant_BO_MulAssign_144 = arboretum_create_named_node("/clang/BO_MulAssign");
      arboretum_create_edge(data_model.enum_constant_BO_MulAssign_144, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_MulAssign_144);
    }
    {
      data_model.enum_constant_BO_DivAssign_145 = arboretum_create_named_node("/clang/BO_DivAssign");
      arboretum_create_edge(data_model.enum_constant_BO_DivAssign_145, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_DivAssign_145);
    }
    {
      data_model.enum_constant_BO_RemAssign_146 = arboretum_create_named_node("/clang/BO_RemAssign");
      arboretum_create_edge(data_model.enum_constant_BO_RemAssign_146, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_RemAssign_146);
    }
    {
      data_model.enum_constant_BO_AddAssign_147 = arboretum_create_named_node("/clang/BO_AddAssign");
      arboretum_create_edge(data_model.enum_constant_BO_AddAssign_147, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_AddAssign_147);
    }
    {
      data_model.enum_constant_BO_SubAssign_148 = arboretum_create_named_node("/clang/BO_SubAssign");
      arboretum_create_edge(data_model.enum_constant_BO_SubAssign_148, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_SubAssign_148);
    }
    {
      data_model.enum_constant_BO_ShlAssign_149 = arboretum_create_named_node("/clang/BO_ShlAssign");
      arboretum_create_edge(data_model.enum_constant_BO_ShlAssign_149, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_ShlAssign_149);
    }
    {
      data_model.enum_constant_BO_ShrAssign_150 = arboretum_create_named_node("/clang/BO_ShrAssign");
      arboretum_create_edge(data_model.enum_constant_BO_ShrAssign_150, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_ShrAssign_150);
    }
    {
      data_model.enum_constant_BO_AndAssign_151 = arboretum_create_named_node("/clang/BO_AndAssign");
      arboretum_create_edge(data_model.enum_constant_BO_AndAssign_151, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_AndAssign_151);
    }
    {
      data_model.enum_constant_BO_XorAssign_152 = arboretum_create_named_node("/clang/BO_XorAssign");
      arboretum_create_edge(data_model.enum_constant_BO_XorAssign_152, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_XorAssign_152);
    }
    {
      data_model.enum_constant_BO_OrAssign_153 = arboretum_create_named_node("/clang/BO_OrAssign");
      arboretum_create_edge(data_model.enum_constant_BO_OrAssign_153, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_OrAssign_153);
    }
    {
      data_model.enum_constant_BO_Comma_154 = arboretum_create_named_node("/clang/BO_Comma");
      arboretum_create_edge(data_model.enum_constant_BO_Comma_154, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BO_Comma_154);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_BuiltinTemplateKind_155 = arboretum_create_named_node("/clang/BuiltinTemplateKind");
    arboretum_create_edge(data_model.enum_BuiltinTemplateKind_155, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_BTK__make_integer_seq_156 = arboretum_create_named_node("/clang/BTK__make_integer_seq");
      arboretum_create_edge(data_model.enum_constant_BTK__make_integer_seq_156, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTK__make_integer_seq_156);
    }
    {
      data_model.enum_constant_BTK__type_pack_element_157 = arboretum_create_named_node("/clang/BTK__type_pack_element");
      arboretum_create_edge(data_model.enum_constant_BTK__type_pack_element_157, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTK__type_pack_element_157);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_Kind_158 = arboretum_create_named_node("/clang/BuiltinType/Kind");
    arboretum_create_edge(data_model.enum_Kind_158, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_OCLImage1dRO_159 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dRO_159, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dRO_159);
    }
    {
      data_model.enum_constant_OCLImage1dArrayRO_160 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dArrayRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dArrayRO_160, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dArrayRO_160);
    }
    {
      data_model.enum_constant_OCLImage1dBufferRO_161 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dBufferRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dBufferRO_161, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dBufferRO_161);
    }
    {
      data_model.enum_constant_OCLImage2dRO_162 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dRO_162, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dRO_162);
    }
    {
      data_model.enum_constant_OCLImage2dArrayRO_163 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayRO_163, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayRO_163);
    }
    {
      data_model.enum_constant_OCLImage2dDepthRO_164 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dDepthRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dDepthRO_164, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dDepthRO_164);
    }
    {
      data_model.enum_constant_OCLImage2dArrayDepthRO_165 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayDepthRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayDepthRO_165, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayDepthRO_165);
    }
    {
      data_model.enum_constant_OCLImage2dMSAARO_166 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dMSAARO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dMSAARO_166, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dMSAARO_166);
    }
    {
      data_model.enum_constant_OCLImage2dArrayMSAARO_167 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayMSAARO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayMSAARO_167, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayMSAARO_167);
    }
    {
      data_model.enum_constant_OCLImage2dMSAADepthRO_168 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dMSAADepthRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dMSAADepthRO_168, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dMSAADepthRO_168);
    }
    {
      data_model.enum_constant_OCLImage2dArrayMSAADepthRO_169 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayMSAADepthRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayMSAADepthRO_169, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayMSAADepthRO_169);
    }
    {
      data_model.enum_constant_OCLImage3dRO_170 = arboretum_create_named_node("/clang/BuiltinType/OCLImage3dRO");
      arboretum_create_edge(data_model.enum_constant_OCLImage3dRO_170, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage3dRO_170);
    }
    {
      data_model.enum_constant_OCLImage1dWO_171 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dWO_171, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dWO_171);
    }
    {
      data_model.enum_constant_OCLImage1dArrayWO_172 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dArrayWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dArrayWO_172, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dArrayWO_172);
    }
    {
      data_model.enum_constant_OCLImage1dBufferWO_173 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dBufferWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dBufferWO_173, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dBufferWO_173);
    }
    {
      data_model.enum_constant_OCLImage2dWO_174 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dWO_174, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dWO_174);
    }
    {
      data_model.enum_constant_OCLImage2dArrayWO_175 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayWO_175, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayWO_175);
    }
    {
      data_model.enum_constant_OCLImage2dDepthWO_176 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dDepthWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dDepthWO_176, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dDepthWO_176);
    }
    {
      data_model.enum_constant_OCLImage2dArrayDepthWO_177 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayDepthWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayDepthWO_177, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayDepthWO_177);
    }
    {
      data_model.enum_constant_OCLImage2dMSAAWO_178 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dMSAAWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dMSAAWO_178, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dMSAAWO_178);
    }
    {
      data_model.enum_constant_OCLImage2dArrayMSAAWO_179 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayMSAAWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayMSAAWO_179, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayMSAAWO_179);
    }
    {
      data_model.enum_constant_OCLImage2dMSAADepthWO_180 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dMSAADepthWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dMSAADepthWO_180, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dMSAADepthWO_180);
    }
    {
      data_model.enum_constant_OCLImage2dArrayMSAADepthWO_181 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayMSAADepthWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayMSAADepthWO_181, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayMSAADepthWO_181);
    }
    {
      data_model.enum_constant_OCLImage3dWO_182 = arboretum_create_named_node("/clang/BuiltinType/OCLImage3dWO");
      arboretum_create_edge(data_model.enum_constant_OCLImage3dWO_182, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage3dWO_182);
    }
    {
      data_model.enum_constant_OCLImage1dRW_183 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dRW_183, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dRW_183);
    }
    {
      data_model.enum_constant_OCLImage1dArrayRW_184 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dArrayRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dArrayRW_184, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dArrayRW_184);
    }
    {
      data_model.enum_constant_OCLImage1dBufferRW_185 = arboretum_create_named_node("/clang/BuiltinType/OCLImage1dBufferRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage1dBufferRW_185, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage1dBufferRW_185);
    }
    {
      data_model.enum_constant_OCLImage2dRW_186 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dRW_186, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dRW_186);
    }
    {
      data_model.enum_constant_OCLImage2dArrayRW_187 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayRW_187, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayRW_187);
    }
    {
      data_model.enum_constant_OCLImage2dDepthRW_188 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dDepthRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dDepthRW_188, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dDepthRW_188);
    }
    {
      data_model.enum_constant_OCLImage2dArrayDepthRW_189 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayDepthRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayDepthRW_189, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayDepthRW_189);
    }
    {
      data_model.enum_constant_OCLImage2dMSAARW_190 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dMSAARW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dMSAARW_190, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dMSAARW_190);
    }
    {
      data_model.enum_constant_OCLImage2dArrayMSAARW_191 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayMSAARW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayMSAARW_191, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayMSAARW_191);
    }
    {
      data_model.enum_constant_OCLImage2dMSAADepthRW_192 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dMSAADepthRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dMSAADepthRW_192, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dMSAADepthRW_192);
    }
    {
      data_model.enum_constant_OCLImage2dArrayMSAADepthRW_193 = arboretum_create_named_node("/clang/BuiltinType/OCLImage2dArrayMSAADepthRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage2dArrayMSAADepthRW_193, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage2dArrayMSAADepthRW_193);
    }
    {
      data_model.enum_constant_OCLImage3dRW_194 = arboretum_create_named_node("/clang/BuiltinType/OCLImage3dRW");
      arboretum_create_edge(data_model.enum_constant_OCLImage3dRW_194, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLImage3dRW_194);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCMcePayload_195 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCMcePayload");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCMcePayload_195, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCMcePayload_195);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCImePayload_196 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCImePayload");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCImePayload_196, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCImePayload_196);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCRefPayload_197 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCRefPayload");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCRefPayload_197, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCRefPayload_197);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCSicPayload_198 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCSicPayload");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCSicPayload_198, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCSicPayload_198);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCMceResult_199 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCMceResult");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCMceResult_199, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCMceResult_199);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCImeResult_200 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCImeResult");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCImeResult_200, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCImeResult_200);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCRefResult_201 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCRefResult");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCRefResult_201, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCRefResult_201);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCSicResult_202 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCSicResult");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCSicResult_202, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCSicResult_202);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout_203 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCImeResultSingleReferenceStreamout");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout_203, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout_203);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCImeResultDualReferenceStreamout_204 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCImeResultDualReferenceStreamout");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCImeResultDualReferenceStreamout_204, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCImeResultDualReferenceStreamout_204);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCImeSingleReferenceStreamin_205 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCImeSingleReferenceStreamin");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCImeSingleReferenceStreamin_205, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCImeSingleReferenceStreamin_205);
    }
    {
      data_model.enum_constant_OCLIntelSubgroupAVCImeDualReferenceStreamin_206 = arboretum_create_named_node("/clang/BuiltinType/OCLIntelSubgroupAVCImeDualReferenceStreamin");
      arboretum_create_edge(data_model.enum_constant_OCLIntelSubgroupAVCImeDualReferenceStreamin_206, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLIntelSubgroupAVCImeDualReferenceStreamin_206);
    }
    {
      data_model.enum_constant_SveInt8_207 = arboretum_create_named_node("/clang/BuiltinType/SveInt8");
      arboretum_create_edge(data_model.enum_constant_SveInt8_207, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt8_207);
    }
    {
      data_model.enum_constant_SveInt16_208 = arboretum_create_named_node("/clang/BuiltinType/SveInt16");
      arboretum_create_edge(data_model.enum_constant_SveInt16_208, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt16_208);
    }
    {
      data_model.enum_constant_SveInt32_209 = arboretum_create_named_node("/clang/BuiltinType/SveInt32");
      arboretum_create_edge(data_model.enum_constant_SveInt32_209, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt32_209);
    }
    {
      data_model.enum_constant_SveInt64_210 = arboretum_create_named_node("/clang/BuiltinType/SveInt64");
      arboretum_create_edge(data_model.enum_constant_SveInt64_210, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt64_210);
    }
    {
      data_model.enum_constant_SveUint8_211 = arboretum_create_named_node("/clang/BuiltinType/SveUint8");
      arboretum_create_edge(data_model.enum_constant_SveUint8_211, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint8_211);
    }
    {
      data_model.enum_constant_SveUint16_212 = arboretum_create_named_node("/clang/BuiltinType/SveUint16");
      arboretum_create_edge(data_model.enum_constant_SveUint16_212, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint16_212);
    }
    {
      data_model.enum_constant_SveUint32_213 = arboretum_create_named_node("/clang/BuiltinType/SveUint32");
      arboretum_create_edge(data_model.enum_constant_SveUint32_213, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint32_213);
    }
    {
      data_model.enum_constant_SveUint64_214 = arboretum_create_named_node("/clang/BuiltinType/SveUint64");
      arboretum_create_edge(data_model.enum_constant_SveUint64_214, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint64_214);
    }
    {
      data_model.enum_constant_SveFloat16_215 = arboretum_create_named_node("/clang/BuiltinType/SveFloat16");
      arboretum_create_edge(data_model.enum_constant_SveFloat16_215, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat16_215);
    }
    {
      data_model.enum_constant_SveFloat32_216 = arboretum_create_named_node("/clang/BuiltinType/SveFloat32");
      arboretum_create_edge(data_model.enum_constant_SveFloat32_216, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat32_216);
    }
    {
      data_model.enum_constant_SveFloat64_217 = arboretum_create_named_node("/clang/BuiltinType/SveFloat64");
      arboretum_create_edge(data_model.enum_constant_SveFloat64_217, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat64_217);
    }
    {
      data_model.enum_constant_SveBFloat16_218 = arboretum_create_named_node("/clang/BuiltinType/SveBFloat16");
      arboretum_create_edge(data_model.enum_constant_SveBFloat16_218, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBFloat16_218);
    }
    {
      data_model.enum_constant_SveInt8x2_219 = arboretum_create_named_node("/clang/BuiltinType/SveInt8x2");
      arboretum_create_edge(data_model.enum_constant_SveInt8x2_219, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt8x2_219);
    }
    {
      data_model.enum_constant_SveInt16x2_220 = arboretum_create_named_node("/clang/BuiltinType/SveInt16x2");
      arboretum_create_edge(data_model.enum_constant_SveInt16x2_220, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt16x2_220);
    }
    {
      data_model.enum_constant_SveInt32x2_221 = arboretum_create_named_node("/clang/BuiltinType/SveInt32x2");
      arboretum_create_edge(data_model.enum_constant_SveInt32x2_221, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt32x2_221);
    }
    {
      data_model.enum_constant_SveInt64x2_222 = arboretum_create_named_node("/clang/BuiltinType/SveInt64x2");
      arboretum_create_edge(data_model.enum_constant_SveInt64x2_222, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt64x2_222);
    }
    {
      data_model.enum_constant_SveUint8x2_223 = arboretum_create_named_node("/clang/BuiltinType/SveUint8x2");
      arboretum_create_edge(data_model.enum_constant_SveUint8x2_223, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint8x2_223);
    }
    {
      data_model.enum_constant_SveUint16x2_224 = arboretum_create_named_node("/clang/BuiltinType/SveUint16x2");
      arboretum_create_edge(data_model.enum_constant_SveUint16x2_224, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint16x2_224);
    }
    {
      data_model.enum_constant_SveUint32x2_225 = arboretum_create_named_node("/clang/BuiltinType/SveUint32x2");
      arboretum_create_edge(data_model.enum_constant_SveUint32x2_225, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint32x2_225);
    }
    {
      data_model.enum_constant_SveUint64x2_226 = arboretum_create_named_node("/clang/BuiltinType/SveUint64x2");
      arboretum_create_edge(data_model.enum_constant_SveUint64x2_226, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint64x2_226);
    }
    {
      data_model.enum_constant_SveFloat16x2_227 = arboretum_create_named_node("/clang/BuiltinType/SveFloat16x2");
      arboretum_create_edge(data_model.enum_constant_SveFloat16x2_227, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat16x2_227);
    }
    {
      data_model.enum_constant_SveFloat32x2_228 = arboretum_create_named_node("/clang/BuiltinType/SveFloat32x2");
      arboretum_create_edge(data_model.enum_constant_SveFloat32x2_228, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat32x2_228);
    }
    {
      data_model.enum_constant_SveFloat64x2_229 = arboretum_create_named_node("/clang/BuiltinType/SveFloat64x2");
      arboretum_create_edge(data_model.enum_constant_SveFloat64x2_229, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat64x2_229);
    }
    {
      data_model.enum_constant_SveBFloat16x2_230 = arboretum_create_named_node("/clang/BuiltinType/SveBFloat16x2");
      arboretum_create_edge(data_model.enum_constant_SveBFloat16x2_230, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBFloat16x2_230);
    }
    {
      data_model.enum_constant_SveInt8x3_231 = arboretum_create_named_node("/clang/BuiltinType/SveInt8x3");
      arboretum_create_edge(data_model.enum_constant_SveInt8x3_231, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt8x3_231);
    }
    {
      data_model.enum_constant_SveInt16x3_232 = arboretum_create_named_node("/clang/BuiltinType/SveInt16x3");
      arboretum_create_edge(data_model.enum_constant_SveInt16x3_232, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt16x3_232);
    }
    {
      data_model.enum_constant_SveInt32x3_233 = arboretum_create_named_node("/clang/BuiltinType/SveInt32x3");
      arboretum_create_edge(data_model.enum_constant_SveInt32x3_233, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt32x3_233);
    }
    {
      data_model.enum_constant_SveInt64x3_234 = arboretum_create_named_node("/clang/BuiltinType/SveInt64x3");
      arboretum_create_edge(data_model.enum_constant_SveInt64x3_234, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt64x3_234);
    }
    {
      data_model.enum_constant_SveUint8x3_235 = arboretum_create_named_node("/clang/BuiltinType/SveUint8x3");
      arboretum_create_edge(data_model.enum_constant_SveUint8x3_235, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint8x3_235);
    }
    {
      data_model.enum_constant_SveUint16x3_236 = arboretum_create_named_node("/clang/BuiltinType/SveUint16x3");
      arboretum_create_edge(data_model.enum_constant_SveUint16x3_236, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint16x3_236);
    }
    {
      data_model.enum_constant_SveUint32x3_237 = arboretum_create_named_node("/clang/BuiltinType/SveUint32x3");
      arboretum_create_edge(data_model.enum_constant_SveUint32x3_237, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint32x3_237);
    }
    {
      data_model.enum_constant_SveUint64x3_238 = arboretum_create_named_node("/clang/BuiltinType/SveUint64x3");
      arboretum_create_edge(data_model.enum_constant_SveUint64x3_238, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint64x3_238);
    }
    {
      data_model.enum_constant_SveFloat16x3_239 = arboretum_create_named_node("/clang/BuiltinType/SveFloat16x3");
      arboretum_create_edge(data_model.enum_constant_SveFloat16x3_239, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat16x3_239);
    }
    {
      data_model.enum_constant_SveFloat32x3_240 = arboretum_create_named_node("/clang/BuiltinType/SveFloat32x3");
      arboretum_create_edge(data_model.enum_constant_SveFloat32x3_240, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat32x3_240);
    }
    {
      data_model.enum_constant_SveFloat64x3_241 = arboretum_create_named_node("/clang/BuiltinType/SveFloat64x3");
      arboretum_create_edge(data_model.enum_constant_SveFloat64x3_241, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat64x3_241);
    }
    {
      data_model.enum_constant_SveBFloat16x3_242 = arboretum_create_named_node("/clang/BuiltinType/SveBFloat16x3");
      arboretum_create_edge(data_model.enum_constant_SveBFloat16x3_242, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBFloat16x3_242);
    }
    {
      data_model.enum_constant_SveInt8x4_243 = arboretum_create_named_node("/clang/BuiltinType/SveInt8x4");
      arboretum_create_edge(data_model.enum_constant_SveInt8x4_243, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt8x4_243);
    }
    {
      data_model.enum_constant_SveInt16x4_244 = arboretum_create_named_node("/clang/BuiltinType/SveInt16x4");
      arboretum_create_edge(data_model.enum_constant_SveInt16x4_244, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt16x4_244);
    }
    {
      data_model.enum_constant_SveInt32x4_245 = arboretum_create_named_node("/clang/BuiltinType/SveInt32x4");
      arboretum_create_edge(data_model.enum_constant_SveInt32x4_245, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt32x4_245);
    }
    {
      data_model.enum_constant_SveInt64x4_246 = arboretum_create_named_node("/clang/BuiltinType/SveInt64x4");
      arboretum_create_edge(data_model.enum_constant_SveInt64x4_246, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveInt64x4_246);
    }
    {
      data_model.enum_constant_SveUint8x4_247 = arboretum_create_named_node("/clang/BuiltinType/SveUint8x4");
      arboretum_create_edge(data_model.enum_constant_SveUint8x4_247, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint8x4_247);
    }
    {
      data_model.enum_constant_SveUint16x4_248 = arboretum_create_named_node("/clang/BuiltinType/SveUint16x4");
      arboretum_create_edge(data_model.enum_constant_SveUint16x4_248, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint16x4_248);
    }
    {
      data_model.enum_constant_SveUint32x4_249 = arboretum_create_named_node("/clang/BuiltinType/SveUint32x4");
      arboretum_create_edge(data_model.enum_constant_SveUint32x4_249, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint32x4_249);
    }
    {
      data_model.enum_constant_SveUint64x4_250 = arboretum_create_named_node("/clang/BuiltinType/SveUint64x4");
      arboretum_create_edge(data_model.enum_constant_SveUint64x4_250, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveUint64x4_250);
    }
    {
      data_model.enum_constant_SveFloat16x4_251 = arboretum_create_named_node("/clang/BuiltinType/SveFloat16x4");
      arboretum_create_edge(data_model.enum_constant_SveFloat16x4_251, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat16x4_251);
    }
    {
      data_model.enum_constant_SveFloat32x4_252 = arboretum_create_named_node("/clang/BuiltinType/SveFloat32x4");
      arboretum_create_edge(data_model.enum_constant_SveFloat32x4_252, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat32x4_252);
    }
    {
      data_model.enum_constant_SveFloat64x4_253 = arboretum_create_named_node("/clang/BuiltinType/SveFloat64x4");
      arboretum_create_edge(data_model.enum_constant_SveFloat64x4_253, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFloat64x4_253);
    }
    {
      data_model.enum_constant_SveBFloat16x4_254 = arboretum_create_named_node("/clang/BuiltinType/SveBFloat16x4");
      arboretum_create_edge(data_model.enum_constant_SveBFloat16x4_254, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBFloat16x4_254);
    }
    {
      data_model.enum_constant_SveBool_255 = arboretum_create_named_node("/clang/BuiltinType/SveBool");
      arboretum_create_edge(data_model.enum_constant_SveBool_255, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBool_255);
    }
    {
      data_model.enum_constant_SveBoolx2_256 = arboretum_create_named_node("/clang/BuiltinType/SveBoolx2");
      arboretum_create_edge(data_model.enum_constant_SveBoolx2_256, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBoolx2_256);
    }
    {
      data_model.enum_constant_SveBoolx4_257 = arboretum_create_named_node("/clang/BuiltinType/SveBoolx4");
      arboretum_create_edge(data_model.enum_constant_SveBoolx4_257, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveBoolx4_257);
    }
    {
      data_model.enum_constant_SveCount_258 = arboretum_create_named_node("/clang/BuiltinType/SveCount");
      arboretum_create_edge(data_model.enum_constant_SveCount_258, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveCount_258);
    }
    {
      data_model.enum_constant_VectorQuad_259 = arboretum_create_named_node("/clang/BuiltinType/VectorQuad");
      arboretum_create_edge(data_model.enum_constant_VectorQuad_259, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VectorQuad_259);
    }
    {
      data_model.enum_constant_VectorPair_260 = arboretum_create_named_node("/clang/BuiltinType/VectorPair");
      arboretum_create_edge(data_model.enum_constant_VectorPair_260, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VectorPair_260);
    }
    {
      data_model.enum_constant_RvvInt8mf8_261 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8_261, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8_261);
    }
    {
      data_model.enum_constant_RvvInt8mf4_262 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4_262, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4_262);
    }
    {
      data_model.enum_constant_RvvInt8mf2_263 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2_263, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2_263);
    }
    {
      data_model.enum_constant_RvvInt8m1_264 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1_264, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1_264);
    }
    {
      data_model.enum_constant_RvvInt8m2_265 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m2_265, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m2_265);
    }
    {
      data_model.enum_constant_RvvInt8m4_266 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m4_266, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m4_266);
    }
    {
      data_model.enum_constant_RvvInt8m8_267 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m8");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m8_267, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m8_267);
    }
    {
      data_model.enum_constant_RvvUint8mf8_268 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8_268, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8_268);
    }
    {
      data_model.enum_constant_RvvUint8mf4_269 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4_269, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4_269);
    }
    {
      data_model.enum_constant_RvvUint8mf2_270 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2_270, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2_270);
    }
    {
      data_model.enum_constant_RvvUint8m1_271 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1_271, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1_271);
    }
    {
      data_model.enum_constant_RvvUint8m2_272 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m2_272, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m2_272);
    }
    {
      data_model.enum_constant_RvvUint8m4_273 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m4_273, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m4_273);
    }
    {
      data_model.enum_constant_RvvUint8m8_274 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m8");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m8_274, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m8_274);
    }
    {
      data_model.enum_constant_RvvInt16mf4_275 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4_275, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4_275);
    }
    {
      data_model.enum_constant_RvvInt16mf2_276 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2_276, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2_276);
    }
    {
      data_model.enum_constant_RvvInt16m1_277 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1_277, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1_277);
    }
    {
      data_model.enum_constant_RvvInt16m2_278 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m2_278, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m2_278);
    }
    {
      data_model.enum_constant_RvvInt16m4_279 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m4");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m4_279, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m4_279);
    }
    {
      data_model.enum_constant_RvvInt16m8_280 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m8");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m8_280, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m8_280);
    }
    {
      data_model.enum_constant_RvvUint16mf4_281 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4_281, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4_281);
    }
    {
      data_model.enum_constant_RvvUint16mf2_282 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2_282, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2_282);
    }
    {
      data_model.enum_constant_RvvUint16m1_283 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1_283, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1_283);
    }
    {
      data_model.enum_constant_RvvUint16m2_284 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m2_284, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m2_284);
    }
    {
      data_model.enum_constant_RvvUint16m4_285 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m4");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m4_285, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m4_285);
    }
    {
      data_model.enum_constant_RvvUint16m8_286 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m8");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m8_286, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m8_286);
    }
    {
      data_model.enum_constant_RvvInt32mf2_287 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2_287, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2_287);
    }
    {
      data_model.enum_constant_RvvInt32m1_288 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1_288, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1_288);
    }
    {
      data_model.enum_constant_RvvInt32m2_289 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m2");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m2_289, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m2_289);
    }
    {
      data_model.enum_constant_RvvInt32m4_290 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m4");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m4_290, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m4_290);
    }
    {
      data_model.enum_constant_RvvInt32m8_291 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m8");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m8_291, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m8_291);
    }
    {
      data_model.enum_constant_RvvUint32mf2_292 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2_292, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2_292);
    }
    {
      data_model.enum_constant_RvvUint32m1_293 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1_293, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1_293);
    }
    {
      data_model.enum_constant_RvvUint32m2_294 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m2");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m2_294, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m2_294);
    }
    {
      data_model.enum_constant_RvvUint32m4_295 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m4");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m4_295, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m4_295);
    }
    {
      data_model.enum_constant_RvvUint32m8_296 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m8");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m8_296, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m8_296);
    }
    {
      data_model.enum_constant_RvvInt64m1_297 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1_297, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1_297);
    }
    {
      data_model.enum_constant_RvvInt64m2_298 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m2");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m2_298, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m2_298);
    }
    {
      data_model.enum_constant_RvvInt64m4_299 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m4");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m4_299, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m4_299);
    }
    {
      data_model.enum_constant_RvvInt64m8_300 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m8");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m8_300, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m8_300);
    }
    {
      data_model.enum_constant_RvvUint64m1_301 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1_301, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1_301);
    }
    {
      data_model.enum_constant_RvvUint64m2_302 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m2");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m2_302, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m2_302);
    }
    {
      data_model.enum_constant_RvvUint64m4_303 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m4");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m4_303, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m4_303);
    }
    {
      data_model.enum_constant_RvvUint64m8_304 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m8");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m8_304, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m8_304);
    }
    {
      data_model.enum_constant_RvvFloat16mf4_305 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4_305, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4_305);
    }
    {
      data_model.enum_constant_RvvFloat16mf2_306 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2_306, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2_306);
    }
    {
      data_model.enum_constant_RvvFloat16m1_307 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1_307, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1_307);
    }
    {
      data_model.enum_constant_RvvFloat16m2_308 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m2_308, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m2_308);
    }
    {
      data_model.enum_constant_RvvFloat16m4_309 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m4_309, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m4_309);
    }
    {
      data_model.enum_constant_RvvFloat16m8_310 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m8_310, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m8_310);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4_311 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4_311, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4_311);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2_312 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2_312, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2_312);
    }
    {
      data_model.enum_constant_RvvBFloat16m1_313 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1_313, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1_313);
    }
    {
      data_model.enum_constant_RvvBFloat16m2_314 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m2_314, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m2_314);
    }
    {
      data_model.enum_constant_RvvBFloat16m4_315 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m4");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m4_315, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m4_315);
    }
    {
      data_model.enum_constant_RvvBFloat16m8_316 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m8");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m8_316, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m8_316);
    }
    {
      data_model.enum_constant_RvvFloat32mf2_317 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2_317, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2_317);
    }
    {
      data_model.enum_constant_RvvFloat32m1_318 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1_318, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1_318);
    }
    {
      data_model.enum_constant_RvvFloat32m2_319 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m2_319, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m2_319);
    }
    {
      data_model.enum_constant_RvvFloat32m4_320 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m4_320, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m4_320);
    }
    {
      data_model.enum_constant_RvvFloat32m8_321 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m8_321, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m8_321);
    }
    {
      data_model.enum_constant_RvvFloat64m1_322 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1_322, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1_322);
    }
    {
      data_model.enum_constant_RvvFloat64m2_323 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m2_323, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m2_323);
    }
    {
      data_model.enum_constant_RvvFloat64m4_324 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m4_324, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m4_324);
    }
    {
      data_model.enum_constant_RvvFloat64m8_325 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m8_325, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m8_325);
    }
    {
      data_model.enum_constant_RvvBool1_326 = arboretum_create_named_node("/clang/BuiltinType/RvvBool1");
      arboretum_create_edge(data_model.enum_constant_RvvBool1_326, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool1_326);
    }
    {
      data_model.enum_constant_RvvBool2_327 = arboretum_create_named_node("/clang/BuiltinType/RvvBool2");
      arboretum_create_edge(data_model.enum_constant_RvvBool2_327, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool2_327);
    }
    {
      data_model.enum_constant_RvvBool4_328 = arboretum_create_named_node("/clang/BuiltinType/RvvBool4");
      arboretum_create_edge(data_model.enum_constant_RvvBool4_328, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool4_328);
    }
    {
      data_model.enum_constant_RvvBool8_329 = arboretum_create_named_node("/clang/BuiltinType/RvvBool8");
      arboretum_create_edge(data_model.enum_constant_RvvBool8_329, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool8_329);
    }
    {
      data_model.enum_constant_RvvBool16_330 = arboretum_create_named_node("/clang/BuiltinType/RvvBool16");
      arboretum_create_edge(data_model.enum_constant_RvvBool16_330, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool16_330);
    }
    {
      data_model.enum_constant_RvvBool32_331 = arboretum_create_named_node("/clang/BuiltinType/RvvBool32");
      arboretum_create_edge(data_model.enum_constant_RvvBool32_331, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool32_331);
    }
    {
      data_model.enum_constant_RvvBool64_332 = arboretum_create_named_node("/clang/BuiltinType/RvvBool64");
      arboretum_create_edge(data_model.enum_constant_RvvBool64_332, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBool64_332);
    }
    {
      data_model.enum_constant_RvvInt8mf8x2_333 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x2_333, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x2_333);
    }
    {
      data_model.enum_constant_RvvInt8mf8x3_334 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x3_334, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x3_334);
    }
    {
      data_model.enum_constant_RvvInt8mf8x4_335 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x4_335, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x4_335);
    }
    {
      data_model.enum_constant_RvvInt8mf8x5_336 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x5_336, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x5_336);
    }
    {
      data_model.enum_constant_RvvInt8mf8x6_337 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x6_337, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x6_337);
    }
    {
      data_model.enum_constant_RvvInt8mf8x7_338 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x7_338, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x7_338);
    }
    {
      data_model.enum_constant_RvvInt8mf8x8_339 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf8x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf8x8_339, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf8x8_339);
    }
    {
      data_model.enum_constant_RvvInt8mf4x2_340 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x2_340, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x2_340);
    }
    {
      data_model.enum_constant_RvvInt8mf4x3_341 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x3_341, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x3_341);
    }
    {
      data_model.enum_constant_RvvInt8mf4x4_342 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x4_342, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x4_342);
    }
    {
      data_model.enum_constant_RvvInt8mf4x5_343 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x5_343, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x5_343);
    }
    {
      data_model.enum_constant_RvvInt8mf4x6_344 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x6_344, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x6_344);
    }
    {
      data_model.enum_constant_RvvInt8mf4x7_345 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x7_345, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x7_345);
    }
    {
      data_model.enum_constant_RvvInt8mf4x8_346 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf4x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf4x8_346, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf4x8_346);
    }
    {
      data_model.enum_constant_RvvInt8mf2x2_347 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x2_347, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x2_347);
    }
    {
      data_model.enum_constant_RvvInt8mf2x3_348 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x3_348, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x3_348);
    }
    {
      data_model.enum_constant_RvvInt8mf2x4_349 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x4_349, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x4_349);
    }
    {
      data_model.enum_constant_RvvInt8mf2x5_350 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x5_350, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x5_350);
    }
    {
      data_model.enum_constant_RvvInt8mf2x6_351 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x6_351, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x6_351);
    }
    {
      data_model.enum_constant_RvvInt8mf2x7_352 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x7_352, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x7_352);
    }
    {
      data_model.enum_constant_RvvInt8mf2x8_353 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt8mf2x8_353, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8mf2x8_353);
    }
    {
      data_model.enum_constant_RvvInt8m1x2_354 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x2_354, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x2_354);
    }
    {
      data_model.enum_constant_RvvInt8m1x3_355 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x3_355, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x3_355);
    }
    {
      data_model.enum_constant_RvvInt8m1x4_356 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x4_356, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x4_356);
    }
    {
      data_model.enum_constant_RvvInt8m1x5_357 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x5_357, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x5_357);
    }
    {
      data_model.enum_constant_RvvInt8m1x6_358 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x6_358, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x6_358);
    }
    {
      data_model.enum_constant_RvvInt8m1x7_359 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x7_359, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x7_359);
    }
    {
      data_model.enum_constant_RvvInt8m1x8_360 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m1x8_360, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m1x8_360);
    }
    {
      data_model.enum_constant_RvvInt8m2x2_361 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m2x2_361, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m2x2_361);
    }
    {
      data_model.enum_constant_RvvInt8m2x3_362 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m2x3_362, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m2x3_362);
    }
    {
      data_model.enum_constant_RvvInt8m2x4_363 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m2x4_363, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m2x4_363);
    }
    {
      data_model.enum_constant_RvvInt8m4x2_364 = arboretum_create_named_node("/clang/BuiltinType/RvvInt8m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt8m4x2_364, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt8m4x2_364);
    }
    {
      data_model.enum_constant_RvvUint8mf8x2_365 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x2_365, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x2_365);
    }
    {
      data_model.enum_constant_RvvUint8mf8x3_366 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x3_366, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x3_366);
    }
    {
      data_model.enum_constant_RvvUint8mf8x4_367 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x4_367, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x4_367);
    }
    {
      data_model.enum_constant_RvvUint8mf8x5_368 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x5_368, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x5_368);
    }
    {
      data_model.enum_constant_RvvUint8mf8x6_369 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x6_369, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x6_369);
    }
    {
      data_model.enum_constant_RvvUint8mf8x7_370 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x7_370, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x7_370);
    }
    {
      data_model.enum_constant_RvvUint8mf8x8_371 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf8x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf8x8_371, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf8x8_371);
    }
    {
      data_model.enum_constant_RvvUint8mf4x2_372 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x2_372, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x2_372);
    }
    {
      data_model.enum_constant_RvvUint8mf4x3_373 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x3_373, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x3_373);
    }
    {
      data_model.enum_constant_RvvUint8mf4x4_374 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x4_374, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x4_374);
    }
    {
      data_model.enum_constant_RvvUint8mf4x5_375 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x5_375, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x5_375);
    }
    {
      data_model.enum_constant_RvvUint8mf4x6_376 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x6_376, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x6_376);
    }
    {
      data_model.enum_constant_RvvUint8mf4x7_377 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x7_377, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x7_377);
    }
    {
      data_model.enum_constant_RvvUint8mf4x8_378 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf4x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf4x8_378, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf4x8_378);
    }
    {
      data_model.enum_constant_RvvUint8mf2x2_379 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x2_379, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x2_379);
    }
    {
      data_model.enum_constant_RvvUint8mf2x3_380 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x3_380, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x3_380);
    }
    {
      data_model.enum_constant_RvvUint8mf2x4_381 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x4_381, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x4_381);
    }
    {
      data_model.enum_constant_RvvUint8mf2x5_382 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x5_382, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x5_382);
    }
    {
      data_model.enum_constant_RvvUint8mf2x6_383 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x6_383, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x6_383);
    }
    {
      data_model.enum_constant_RvvUint8mf2x7_384 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x7_384, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x7_384);
    }
    {
      data_model.enum_constant_RvvUint8mf2x8_385 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint8mf2x8_385, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8mf2x8_385);
    }
    {
      data_model.enum_constant_RvvUint8m1x2_386 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x2_386, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x2_386);
    }
    {
      data_model.enum_constant_RvvUint8m1x3_387 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x3_387, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x3_387);
    }
    {
      data_model.enum_constant_RvvUint8m1x4_388 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x4_388, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x4_388);
    }
    {
      data_model.enum_constant_RvvUint8m1x5_389 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x5_389, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x5_389);
    }
    {
      data_model.enum_constant_RvvUint8m1x6_390 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x6_390, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x6_390);
    }
    {
      data_model.enum_constant_RvvUint8m1x7_391 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x7_391, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x7_391);
    }
    {
      data_model.enum_constant_RvvUint8m1x8_392 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m1x8_392, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m1x8_392);
    }
    {
      data_model.enum_constant_RvvUint8m2x2_393 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m2x2_393, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m2x2_393);
    }
    {
      data_model.enum_constant_RvvUint8m2x3_394 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m2x3_394, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m2x3_394);
    }
    {
      data_model.enum_constant_RvvUint8m2x4_395 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m2x4_395, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m2x4_395);
    }
    {
      data_model.enum_constant_RvvUint8m4x2_396 = arboretum_create_named_node("/clang/BuiltinType/RvvUint8m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint8m4x2_396, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint8m4x2_396);
    }
    {
      data_model.enum_constant_RvvInt16mf4x2_397 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x2_397, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x2_397);
    }
    {
      data_model.enum_constant_RvvInt16mf4x3_398 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x3_398, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x3_398);
    }
    {
      data_model.enum_constant_RvvInt16mf4x4_399 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x4_399, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x4_399);
    }
    {
      data_model.enum_constant_RvvInt16mf4x5_400 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x5_400, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x5_400);
    }
    {
      data_model.enum_constant_RvvInt16mf4x6_401 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x6_401, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x6_401);
    }
    {
      data_model.enum_constant_RvvInt16mf4x7_402 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x7_402, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x7_402);
    }
    {
      data_model.enum_constant_RvvInt16mf4x8_403 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf4x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf4x8_403, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf4x8_403);
    }
    {
      data_model.enum_constant_RvvInt16mf2x2_404 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x2_404, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x2_404);
    }
    {
      data_model.enum_constant_RvvInt16mf2x3_405 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x3_405, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x3_405);
    }
    {
      data_model.enum_constant_RvvInt16mf2x4_406 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x4_406, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x4_406);
    }
    {
      data_model.enum_constant_RvvInt16mf2x5_407 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x5_407, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x5_407);
    }
    {
      data_model.enum_constant_RvvInt16mf2x6_408 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x6_408, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x6_408);
    }
    {
      data_model.enum_constant_RvvInt16mf2x7_409 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x7_409, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x7_409);
    }
    {
      data_model.enum_constant_RvvInt16mf2x8_410 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt16mf2x8_410, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16mf2x8_410);
    }
    {
      data_model.enum_constant_RvvInt16m1x2_411 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x2_411, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x2_411);
    }
    {
      data_model.enum_constant_RvvInt16m1x3_412 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x3_412, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x3_412);
    }
    {
      data_model.enum_constant_RvvInt16m1x4_413 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x4_413, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x4_413);
    }
    {
      data_model.enum_constant_RvvInt16m1x5_414 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x5_414, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x5_414);
    }
    {
      data_model.enum_constant_RvvInt16m1x6_415 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x6_415, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x6_415);
    }
    {
      data_model.enum_constant_RvvInt16m1x7_416 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x7_416, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x7_416);
    }
    {
      data_model.enum_constant_RvvInt16m1x8_417 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m1x8_417, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m1x8_417);
    }
    {
      data_model.enum_constant_RvvInt16m2x2_418 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m2x2_418, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m2x2_418);
    }
    {
      data_model.enum_constant_RvvInt16m2x3_419 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m2x3_419, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m2x3_419);
    }
    {
      data_model.enum_constant_RvvInt16m2x4_420 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m2x4_420, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m2x4_420);
    }
    {
      data_model.enum_constant_RvvInt16m4x2_421 = arboretum_create_named_node("/clang/BuiltinType/RvvInt16m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt16m4x2_421, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt16m4x2_421);
    }
    {
      data_model.enum_constant_RvvUint16mf4x2_422 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x2_422, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x2_422);
    }
    {
      data_model.enum_constant_RvvUint16mf4x3_423 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x3_423, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x3_423);
    }
    {
      data_model.enum_constant_RvvUint16mf4x4_424 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x4_424, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x4_424);
    }
    {
      data_model.enum_constant_RvvUint16mf4x5_425 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x5_425, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x5_425);
    }
    {
      data_model.enum_constant_RvvUint16mf4x6_426 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x6_426, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x6_426);
    }
    {
      data_model.enum_constant_RvvUint16mf4x7_427 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x7_427, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x7_427);
    }
    {
      data_model.enum_constant_RvvUint16mf4x8_428 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf4x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf4x8_428, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf4x8_428);
    }
    {
      data_model.enum_constant_RvvUint16mf2x2_429 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x2_429, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x2_429);
    }
    {
      data_model.enum_constant_RvvUint16mf2x3_430 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x3_430, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x3_430);
    }
    {
      data_model.enum_constant_RvvUint16mf2x4_431 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x4_431, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x4_431);
    }
    {
      data_model.enum_constant_RvvUint16mf2x5_432 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x5_432, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x5_432);
    }
    {
      data_model.enum_constant_RvvUint16mf2x6_433 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x6_433, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x6_433);
    }
    {
      data_model.enum_constant_RvvUint16mf2x7_434 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x7_434, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x7_434);
    }
    {
      data_model.enum_constant_RvvUint16mf2x8_435 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint16mf2x8_435, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16mf2x8_435);
    }
    {
      data_model.enum_constant_RvvUint16m1x2_436 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x2_436, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x2_436);
    }
    {
      data_model.enum_constant_RvvUint16m1x3_437 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x3_437, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x3_437);
    }
    {
      data_model.enum_constant_RvvUint16m1x4_438 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x4_438, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x4_438);
    }
    {
      data_model.enum_constant_RvvUint16m1x5_439 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x5_439, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x5_439);
    }
    {
      data_model.enum_constant_RvvUint16m1x6_440 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x6_440, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x6_440);
    }
    {
      data_model.enum_constant_RvvUint16m1x7_441 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x7_441, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x7_441);
    }
    {
      data_model.enum_constant_RvvUint16m1x8_442 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m1x8_442, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m1x8_442);
    }
    {
      data_model.enum_constant_RvvUint16m2x2_443 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m2x2_443, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m2x2_443);
    }
    {
      data_model.enum_constant_RvvUint16m2x3_444 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m2x3_444, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m2x3_444);
    }
    {
      data_model.enum_constant_RvvUint16m2x4_445 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m2x4_445, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m2x4_445);
    }
    {
      data_model.enum_constant_RvvUint16m4x2_446 = arboretum_create_named_node("/clang/BuiltinType/RvvUint16m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint16m4x2_446, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint16m4x2_446);
    }
    {
      data_model.enum_constant_RvvInt32mf2x2_447 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x2_447, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x2_447);
    }
    {
      data_model.enum_constant_RvvInt32mf2x3_448 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x3_448, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x3_448);
    }
    {
      data_model.enum_constant_RvvInt32mf2x4_449 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x4_449, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x4_449);
    }
    {
      data_model.enum_constant_RvvInt32mf2x5_450 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x5_450, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x5_450);
    }
    {
      data_model.enum_constant_RvvInt32mf2x6_451 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x6_451, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x6_451);
    }
    {
      data_model.enum_constant_RvvInt32mf2x7_452 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x7_452, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x7_452);
    }
    {
      data_model.enum_constant_RvvInt32mf2x8_453 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt32mf2x8_453, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32mf2x8_453);
    }
    {
      data_model.enum_constant_RvvInt32m1x2_454 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x2_454, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x2_454);
    }
    {
      data_model.enum_constant_RvvInt32m1x3_455 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x3_455, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x3_455);
    }
    {
      data_model.enum_constant_RvvInt32m1x4_456 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x4_456, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x4_456);
    }
    {
      data_model.enum_constant_RvvInt32m1x5_457 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x5_457, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x5_457);
    }
    {
      data_model.enum_constant_RvvInt32m1x6_458 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x6_458, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x6_458);
    }
    {
      data_model.enum_constant_RvvInt32m1x7_459 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x7_459, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x7_459);
    }
    {
      data_model.enum_constant_RvvInt32m1x8_460 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m1x8_460, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m1x8_460);
    }
    {
      data_model.enum_constant_RvvInt32m2x2_461 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m2x2_461, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m2x2_461);
    }
    {
      data_model.enum_constant_RvvInt32m2x3_462 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m2x3_462, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m2x3_462);
    }
    {
      data_model.enum_constant_RvvInt32m2x4_463 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m2x4_463, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m2x4_463);
    }
    {
      data_model.enum_constant_RvvInt32m4x2_464 = arboretum_create_named_node("/clang/BuiltinType/RvvInt32m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt32m4x2_464, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt32m4x2_464);
    }
    {
      data_model.enum_constant_RvvUint32mf2x2_465 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x2_465, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x2_465);
    }
    {
      data_model.enum_constant_RvvUint32mf2x3_466 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x3_466, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x3_466);
    }
    {
      data_model.enum_constant_RvvUint32mf2x4_467 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x4_467, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x4_467);
    }
    {
      data_model.enum_constant_RvvUint32mf2x5_468 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x5_468, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x5_468);
    }
    {
      data_model.enum_constant_RvvUint32mf2x6_469 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x6_469, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x6_469);
    }
    {
      data_model.enum_constant_RvvUint32mf2x7_470 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x7_470, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x7_470);
    }
    {
      data_model.enum_constant_RvvUint32mf2x8_471 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint32mf2x8_471, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32mf2x8_471);
    }
    {
      data_model.enum_constant_RvvUint32m1x2_472 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x2_472, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x2_472);
    }
    {
      data_model.enum_constant_RvvUint32m1x3_473 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x3_473, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x3_473);
    }
    {
      data_model.enum_constant_RvvUint32m1x4_474 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x4_474, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x4_474);
    }
    {
      data_model.enum_constant_RvvUint32m1x5_475 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x5_475, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x5_475);
    }
    {
      data_model.enum_constant_RvvUint32m1x6_476 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x6_476, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x6_476);
    }
    {
      data_model.enum_constant_RvvUint32m1x7_477 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x7_477, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x7_477);
    }
    {
      data_model.enum_constant_RvvUint32m1x8_478 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m1x8_478, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m1x8_478);
    }
    {
      data_model.enum_constant_RvvUint32m2x2_479 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m2x2_479, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m2x2_479);
    }
    {
      data_model.enum_constant_RvvUint32m2x3_480 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m2x3_480, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m2x3_480);
    }
    {
      data_model.enum_constant_RvvUint32m2x4_481 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m2x4_481, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m2x4_481);
    }
    {
      data_model.enum_constant_RvvUint32m4x2_482 = arboretum_create_named_node("/clang/BuiltinType/RvvUint32m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint32m4x2_482, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint32m4x2_482);
    }
    {
      data_model.enum_constant_RvvInt64m1x2_483 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x2_483, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x2_483);
    }
    {
      data_model.enum_constant_RvvInt64m1x3_484 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x3_484, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x3_484);
    }
    {
      data_model.enum_constant_RvvInt64m1x4_485 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x4_485, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x4_485);
    }
    {
      data_model.enum_constant_RvvInt64m1x5_486 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x5_486, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x5_486);
    }
    {
      data_model.enum_constant_RvvInt64m1x6_487 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x6_487, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x6_487);
    }
    {
      data_model.enum_constant_RvvInt64m1x7_488 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x7_488, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x7_488);
    }
    {
      data_model.enum_constant_RvvInt64m1x8_489 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m1x8_489, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m1x8_489);
    }
    {
      data_model.enum_constant_RvvInt64m2x2_490 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m2x2_490, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m2x2_490);
    }
    {
      data_model.enum_constant_RvvInt64m2x3_491 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m2x3_491, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m2x3_491);
    }
    {
      data_model.enum_constant_RvvInt64m2x4_492 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m2x4_492, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m2x4_492);
    }
    {
      data_model.enum_constant_RvvInt64m4x2_493 = arboretum_create_named_node("/clang/BuiltinType/RvvInt64m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvInt64m4x2_493, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvInt64m4x2_493);
    }
    {
      data_model.enum_constant_RvvUint64m1x2_494 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x2_494, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x2_494);
    }
    {
      data_model.enum_constant_RvvUint64m1x3_495 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x3_495, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x3_495);
    }
    {
      data_model.enum_constant_RvvUint64m1x4_496 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x4_496, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x4_496);
    }
    {
      data_model.enum_constant_RvvUint64m1x5_497 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x5_497, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x5_497);
    }
    {
      data_model.enum_constant_RvvUint64m1x6_498 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x6_498, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x6_498);
    }
    {
      data_model.enum_constant_RvvUint64m1x7_499 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x7_499, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x7_499);
    }
    {
      data_model.enum_constant_RvvUint64m1x8_500 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m1x8_500, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m1x8_500);
    }
    {
      data_model.enum_constant_RvvUint64m2x2_501 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m2x2_501, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m2x2_501);
    }
    {
      data_model.enum_constant_RvvUint64m2x3_502 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m2x3_502, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m2x3_502);
    }
    {
      data_model.enum_constant_RvvUint64m2x4_503 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m2x4_503, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m2x4_503);
    }
    {
      data_model.enum_constant_RvvUint64m4x2_504 = arboretum_create_named_node("/clang/BuiltinType/RvvUint64m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvUint64m4x2_504, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvUint64m4x2_504);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x2_505 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x2_505, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x2_505);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x3_506 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x3_506, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x3_506);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x4_507 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x4_507, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x4_507);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x5_508 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x5");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x5_508, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x5_508);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x6_509 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x6");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x6_509, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x6_509);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x7_510 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x7");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x7_510, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x7_510);
    }
    {
      data_model.enum_constant_RvvFloat16mf4x8_511 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf4x8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf4x8_511, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf4x8_511);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x2_512 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x2_512, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x2_512);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x3_513 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x3_513, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x3_513);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x4_514 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x4_514, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x4_514);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x5_515 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x5_515, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x5_515);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x6_516 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x6_516, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x6_516);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x7_517 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x7_517, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x7_517);
    }
    {
      data_model.enum_constant_RvvFloat16mf2x8_518 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16mf2x8_518, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16mf2x8_518);
    }
    {
      data_model.enum_constant_RvvFloat16m1x2_519 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x2_519, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x2_519);
    }
    {
      data_model.enum_constant_RvvFloat16m1x3_520 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x3_520, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x3_520);
    }
    {
      data_model.enum_constant_RvvFloat16m1x4_521 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x4_521, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x4_521);
    }
    {
      data_model.enum_constant_RvvFloat16m1x5_522 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x5_522, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x5_522);
    }
    {
      data_model.enum_constant_RvvFloat16m1x6_523 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x6_523, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x6_523);
    }
    {
      data_model.enum_constant_RvvFloat16m1x7_524 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x7_524, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x7_524);
    }
    {
      data_model.enum_constant_RvvFloat16m1x8_525 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m1x8_525, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m1x8_525);
    }
    {
      data_model.enum_constant_RvvFloat16m2x2_526 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m2x2_526, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m2x2_526);
    }
    {
      data_model.enum_constant_RvvFloat16m2x3_527 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m2x3_527, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m2x3_527);
    }
    {
      data_model.enum_constant_RvvFloat16m2x4_528 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m2x4_528, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m2x4_528);
    }
    {
      data_model.enum_constant_RvvFloat16m4x2_529 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat16m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat16m4x2_529, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat16m4x2_529);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x2_530 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x2_530, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x2_530);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x3_531 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x3_531, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x3_531);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x4_532 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x4_532, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x4_532);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x5_533 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x5_533, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x5_533);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x6_534 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x6_534, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x6_534);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x7_535 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x7_535, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x7_535);
    }
    {
      data_model.enum_constant_RvvFloat32mf2x8_536 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32mf2x8_536, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32mf2x8_536);
    }
    {
      data_model.enum_constant_RvvFloat32m1x2_537 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x2_537, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x2_537);
    }
    {
      data_model.enum_constant_RvvFloat32m1x3_538 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x3_538, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x3_538);
    }
    {
      data_model.enum_constant_RvvFloat32m1x4_539 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x4_539, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x4_539);
    }
    {
      data_model.enum_constant_RvvFloat32m1x5_540 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x5_540, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x5_540);
    }
    {
      data_model.enum_constant_RvvFloat32m1x6_541 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x6_541, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x6_541);
    }
    {
      data_model.enum_constant_RvvFloat32m1x7_542 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x7_542, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x7_542);
    }
    {
      data_model.enum_constant_RvvFloat32m1x8_543 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m1x8_543, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m1x8_543);
    }
    {
      data_model.enum_constant_RvvFloat32m2x2_544 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m2x2_544, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m2x2_544);
    }
    {
      data_model.enum_constant_RvvFloat32m2x3_545 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m2x3_545, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m2x3_545);
    }
    {
      data_model.enum_constant_RvvFloat32m2x4_546 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m2x4_546, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m2x4_546);
    }
    {
      data_model.enum_constant_RvvFloat32m4x2_547 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat32m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat32m4x2_547, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat32m4x2_547);
    }
    {
      data_model.enum_constant_RvvFloat64m1x2_548 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x2_548, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x2_548);
    }
    {
      data_model.enum_constant_RvvFloat64m1x3_549 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x3_549, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x3_549);
    }
    {
      data_model.enum_constant_RvvFloat64m1x4_550 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x4_550, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x4_550);
    }
    {
      data_model.enum_constant_RvvFloat64m1x5_551 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x5_551, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x5_551);
    }
    {
      data_model.enum_constant_RvvFloat64m1x6_552 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x6_552, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x6_552);
    }
    {
      data_model.enum_constant_RvvFloat64m1x7_553 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x7_553, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x7_553);
    }
    {
      data_model.enum_constant_RvvFloat64m1x8_554 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m1x8_554, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m1x8_554);
    }
    {
      data_model.enum_constant_RvvFloat64m2x2_555 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m2x2_555, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m2x2_555);
    }
    {
      data_model.enum_constant_RvvFloat64m2x3_556 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m2x3_556, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m2x3_556);
    }
    {
      data_model.enum_constant_RvvFloat64m2x4_557 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m2x4_557, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m2x4_557);
    }
    {
      data_model.enum_constant_RvvFloat64m4x2_558 = arboretum_create_named_node("/clang/BuiltinType/RvvFloat64m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvFloat64m4x2_558, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvFloat64m4x2_558);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x2_559 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x2_559, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x2_559);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x3_560 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x3");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x3_560, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x3_560);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x4_561 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x4");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x4_561, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x4_561);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x5_562 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x5");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x5_562, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x5_562);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x6_563 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x6");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x6_563, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x6_563);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x7_564 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x7");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x7_564, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x7_564);
    }
    {
      data_model.enum_constant_RvvBFloat16mf4x8_565 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf4x8");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf4x8_565, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf4x8_565);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x2_566 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x2_566, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x2_566);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x3_567 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x3");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x3_567, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x3_567);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x4_568 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x4");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x4_568, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x4_568);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x5_569 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x5");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x5_569, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x5_569);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x6_570 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x6");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x6_570, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x6_570);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x7_571 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x7");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x7_571, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x7_571);
    }
    {
      data_model.enum_constant_RvvBFloat16mf2x8_572 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16mf2x8");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16mf2x8_572, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16mf2x8_572);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x2_573 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x2_573, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x2_573);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x3_574 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x3");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x3_574, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x3_574);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x4_575 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x4");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x4_575, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x4_575);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x5_576 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x5");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x5_576, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x5_576);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x6_577 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x6");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x6_577, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x6_577);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x7_578 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x7");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x7_578, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x7_578);
    }
    {
      data_model.enum_constant_RvvBFloat16m1x8_579 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m1x8");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m1x8_579, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m1x8_579);
    }
    {
      data_model.enum_constant_RvvBFloat16m2x2_580 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m2x2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m2x2_580, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m2x2_580);
    }
    {
      data_model.enum_constant_RvvBFloat16m2x3_581 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m2x3");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m2x3_581, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m2x3_581);
    }
    {
      data_model.enum_constant_RvvBFloat16m2x4_582 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m2x4");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m2x4_582, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m2x4_582);
    }
    {
      data_model.enum_constant_RvvBFloat16m4x2_583 = arboretum_create_named_node("/clang/BuiltinType/RvvBFloat16m4x2");
      arboretum_create_edge(data_model.enum_constant_RvvBFloat16m4x2_583, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RvvBFloat16m4x2_583);
    }
    {
      data_model.enum_constant_WasmExternRef_584 = arboretum_create_named_node("/clang/BuiltinType/WasmExternRef");
      arboretum_create_edge(data_model.enum_constant_WasmExternRef_584, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WasmExternRef_584);
    }
    {
      data_model.enum_constant_Void_585 = arboretum_create_named_node("/clang/BuiltinType/Void");
      arboretum_create_edge(data_model.enum_constant_Void_585, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Void_585);
    }
    {
      data_model.enum_constant_Bool_586 = arboretum_create_named_node("/clang/BuiltinType/Bool");
      arboretum_create_edge(data_model.enum_constant_Bool_586, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Bool_586);
    }
    {
      data_model.enum_constant_Char_U_587 = arboretum_create_named_node("/clang/BuiltinType/Char_U");
      arboretum_create_edge(data_model.enum_constant_Char_U_587, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Char_U_587);
    }
    {
      data_model.enum_constant_UChar_588 = arboretum_create_named_node("/clang/BuiltinType/UChar");
      arboretum_create_edge(data_model.enum_constant_UChar_588, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UChar_588);
    }
    {
      data_model.enum_constant_WChar_U_589 = arboretum_create_named_node("/clang/BuiltinType/WChar_U");
      arboretum_create_edge(data_model.enum_constant_WChar_U_589, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WChar_U_589);
    }
    {
      data_model.enum_constant_Char8_590 = arboretum_create_named_node("/clang/BuiltinType/Char8");
      arboretum_create_edge(data_model.enum_constant_Char8_590, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Char8_590);
    }
    {
      data_model.enum_constant_Char16_591 = arboretum_create_named_node("/clang/BuiltinType/Char16");
      arboretum_create_edge(data_model.enum_constant_Char16_591, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Char16_591);
    }
    {
      data_model.enum_constant_Char32_592 = arboretum_create_named_node("/clang/BuiltinType/Char32");
      arboretum_create_edge(data_model.enum_constant_Char32_592, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Char32_592);
    }
    {
      data_model.enum_constant_UShort_593 = arboretum_create_named_node("/clang/BuiltinType/UShort");
      arboretum_create_edge(data_model.enum_constant_UShort_593, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UShort_593);
    }
    {
      data_model.enum_constant_UInt_594 = arboretum_create_named_node("/clang/BuiltinType/UInt");
      arboretum_create_edge(data_model.enum_constant_UInt_594, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UInt_594);
    }
    {
      data_model.enum_constant_ULong_595 = arboretum_create_named_node("/clang/BuiltinType/ULong");
      arboretum_create_edge(data_model.enum_constant_ULong_595, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ULong_595);
    }
    {
      data_model.enum_constant_ULongLong_596 = arboretum_create_named_node("/clang/BuiltinType/ULongLong");
      arboretum_create_edge(data_model.enum_constant_ULongLong_596, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ULongLong_596);
    }
    {
      data_model.enum_constant_UInt128_597 = arboretum_create_named_node("/clang/BuiltinType/UInt128");
      arboretum_create_edge(data_model.enum_constant_UInt128_597, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UInt128_597);
    }
    {
      data_model.enum_constant_Char_S_598 = arboretum_create_named_node("/clang/BuiltinType/Char_S");
      arboretum_create_edge(data_model.enum_constant_Char_S_598, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Char_S_598);
    }
    {
      data_model.enum_constant_SChar_599 = arboretum_create_named_node("/clang/BuiltinType/SChar");
      arboretum_create_edge(data_model.enum_constant_SChar_599, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SChar_599);
    }
    {
      data_model.enum_constant_WChar_S_600 = arboretum_create_named_node("/clang/BuiltinType/WChar_S");
      arboretum_create_edge(data_model.enum_constant_WChar_S_600, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WChar_S_600);
    }
    {
      data_model.enum_constant_Short_601 = arboretum_create_named_node("/clang/BuiltinType/Short");
      arboretum_create_edge(data_model.enum_constant_Short_601, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Short_601);
    }
    {
      data_model.enum_constant_Int_602 = arboretum_create_named_node("/clang/BuiltinType/Int");
      arboretum_create_edge(data_model.enum_constant_Int_602, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Int_602);
    }
    {
      data_model.enum_constant_Long_603 = arboretum_create_named_node("/clang/BuiltinType/Long");
      arboretum_create_edge(data_model.enum_constant_Long_603, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Long_603);
    }
    {
      data_model.enum_constant_LongLong_604 = arboretum_create_named_node("/clang/BuiltinType/LongLong");
      arboretum_create_edge(data_model.enum_constant_LongLong_604, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LongLong_604);
    }
    {
      data_model.enum_constant_Int128_605 = arboretum_create_named_node("/clang/BuiltinType/Int128");
      arboretum_create_edge(data_model.enum_constant_Int128_605, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Int128_605);
    }
    {
      data_model.enum_constant_ShortAccum_606 = arboretum_create_named_node("/clang/BuiltinType/ShortAccum");
      arboretum_create_edge(data_model.enum_constant_ShortAccum_606, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ShortAccum_606);
    }
    {
      data_model.enum_constant_Accum_607 = arboretum_create_named_node("/clang/BuiltinType/Accum");
      arboretum_create_edge(data_model.enum_constant_Accum_607, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Accum_607);
    }
    {
      data_model.enum_constant_LongAccum_608 = arboretum_create_named_node("/clang/BuiltinType/LongAccum");
      arboretum_create_edge(data_model.enum_constant_LongAccum_608, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LongAccum_608);
    }
    {
      data_model.enum_constant_UShortAccum_609 = arboretum_create_named_node("/clang/BuiltinType/UShortAccum");
      arboretum_create_edge(data_model.enum_constant_UShortAccum_609, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UShortAccum_609);
    }
    {
      data_model.enum_constant_UAccum_610 = arboretum_create_named_node("/clang/BuiltinType/UAccum");
      arboretum_create_edge(data_model.enum_constant_UAccum_610, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UAccum_610);
    }
    {
      data_model.enum_constant_ULongAccum_611 = arboretum_create_named_node("/clang/BuiltinType/ULongAccum");
      arboretum_create_edge(data_model.enum_constant_ULongAccum_611, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ULongAccum_611);
    }
    {
      data_model.enum_constant_ShortFract_612 = arboretum_create_named_node("/clang/BuiltinType/ShortFract");
      arboretum_create_edge(data_model.enum_constant_ShortFract_612, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ShortFract_612);
    }
    {
      data_model.enum_constant_Fract_613 = arboretum_create_named_node("/clang/BuiltinType/Fract");
      arboretum_create_edge(data_model.enum_constant_Fract_613, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Fract_613);
    }
    {
      data_model.enum_constant_LongFract_614 = arboretum_create_named_node("/clang/BuiltinType/LongFract");
      arboretum_create_edge(data_model.enum_constant_LongFract_614, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LongFract_614);
    }
    {
      data_model.enum_constant_UShortFract_615 = arboretum_create_named_node("/clang/BuiltinType/UShortFract");
      arboretum_create_edge(data_model.enum_constant_UShortFract_615, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UShortFract_615);
    }
    {
      data_model.enum_constant_UFract_616 = arboretum_create_named_node("/clang/BuiltinType/UFract");
      arboretum_create_edge(data_model.enum_constant_UFract_616, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UFract_616);
    }
    {
      data_model.enum_constant_ULongFract_617 = arboretum_create_named_node("/clang/BuiltinType/ULongFract");
      arboretum_create_edge(data_model.enum_constant_ULongFract_617, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ULongFract_617);
    }
    {
      data_model.enum_constant_SatShortAccum_618 = arboretum_create_named_node("/clang/BuiltinType/SatShortAccum");
      arboretum_create_edge(data_model.enum_constant_SatShortAccum_618, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatShortAccum_618);
    }
    {
      data_model.enum_constant_SatAccum_619 = arboretum_create_named_node("/clang/BuiltinType/SatAccum");
      arboretum_create_edge(data_model.enum_constant_SatAccum_619, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatAccum_619);
    }
    {
      data_model.enum_constant_SatLongAccum_620 = arboretum_create_named_node("/clang/BuiltinType/SatLongAccum");
      arboretum_create_edge(data_model.enum_constant_SatLongAccum_620, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatLongAccum_620);
    }
    {
      data_model.enum_constant_SatUShortAccum_621 = arboretum_create_named_node("/clang/BuiltinType/SatUShortAccum");
      arboretum_create_edge(data_model.enum_constant_SatUShortAccum_621, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatUShortAccum_621);
    }
    {
      data_model.enum_constant_SatUAccum_622 = arboretum_create_named_node("/clang/BuiltinType/SatUAccum");
      arboretum_create_edge(data_model.enum_constant_SatUAccum_622, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatUAccum_622);
    }
    {
      data_model.enum_constant_SatULongAccum_623 = arboretum_create_named_node("/clang/BuiltinType/SatULongAccum");
      arboretum_create_edge(data_model.enum_constant_SatULongAccum_623, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatULongAccum_623);
    }
    {
      data_model.enum_constant_SatShortFract_624 = arboretum_create_named_node("/clang/BuiltinType/SatShortFract");
      arboretum_create_edge(data_model.enum_constant_SatShortFract_624, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatShortFract_624);
    }
    {
      data_model.enum_constant_SatFract_625 = arboretum_create_named_node("/clang/BuiltinType/SatFract");
      arboretum_create_edge(data_model.enum_constant_SatFract_625, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatFract_625);
    }
    {
      data_model.enum_constant_SatLongFract_626 = arboretum_create_named_node("/clang/BuiltinType/SatLongFract");
      arboretum_create_edge(data_model.enum_constant_SatLongFract_626, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatLongFract_626);
    }
    {
      data_model.enum_constant_SatUShortFract_627 = arboretum_create_named_node("/clang/BuiltinType/SatUShortFract");
      arboretum_create_edge(data_model.enum_constant_SatUShortFract_627, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatUShortFract_627);
    }
    {
      data_model.enum_constant_SatUFract_628 = arboretum_create_named_node("/clang/BuiltinType/SatUFract");
      arboretum_create_edge(data_model.enum_constant_SatUFract_628, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatUFract_628);
    }
    {
      data_model.enum_constant_SatULongFract_629 = arboretum_create_named_node("/clang/BuiltinType/SatULongFract");
      arboretum_create_edge(data_model.enum_constant_SatULongFract_629, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SatULongFract_629);
    }
    {
      data_model.enum_constant_Half_630 = arboretum_create_named_node("/clang/BuiltinType/Half");
      arboretum_create_edge(data_model.enum_constant_Half_630, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Half_630);
    }
    {
      data_model.enum_constant_Float_631 = arboretum_create_named_node("/clang/BuiltinType/Float");
      arboretum_create_edge(data_model.enum_constant_Float_631, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Float_631);
    }
    {
      data_model.enum_constant_Double_632 = arboretum_create_named_node("/clang/BuiltinType/Double");
      arboretum_create_edge(data_model.enum_constant_Double_632, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Double_632);
    }
    {
      data_model.enum_constant_LongDouble_633 = arboretum_create_named_node("/clang/BuiltinType/LongDouble");
      arboretum_create_edge(data_model.enum_constant_LongDouble_633, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LongDouble_633);
    }
    {
      data_model.enum_constant_Float16_634 = arboretum_create_named_node("/clang/BuiltinType/Float16");
      arboretum_create_edge(data_model.enum_constant_Float16_634, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Float16_634);
    }
    {
      data_model.enum_constant_BFloat16_635 = arboretum_create_named_node("/clang/BuiltinType/BFloat16");
      arboretum_create_edge(data_model.enum_constant_BFloat16_635, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BFloat16_635);
    }
    {
      data_model.enum_constant_Float128_636 = arboretum_create_named_node("/clang/BuiltinType/Float128");
      arboretum_create_edge(data_model.enum_constant_Float128_636, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Float128_636);
    }
    {
      data_model.enum_constant_Ibm128_637 = arboretum_create_named_node("/clang/BuiltinType/Ibm128");
      arboretum_create_edge(data_model.enum_constant_Ibm128_637, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ibm128_637);
    }
    {
      data_model.enum_constant_NullPtr_638 = arboretum_create_named_node("/clang/BuiltinType/NullPtr");
      arboretum_create_edge(data_model.enum_constant_NullPtr_638, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NullPtr_638);
    }
    {
      data_model.enum_constant_ObjCId_639 = arboretum_create_named_node("/clang/BuiltinType/ObjCId");
      arboretum_create_edge(data_model.enum_constant_ObjCId_639, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCId_639);
    }
    {
      data_model.enum_constant_ObjCClass_640 = arboretum_create_named_node("/clang/BuiltinType/ObjCClass");
      arboretum_create_edge(data_model.enum_constant_ObjCClass_640, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCClass_640);
    }
    {
      data_model.enum_constant_ObjCSel_641 = arboretum_create_named_node("/clang/BuiltinType/ObjCSel");
      arboretum_create_edge(data_model.enum_constant_ObjCSel_641, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCSel_641);
    }
    {
      data_model.enum_constant_OCLSampler_642 = arboretum_create_named_node("/clang/BuiltinType/OCLSampler");
      arboretum_create_edge(data_model.enum_constant_OCLSampler_642, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLSampler_642);
    }
    {
      data_model.enum_constant_OCLEvent_643 = arboretum_create_named_node("/clang/BuiltinType/OCLEvent");
      arboretum_create_edge(data_model.enum_constant_OCLEvent_643, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLEvent_643);
    }
    {
      data_model.enum_constant_OCLClkEvent_644 = arboretum_create_named_node("/clang/BuiltinType/OCLClkEvent");
      arboretum_create_edge(data_model.enum_constant_OCLClkEvent_644, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLClkEvent_644);
    }
    {
      data_model.enum_constant_OCLQueue_645 = arboretum_create_named_node("/clang/BuiltinType/OCLQueue");
      arboretum_create_edge(data_model.enum_constant_OCLQueue_645, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLQueue_645);
    }
    {
      data_model.enum_constant_OCLReserveID_646 = arboretum_create_named_node("/clang/BuiltinType/OCLReserveID");
      arboretum_create_edge(data_model.enum_constant_OCLReserveID_646, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCLReserveID_646);
    }
    {
      data_model.enum_constant_Dependent_647 = arboretum_create_named_node("/clang/BuiltinType/Dependent");
      arboretum_create_edge(data_model.enum_constant_Dependent_647, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Dependent_647);
    }
    {
      data_model.enum_constant_Overload_648 = arboretum_create_named_node("/clang/BuiltinType/Overload");
      arboretum_create_edge(data_model.enum_constant_Overload_648, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Overload_648);
    }
    {
      data_model.enum_constant_BoundMember_649 = arboretum_create_named_node("/clang/BuiltinType/BoundMember");
      arboretum_create_edge(data_model.enum_constant_BoundMember_649, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BoundMember_649);
    }
    {
      data_model.enum_constant_PseudoObject_650 = arboretum_create_named_node("/clang/BuiltinType/PseudoObject");
      arboretum_create_edge(data_model.enum_constant_PseudoObject_650, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PseudoObject_650);
    }
    {
      data_model.enum_constant_UnknownAny_651 = arboretum_create_named_node("/clang/BuiltinType/UnknownAny");
      arboretum_create_edge(data_model.enum_constant_UnknownAny_651, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UnknownAny_651);
    }
    {
      data_model.enum_constant_BuiltinFn_652 = arboretum_create_named_node("/clang/BuiltinType/BuiltinFn");
      arboretum_create_edge(data_model.enum_constant_BuiltinFn_652, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BuiltinFn_652);
    }
    {
      data_model.enum_constant_ARCUnbridgedCast_653 = arboretum_create_named_node("/clang/BuiltinType/ARCUnbridgedCast");
      arboretum_create_edge(data_model.enum_constant_ARCUnbridgedCast_653, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ARCUnbridgedCast_653);
    }
    {
      data_model.enum_constant_IncompleteMatrixIdx_654 = arboretum_create_named_node("/clang/BuiltinType/IncompleteMatrixIdx");
      arboretum_create_edge(data_model.enum_constant_IncompleteMatrixIdx_654, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_IncompleteMatrixIdx_654);
    }
    {
      data_model.enum_constant_OMPArraySection_655 = arboretum_create_named_node("/clang/BuiltinType/OMPArraySection");
      arboretum_create_edge(data_model.enum_constant_OMPArraySection_655, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPArraySection_655);
    }
    {
      data_model.enum_constant_OMPArrayShaping_656 = arboretum_create_named_node("/clang/BuiltinType/OMPArrayShaping");
      arboretum_create_edge(data_model.enum_constant_OMPArrayShaping_656, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPArrayShaping_656);
    }
    {
      data_model.enum_constant_OMPIterator_657 = arboretum_create_named_node("/clang/BuiltinType/OMPIterator");
      arboretum_create_edge(data_model.enum_constant_OMPIterator_657, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPIterator_657);
    }
    {
      data_model.enum_constant_LastKind_658 = arboretum_create_named_node("/clang/BuiltinType/LastKind");
      arboretum_create_edge(data_model.enum_constant_LastKind_658, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastKind_658);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CXXConstructionKind_659 = arboretum_create_named_node("/clang/CXXConstructionKind");
    arboretum_create_edge(data_model.enum_CXXConstructionKind_659, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Complete_660 = arboretum_create_named_node("/clang/CXXConstructionKind/Complete");
      arboretum_create_edge(data_model.enum_constant_Complete_660, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Complete_660);
    }
    {
      data_model.enum_constant_NonVirtualBase_661 = arboretum_create_named_node("/clang/CXXConstructionKind/NonVirtualBase");
      arboretum_create_edge(data_model.enum_constant_NonVirtualBase_661, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NonVirtualBase_661);
    }
    {
      data_model.enum_constant_VirtualBase_662 = arboretum_create_named_node("/clang/CXXConstructionKind/VirtualBase");
      arboretum_create_edge(data_model.enum_constant_VirtualBase_662, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VirtualBase_662);
    }
    {
      data_model.enum_constant_Delegating_663 = arboretum_create_named_node("/clang/CXXConstructionKind/Delegating");
      arboretum_create_edge(data_model.enum_constant_Delegating_663, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Delegating_663);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CXXNewInitializationStyle_664 = arboretum_create_named_node("/clang/CXXNewInitializationStyle");
    arboretum_create_edge(data_model.enum_CXXNewInitializationStyle_664, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_None_665 = arboretum_create_named_node("/clang/CXXNewInitializationStyle/None");
      arboretum_create_edge(data_model.enum_constant_None_665, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_665);
    }
    {
      data_model.enum_constant_Parens_666 = arboretum_create_named_node("/clang/CXXNewInitializationStyle/Parens");
      arboretum_create_edge(data_model.enum_constant_Parens_666, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Parens_666);
    }
    {
      data_model.enum_constant_Braces_667 = arboretum_create_named_node("/clang/CXXNewInitializationStyle/Braces");
      arboretum_create_edge(data_model.enum_constant_Braces_667, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Braces_667);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ADLCallKind_668 = arboretum_create_named_node("/clang/CallExpr/ADLCallKind");
    arboretum_create_edge(data_model.enum_ADLCallKind_668, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_NotADL_669 = arboretum_create_named_node("/clang/CallExpr/ADLCallKind/NotADL");
      arboretum_create_edge(data_model.enum_constant_NotADL_669, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NotADL_669);
    }
    {
      data_model.enum_constant_UsesADL_670 = arboretum_create_named_node("/clang/CallExpr/ADLCallKind/UsesADL");
      arboretum_create_edge(data_model.enum_constant_UsesADL_670, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UsesADL_670);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CallingConv_671 = arboretum_create_named_node("/clang/CallingConv");
    arboretum_create_edge(data_model.enum_CallingConv_671, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CC_C_672 = arboretum_create_named_node("/clang/CC_C");
      arboretum_create_edge(data_model.enum_constant_CC_C_672, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_C_672);
    }
    {
      data_model.enum_constant_CC_X86StdCall_673 = arboretum_create_named_node("/clang/CC_X86StdCall");
      arboretum_create_edge(data_model.enum_constant_CC_X86StdCall_673, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86StdCall_673);
    }
    {
      data_model.enum_constant_CC_X86FastCall_674 = arboretum_create_named_node("/clang/CC_X86FastCall");
      arboretum_create_edge(data_model.enum_constant_CC_X86FastCall_674, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86FastCall_674);
    }
    {
      data_model.enum_constant_CC_X86ThisCall_675 = arboretum_create_named_node("/clang/CC_X86ThisCall");
      arboretum_create_edge(data_model.enum_constant_CC_X86ThisCall_675, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86ThisCall_675);
    }
    {
      data_model.enum_constant_CC_X86VectorCall_676 = arboretum_create_named_node("/clang/CC_X86VectorCall");
      arboretum_create_edge(data_model.enum_constant_CC_X86VectorCall_676, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86VectorCall_676);
    }
    {
      data_model.enum_constant_CC_X86Pascal_677 = arboretum_create_named_node("/clang/CC_X86Pascal");
      arboretum_create_edge(data_model.enum_constant_CC_X86Pascal_677, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86Pascal_677);
    }
    {
      data_model.enum_constant_CC_Win64_678 = arboretum_create_named_node("/clang/CC_Win64");
      arboretum_create_edge(data_model.enum_constant_CC_Win64_678, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_Win64_678);
    }
    {
      data_model.enum_constant_CC_X86_64SysV_679 = arboretum_create_named_node("/clang/CC_X86_64SysV");
      arboretum_create_edge(data_model.enum_constant_CC_X86_64SysV_679, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86_64SysV_679);
    }
    {
      data_model.enum_constant_CC_X86RegCall_680 = arboretum_create_named_node("/clang/CC_X86RegCall");
      arboretum_create_edge(data_model.enum_constant_CC_X86RegCall_680, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_X86RegCall_680);
    }
    {
      data_model.enum_constant_CC_AAPCS_681 = arboretum_create_named_node("/clang/CC_AAPCS");
      arboretum_create_edge(data_model.enum_constant_CC_AAPCS_681, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_AAPCS_681);
    }
    {
      data_model.enum_constant_CC_AAPCS_VFP_682 = arboretum_create_named_node("/clang/CC_AAPCS_VFP");
      arboretum_create_edge(data_model.enum_constant_CC_AAPCS_VFP_682, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_AAPCS_VFP_682);
    }
    {
      data_model.enum_constant_CC_IntelOclBicc_683 = arboretum_create_named_node("/clang/CC_IntelOclBicc");
      arboretum_create_edge(data_model.enum_constant_CC_IntelOclBicc_683, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_IntelOclBicc_683);
    }
    {
      data_model.enum_constant_CC_SpirFunction_684 = arboretum_create_named_node("/clang/CC_SpirFunction");
      arboretum_create_edge(data_model.enum_constant_CC_SpirFunction_684, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_SpirFunction_684);
    }
    {
      data_model.enum_constant_CC_OpenCLKernel_685 = arboretum_create_named_node("/clang/CC_OpenCLKernel");
      arboretum_create_edge(data_model.enum_constant_CC_OpenCLKernel_685, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_OpenCLKernel_685);
    }
    {
      data_model.enum_constant_CC_Swift_686 = arboretum_create_named_node("/clang/CC_Swift");
      arboretum_create_edge(data_model.enum_constant_CC_Swift_686, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_Swift_686);
    }
    {
      data_model.enum_constant_CC_SwiftAsync_687 = arboretum_create_named_node("/clang/CC_SwiftAsync");
      arboretum_create_edge(data_model.enum_constant_CC_SwiftAsync_687, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_SwiftAsync_687);
    }
    {
      data_model.enum_constant_CC_PreserveMost_688 = arboretum_create_named_node("/clang/CC_PreserveMost");
      arboretum_create_edge(data_model.enum_constant_CC_PreserveMost_688, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_PreserveMost_688);
    }
    {
      data_model.enum_constant_CC_PreserveAll_689 = arboretum_create_named_node("/clang/CC_PreserveAll");
      arboretum_create_edge(data_model.enum_constant_CC_PreserveAll_689, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_PreserveAll_689);
    }
    {
      data_model.enum_constant_CC_AArch64VectorCall_690 = arboretum_create_named_node("/clang/CC_AArch64VectorCall");
      arboretum_create_edge(data_model.enum_constant_CC_AArch64VectorCall_690, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_AArch64VectorCall_690);
    }
    {
      data_model.enum_constant_CC_AArch64SVEPCS_691 = arboretum_create_named_node("/clang/CC_AArch64SVEPCS");
      arboretum_create_edge(data_model.enum_constant_CC_AArch64SVEPCS_691, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_AArch64SVEPCS_691);
    }
    {
      data_model.enum_constant_CC_AMDGPUKernelCall_692 = arboretum_create_named_node("/clang/CC_AMDGPUKernelCall");
      arboretum_create_edge(data_model.enum_constant_CC_AMDGPUKernelCall_692, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_AMDGPUKernelCall_692);
    }
    {
      data_model.enum_constant_CC_M68kRTD_693 = arboretum_create_named_node("/clang/CC_M68kRTD");
      arboretum_create_edge(data_model.enum_constant_CC_M68kRTD_693, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CC_M68kRTD_693);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CanThrowResult_694 = arboretum_create_named_node("/clang/CanThrowResult");
    arboretum_create_edge(data_model.enum_CanThrowResult_694, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CT_Cannot_695 = arboretum_create_named_node("/clang/CT_Cannot");
      arboretum_create_edge(data_model.enum_constant_CT_Cannot_695, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CT_Cannot_695);
    }
    {
      data_model.enum_constant_CT_Dependent_696 = arboretum_create_named_node("/clang/CT_Dependent");
      arboretum_create_edge(data_model.enum_constant_CT_Dependent_696, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CT_Dependent_696);
    }
    {
      data_model.enum_constant_CT_Can_697 = arboretum_create_named_node("/clang/CT_Can");
      arboretum_create_edge(data_model.enum_constant_CT_Can_697, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CT_Can_697);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CapturedRegionKind_698 = arboretum_create_named_node("/clang/CapturedRegionKind");
    arboretum_create_edge(data_model.enum_CapturedRegionKind_698, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CR_Default_699 = arboretum_create_named_node("/clang/CR_Default");
      arboretum_create_edge(data_model.enum_constant_CR_Default_699, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CR_Default_699);
    }
    {
      data_model.enum_constant_CR_ObjCAtFinally_700 = arboretum_create_named_node("/clang/CR_ObjCAtFinally");
      arboretum_create_edge(data_model.enum_constant_CR_ObjCAtFinally_700, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CR_ObjCAtFinally_700);
    }
    {
      data_model.enum_constant_CR_OpenMP_701 = arboretum_create_named_node("/clang/CR_OpenMP");
      arboretum_create_edge(data_model.enum_constant_CR_OpenMP_701, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CR_OpenMP_701);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CastKind_702 = arboretum_create_named_node("/clang/CastKind");
    arboretum_create_edge(data_model.enum_CastKind_702, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CK_Dependent_703 = arboretum_create_named_node("/clang/CK_Dependent");
      arboretum_create_edge(data_model.enum_constant_CK_Dependent_703, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_Dependent_703);
    }
    {
      data_model.enum_constant_CK_BitCast_704 = arboretum_create_named_node("/clang/CK_BitCast");
      arboretum_create_edge(data_model.enum_constant_CK_BitCast_704, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_BitCast_704);
    }
    {
      data_model.enum_constant_CK_LValueBitCast_705 = arboretum_create_named_node("/clang/CK_LValueBitCast");
      arboretum_create_edge(data_model.enum_constant_CK_LValueBitCast_705, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_LValueBitCast_705);
    }
    {
      data_model.enum_constant_CK_LValueToRValueBitCast_706 = arboretum_create_named_node("/clang/CK_LValueToRValueBitCast");
      arboretum_create_edge(data_model.enum_constant_CK_LValueToRValueBitCast_706, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_LValueToRValueBitCast_706);
    }
    {
      data_model.enum_constant_CK_LValueToRValue_707 = arboretum_create_named_node("/clang/CK_LValueToRValue");
      arboretum_create_edge(data_model.enum_constant_CK_LValueToRValue_707, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_LValueToRValue_707);
    }
    {
      data_model.enum_constant_CK_NoOp_708 = arboretum_create_named_node("/clang/CK_NoOp");
      arboretum_create_edge(data_model.enum_constant_CK_NoOp_708, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_NoOp_708);
    }
    {
      data_model.enum_constant_CK_BaseToDerived_709 = arboretum_create_named_node("/clang/CK_BaseToDerived");
      arboretum_create_edge(data_model.enum_constant_CK_BaseToDerived_709, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_BaseToDerived_709);
    }
    {
      data_model.enum_constant_CK_DerivedToBase_710 = arboretum_create_named_node("/clang/CK_DerivedToBase");
      arboretum_create_edge(data_model.enum_constant_CK_DerivedToBase_710, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_DerivedToBase_710);
    }
    {
      data_model.enum_constant_CK_UncheckedDerivedToBase_711 = arboretum_create_named_node("/clang/CK_UncheckedDerivedToBase");
      arboretum_create_edge(data_model.enum_constant_CK_UncheckedDerivedToBase_711, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_UncheckedDerivedToBase_711);
    }
    {
      data_model.enum_constant_CK_Dynamic_712 = arboretum_create_named_node("/clang/CK_Dynamic");
      arboretum_create_edge(data_model.enum_constant_CK_Dynamic_712, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_Dynamic_712);
    }
    {
      data_model.enum_constant_CK_ToUnion_713 = arboretum_create_named_node("/clang/CK_ToUnion");
      arboretum_create_edge(data_model.enum_constant_CK_ToUnion_713, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ToUnion_713);
    }
    {
      data_model.enum_constant_CK_ArrayToPointerDecay_714 = arboretum_create_named_node("/clang/CK_ArrayToPointerDecay");
      arboretum_create_edge(data_model.enum_constant_CK_ArrayToPointerDecay_714, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ArrayToPointerDecay_714);
    }
    {
      data_model.enum_constant_CK_FunctionToPointerDecay_715 = arboretum_create_named_node("/clang/CK_FunctionToPointerDecay");
      arboretum_create_edge(data_model.enum_constant_CK_FunctionToPointerDecay_715, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FunctionToPointerDecay_715);
    }
    {
      data_model.enum_constant_CK_NullToPointer_716 = arboretum_create_named_node("/clang/CK_NullToPointer");
      arboretum_create_edge(data_model.enum_constant_CK_NullToPointer_716, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_NullToPointer_716);
    }
    {
      data_model.enum_constant_CK_NullToMemberPointer_717 = arboretum_create_named_node("/clang/CK_NullToMemberPointer");
      arboretum_create_edge(data_model.enum_constant_CK_NullToMemberPointer_717, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_NullToMemberPointer_717);
    }
    {
      data_model.enum_constant_CK_BaseToDerivedMemberPointer_718 = arboretum_create_named_node("/clang/CK_BaseToDerivedMemberPointer");
      arboretum_create_edge(data_model.enum_constant_CK_BaseToDerivedMemberPointer_718, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_BaseToDerivedMemberPointer_718);
    }
    {
      data_model.enum_constant_CK_DerivedToBaseMemberPointer_719 = arboretum_create_named_node("/clang/CK_DerivedToBaseMemberPointer");
      arboretum_create_edge(data_model.enum_constant_CK_DerivedToBaseMemberPointer_719, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_DerivedToBaseMemberPointer_719);
    }
    {
      data_model.enum_constant_CK_MemberPointerToBoolean_720 = arboretum_create_named_node("/clang/CK_MemberPointerToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_MemberPointerToBoolean_720, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_MemberPointerToBoolean_720);
    }
    {
      data_model.enum_constant_CK_ReinterpretMemberPointer_721 = arboretum_create_named_node("/clang/CK_ReinterpretMemberPointer");
      arboretum_create_edge(data_model.enum_constant_CK_ReinterpretMemberPointer_721, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ReinterpretMemberPointer_721);
    }
    {
      data_model.enum_constant_CK_UserDefinedConversion_722 = arboretum_create_named_node("/clang/CK_UserDefinedConversion");
      arboretum_create_edge(data_model.enum_constant_CK_UserDefinedConversion_722, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_UserDefinedConversion_722);
    }
    {
      data_model.enum_constant_CK_ConstructorConversion_723 = arboretum_create_named_node("/clang/CK_ConstructorConversion");
      arboretum_create_edge(data_model.enum_constant_CK_ConstructorConversion_723, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ConstructorConversion_723);
    }
    {
      data_model.enum_constant_CK_IntegralToPointer_724 = arboretum_create_named_node("/clang/CK_IntegralToPointer");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralToPointer_724, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralToPointer_724);
    }
    {
      data_model.enum_constant_CK_PointerToIntegral_725 = arboretum_create_named_node("/clang/CK_PointerToIntegral");
      arboretum_create_edge(data_model.enum_constant_CK_PointerToIntegral_725, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_PointerToIntegral_725);
    }
    {
      data_model.enum_constant_CK_PointerToBoolean_726 = arboretum_create_named_node("/clang/CK_PointerToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_PointerToBoolean_726, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_PointerToBoolean_726);
    }
    {
      data_model.enum_constant_CK_ToVoid_727 = arboretum_create_named_node("/clang/CK_ToVoid");
      arboretum_create_edge(data_model.enum_constant_CK_ToVoid_727, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ToVoid_727);
    }
    {
      data_model.enum_constant_CK_MatrixCast_728 = arboretum_create_named_node("/clang/CK_MatrixCast");
      arboretum_create_edge(data_model.enum_constant_CK_MatrixCast_728, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_MatrixCast_728);
    }
    {
      data_model.enum_constant_CK_VectorSplat_729 = arboretum_create_named_node("/clang/CK_VectorSplat");
      arboretum_create_edge(data_model.enum_constant_CK_VectorSplat_729, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_VectorSplat_729);
    }
    {
      data_model.enum_constant_CK_IntegralCast_730 = arboretum_create_named_node("/clang/CK_IntegralCast");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralCast_730, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralCast_730);
    }
    {
      data_model.enum_constant_CK_IntegralToBoolean_731 = arboretum_create_named_node("/clang/CK_IntegralToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralToBoolean_731, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralToBoolean_731);
    }
    {
      data_model.enum_constant_CK_IntegralToFloating_732 = arboretum_create_named_node("/clang/CK_IntegralToFloating");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralToFloating_732, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralToFloating_732);
    }
    {
      data_model.enum_constant_CK_FloatingToFixedPoint_733 = arboretum_create_named_node("/clang/CK_FloatingToFixedPoint");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingToFixedPoint_733, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingToFixedPoint_733);
    }
    {
      data_model.enum_constant_CK_FixedPointToFloating_734 = arboretum_create_named_node("/clang/CK_FixedPointToFloating");
      arboretum_create_edge(data_model.enum_constant_CK_FixedPointToFloating_734, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FixedPointToFloating_734);
    }
    {
      data_model.enum_constant_CK_FixedPointCast_735 = arboretum_create_named_node("/clang/CK_FixedPointCast");
      arboretum_create_edge(data_model.enum_constant_CK_FixedPointCast_735, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FixedPointCast_735);
    }
    {
      data_model.enum_constant_CK_FixedPointToIntegral_736 = arboretum_create_named_node("/clang/CK_FixedPointToIntegral");
      arboretum_create_edge(data_model.enum_constant_CK_FixedPointToIntegral_736, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FixedPointToIntegral_736);
    }
    {
      data_model.enum_constant_CK_IntegralToFixedPoint_737 = arboretum_create_named_node("/clang/CK_IntegralToFixedPoint");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralToFixedPoint_737, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralToFixedPoint_737);
    }
    {
      data_model.enum_constant_CK_FixedPointToBoolean_738 = arboretum_create_named_node("/clang/CK_FixedPointToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_FixedPointToBoolean_738, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FixedPointToBoolean_738);
    }
    {
      data_model.enum_constant_CK_FloatingToIntegral_739 = arboretum_create_named_node("/clang/CK_FloatingToIntegral");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingToIntegral_739, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingToIntegral_739);
    }
    {
      data_model.enum_constant_CK_FloatingToBoolean_740 = arboretum_create_named_node("/clang/CK_FloatingToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingToBoolean_740, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingToBoolean_740);
    }
    {
      data_model.enum_constant_CK_BooleanToSignedIntegral_741 = arboretum_create_named_node("/clang/CK_BooleanToSignedIntegral");
      arboretum_create_edge(data_model.enum_constant_CK_BooleanToSignedIntegral_741, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_BooleanToSignedIntegral_741);
    }
    {
      data_model.enum_constant_CK_FloatingCast_742 = arboretum_create_named_node("/clang/CK_FloatingCast");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingCast_742, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingCast_742);
    }
    {
      data_model.enum_constant_CK_CPointerToObjCPointerCast_743 = arboretum_create_named_node("/clang/CK_CPointerToObjCPointerCast");
      arboretum_create_edge(data_model.enum_constant_CK_CPointerToObjCPointerCast_743, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_CPointerToObjCPointerCast_743);
    }
    {
      data_model.enum_constant_CK_BlockPointerToObjCPointerCast_744 = arboretum_create_named_node("/clang/CK_BlockPointerToObjCPointerCast");
      arboretum_create_edge(data_model.enum_constant_CK_BlockPointerToObjCPointerCast_744, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_BlockPointerToObjCPointerCast_744);
    }
    {
      data_model.enum_constant_CK_AnyPointerToBlockPointerCast_745 = arboretum_create_named_node("/clang/CK_AnyPointerToBlockPointerCast");
      arboretum_create_edge(data_model.enum_constant_CK_AnyPointerToBlockPointerCast_745, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_AnyPointerToBlockPointerCast_745);
    }
    {
      data_model.enum_constant_CK_ObjCObjectLValueCast_746 = arboretum_create_named_node("/clang/CK_ObjCObjectLValueCast");
      arboretum_create_edge(data_model.enum_constant_CK_ObjCObjectLValueCast_746, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ObjCObjectLValueCast_746);
    }
    {
      data_model.enum_constant_CK_FloatingRealToComplex_747 = arboretum_create_named_node("/clang/CK_FloatingRealToComplex");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingRealToComplex_747, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingRealToComplex_747);
    }
    {
      data_model.enum_constant_CK_FloatingComplexToReal_748 = arboretum_create_named_node("/clang/CK_FloatingComplexToReal");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingComplexToReal_748, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingComplexToReal_748);
    }
    {
      data_model.enum_constant_CK_FloatingComplexToBoolean_749 = arboretum_create_named_node("/clang/CK_FloatingComplexToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingComplexToBoolean_749, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingComplexToBoolean_749);
    }
    {
      data_model.enum_constant_CK_FloatingComplexCast_750 = arboretum_create_named_node("/clang/CK_FloatingComplexCast");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingComplexCast_750, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingComplexCast_750);
    }
    {
      data_model.enum_constant_CK_FloatingComplexToIntegralComplex_751 = arboretum_create_named_node("/clang/CK_FloatingComplexToIntegralComplex");
      arboretum_create_edge(data_model.enum_constant_CK_FloatingComplexToIntegralComplex_751, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_FloatingComplexToIntegralComplex_751);
    }
    {
      data_model.enum_constant_CK_IntegralRealToComplex_752 = arboretum_create_named_node("/clang/CK_IntegralRealToComplex");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralRealToComplex_752, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralRealToComplex_752);
    }
    {
      data_model.enum_constant_CK_IntegralComplexToReal_753 = arboretum_create_named_node("/clang/CK_IntegralComplexToReal");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralComplexToReal_753, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralComplexToReal_753);
    }
    {
      data_model.enum_constant_CK_IntegralComplexToBoolean_754 = arboretum_create_named_node("/clang/CK_IntegralComplexToBoolean");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralComplexToBoolean_754, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralComplexToBoolean_754);
    }
    {
      data_model.enum_constant_CK_IntegralComplexCast_755 = arboretum_create_named_node("/clang/CK_IntegralComplexCast");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralComplexCast_755, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralComplexCast_755);
    }
    {
      data_model.enum_constant_CK_IntegralComplexToFloatingComplex_756 = arboretum_create_named_node("/clang/CK_IntegralComplexToFloatingComplex");
      arboretum_create_edge(data_model.enum_constant_CK_IntegralComplexToFloatingComplex_756, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntegralComplexToFloatingComplex_756);
    }
    {
      data_model.enum_constant_CK_ARCProduceObject_757 = arboretum_create_named_node("/clang/CK_ARCProduceObject");
      arboretum_create_edge(data_model.enum_constant_CK_ARCProduceObject_757, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ARCProduceObject_757);
    }
    {
      data_model.enum_constant_CK_ARCConsumeObject_758 = arboretum_create_named_node("/clang/CK_ARCConsumeObject");
      arboretum_create_edge(data_model.enum_constant_CK_ARCConsumeObject_758, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ARCConsumeObject_758);
    }
    {
      data_model.enum_constant_CK_ARCReclaimReturnedObject_759 = arboretum_create_named_node("/clang/CK_ARCReclaimReturnedObject");
      arboretum_create_edge(data_model.enum_constant_CK_ARCReclaimReturnedObject_759, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ARCReclaimReturnedObject_759);
    }
    {
      data_model.enum_constant_CK_ARCExtendBlockObject_760 = arboretum_create_named_node("/clang/CK_ARCExtendBlockObject");
      arboretum_create_edge(data_model.enum_constant_CK_ARCExtendBlockObject_760, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ARCExtendBlockObject_760);
    }
    {
      data_model.enum_constant_CK_AtomicToNonAtomic_761 = arboretum_create_named_node("/clang/CK_AtomicToNonAtomic");
      arboretum_create_edge(data_model.enum_constant_CK_AtomicToNonAtomic_761, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_AtomicToNonAtomic_761);
    }
    {
      data_model.enum_constant_CK_NonAtomicToAtomic_762 = arboretum_create_named_node("/clang/CK_NonAtomicToAtomic");
      arboretum_create_edge(data_model.enum_constant_CK_NonAtomicToAtomic_762, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_NonAtomicToAtomic_762);
    }
    {
      data_model.enum_constant_CK_CopyAndAutoreleaseBlockObject_763 = arboretum_create_named_node("/clang/CK_CopyAndAutoreleaseBlockObject");
      arboretum_create_edge(data_model.enum_constant_CK_CopyAndAutoreleaseBlockObject_763, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_CopyAndAutoreleaseBlockObject_763);
    }
    {
      data_model.enum_constant_CK_BuiltinFnToFnPtr_764 = arboretum_create_named_node("/clang/CK_BuiltinFnToFnPtr");
      arboretum_create_edge(data_model.enum_constant_CK_BuiltinFnToFnPtr_764, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_BuiltinFnToFnPtr_764);
    }
    {
      data_model.enum_constant_CK_ZeroToOCLOpaqueType_765 = arboretum_create_named_node("/clang/CK_ZeroToOCLOpaqueType");
      arboretum_create_edge(data_model.enum_constant_CK_ZeroToOCLOpaqueType_765, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_ZeroToOCLOpaqueType_765);
    }
    {
      data_model.enum_constant_CK_AddressSpaceConversion_766 = arboretum_create_named_node("/clang/CK_AddressSpaceConversion");
      arboretum_create_edge(data_model.enum_constant_CK_AddressSpaceConversion_766, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_AddressSpaceConversion_766);
    }
    {
      data_model.enum_constant_CK_IntToOCLSampler_767 = arboretum_create_named_node("/clang/CK_IntToOCLSampler");
      arboretum_create_edge(data_model.enum_constant_CK_IntToOCLSampler_767, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CK_IntToOCLSampler_767);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_CharacterLiteralKind_768 = arboretum_create_named_node("/clang/CharacterLiteralKind");
    arboretum_create_edge(data_model.enum_CharacterLiteralKind_768, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Ascii_769 = arboretum_create_named_node("/clang/CharacterLiteralKind/Ascii");
      arboretum_create_edge(data_model.enum_constant_Ascii_769, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ascii_769);
    }
    {
      data_model.enum_constant_Wide_770 = arboretum_create_named_node("/clang/CharacterLiteralKind/Wide");
      arboretum_create_edge(data_model.enum_constant_Wide_770, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Wide_770);
    }
    {
      data_model.enum_constant_UTF8_771 = arboretum_create_named_node("/clang/CharacterLiteralKind/UTF8");
      arboretum_create_edge(data_model.enum_constant_UTF8_771, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTF8_771);
    }
    {
      data_model.enum_constant_UTF16_772 = arboretum_create_named_node("/clang/CharacterLiteralKind/UTF16");
      arboretum_create_edge(data_model.enum_constant_UTF16_772, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTF16_772);
    }
    {
      data_model.enum_constant_UTF32_773 = arboretum_create_named_node("/clang/CharacterLiteralKind/UTF32");
      arboretum_create_edge(data_model.enum_constant_UTF32_773, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTF32_773);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ConstantResultStorageKind_774 = arboretum_create_named_node("/clang/ConstantResultStorageKind");
    arboretum_create_edge(data_model.enum_ConstantResultStorageKind_774, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_None_775 = arboretum_create_named_node("/clang/ConstantResultStorageKind/None");
      arboretum_create_edge(data_model.enum_constant_None_775, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_775);
    }
    {
      data_model.enum_constant_Int64_776 = arboretum_create_named_node("/clang/ConstantResultStorageKind/Int64");
      arboretum_create_edge(data_model.enum_constant_Int64_776, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Int64_776);
    }
    {
      data_model.enum_constant_APValue_777 = arboretum_create_named_node("/clang/ConstantResultStorageKind/APValue");
      arboretum_create_edge(data_model.enum_constant_APValue_777, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_APValue_777);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ConstexprSpecKind_778 = arboretum_create_named_node("/clang/ConstexprSpecKind");
    arboretum_create_edge(data_model.enum_ConstexprSpecKind_778, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Unspecified_779 = arboretum_create_named_node("/clang/ConstexprSpecKind/Unspecified");
      arboretum_create_edge(data_model.enum_constant_Unspecified_779, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unspecified_779);
    }
    {
      data_model.enum_constant_Constexpr_780 = arboretum_create_named_node("/clang/ConstexprSpecKind/Constexpr");
      arboretum_create_edge(data_model.enum_constant_Constexpr_780, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Constexpr_780);
    }
    {
      data_model.enum_constant_Consteval_781 = arboretum_create_named_node("/clang/ConstexprSpecKind/Consteval");
      arboretum_create_edge(data_model.enum_constant_Consteval_781, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Consteval_781);
    }
    {
      data_model.enum_constant_Constinit_782 = arboretum_create_named_node("/clang/ConstexprSpecKind/Constinit");
      arboretum_create_edge(data_model.enum_constant_Constinit_782, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Constinit_782);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_FriendObjectKind_783 = arboretum_create_named_node("/clang/Decl/FriendObjectKind");
    arboretum_create_edge(data_model.enum_FriendObjectKind_783, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_FOK_None_784 = arboretum_create_named_node("/clang/Decl/FOK_None");
      arboretum_create_edge(data_model.enum_constant_FOK_None_784, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FOK_None_784);
    }
    {
      data_model.enum_constant_FOK_Declared_785 = arboretum_create_named_node("/clang/Decl/FOK_Declared");
      arboretum_create_edge(data_model.enum_constant_FOK_Declared_785, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FOK_Declared_785);
    }
    {
      data_model.enum_constant_FOK_Undeclared_786 = arboretum_create_named_node("/clang/Decl/FOK_Undeclared");
      arboretum_create_edge(data_model.enum_constant_FOK_Undeclared_786, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FOK_Undeclared_786);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ModuleOwnershipKind_787 = arboretum_create_named_node("/clang/Decl/ModuleOwnershipKind");
    arboretum_create_edge(data_model.enum_ModuleOwnershipKind_787, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Unowned_788 = arboretum_create_named_node("/clang/Decl/ModuleOwnershipKind/Unowned");
      arboretum_create_edge(data_model.enum_constant_Unowned_788, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unowned_788);
    }
    {
      data_model.enum_constant_Visible_789 = arboretum_create_named_node("/clang/Decl/ModuleOwnershipKind/Visible");
      arboretum_create_edge(data_model.enum_constant_Visible_789, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Visible_789);
    }
    {
      data_model.enum_constant_VisibleWhenImported_790 = arboretum_create_named_node("/clang/Decl/ModuleOwnershipKind/VisibleWhenImported");
      arboretum_create_edge(data_model.enum_constant_VisibleWhenImported_790, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VisibleWhenImported_790);
    }
    {
      data_model.enum_constant_ReachableWhenImported_791 = arboretum_create_named_node("/clang/Decl/ModuleOwnershipKind/ReachableWhenImported");
      arboretum_create_edge(data_model.enum_constant_ReachableWhenImported_791, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReachableWhenImported_791);
    }
    {
      data_model.enum_constant_ModulePrivate_792 = arboretum_create_named_node("/clang/Decl/ModuleOwnershipKind/ModulePrivate");
      arboretum_create_edge(data_model.enum_constant_ModulePrivate_792, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ModulePrivate_792);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ObjCDeclQualifier_793 = arboretum_create_named_node("/clang/Decl/ObjCDeclQualifier");
    arboretum_create_edge(data_model.enum_ObjCDeclQualifier_793, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_OBJC_TQ_None_794 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_None");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_None_794, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_None_794);
    }
    {
      data_model.enum_constant_OBJC_TQ_In_795 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_In");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_In_795, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_In_795);
    }
    {
      data_model.enum_constant_OBJC_TQ_Inout_796 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_Inout");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_Inout_796, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_Inout_796);
    }
    {
      data_model.enum_constant_OBJC_TQ_Out_797 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_Out");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_Out_797, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_Out_797);
    }
    {
      data_model.enum_constant_OBJC_TQ_Bycopy_798 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_Bycopy");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_Bycopy_798, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_Bycopy_798);
    }
    {
      data_model.enum_constant_OBJC_TQ_Byref_799 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_Byref");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_Byref_799, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_Byref_799);
    }
    {
      data_model.enum_constant_OBJC_TQ_Oneway_800 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_Oneway");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_Oneway_800, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_Oneway_800);
    }
    {
      data_model.enum_constant_OBJC_TQ_CSNullability_801 = arboretum_create_named_node("/clang/Decl/OBJC_TQ_CSNullability");
      arboretum_create_edge(data_model.enum_constant_OBJC_TQ_CSNullability_801, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OBJC_TQ_CSNullability_801);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_DeductionCandidate_802 = arboretum_create_named_node("/clang/DeductionCandidate");
    arboretum_create_edge(data_model.enum_DeductionCandidate_802, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Normal_803 = arboretum_create_named_node("/clang/DeductionCandidate/Normal");
      arboretum_create_edge(data_model.enum_constant_Normal_803, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Normal_803);
    }
    {
      data_model.enum_constant_Copy_804 = arboretum_create_named_node("/clang/DeductionCandidate/Copy");
      arboretum_create_edge(data_model.enum_constant_Copy_804, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Copy_804);
    }
    {
      data_model.enum_constant_Aggregate_805 = arboretum_create_named_node("/clang/DeductionCandidate/Aggregate");
      arboretum_create_edge(data_model.enum_constant_Aggregate_805, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Aggregate_805);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ElaboratedTypeKeyword_806 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword");
    arboretum_create_edge(data_model.enum_ElaboratedTypeKeyword_806, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Struct_807 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/Struct");
      arboretum_create_edge(data_model.enum_constant_Struct_807, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Struct_807);
    }
    {
      data_model.enum_constant_Interface_808 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/Interface");
      arboretum_create_edge(data_model.enum_constant_Interface_808, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Interface_808);
    }
    {
      data_model.enum_constant_Union_809 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/Union");
      arboretum_create_edge(data_model.enum_constant_Union_809, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Union_809);
    }
    {
      data_model.enum_constant_Class_810 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/Class");
      arboretum_create_edge(data_model.enum_constant_Class_810, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Class_810);
    }
    {
      data_model.enum_constant_Enum_811 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/Enum");
      arboretum_create_edge(data_model.enum_constant_Enum_811, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Enum_811);
    }
    {
      data_model.enum_constant_Typename_812 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/Typename");
      arboretum_create_edge(data_model.enum_constant_Typename_812, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Typename_812);
    }
    {
      data_model.enum_constant_None_813 = arboretum_create_named_node("/clang/ElaboratedTypeKeyword/None");
      arboretum_create_edge(data_model.enum_constant_None_813, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_813);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ExceptionSpecificationType_814 = arboretum_create_named_node("/clang/ExceptionSpecificationType");
    arboretum_create_edge(data_model.enum_ExceptionSpecificationType_814, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_EST_None_815 = arboretum_create_named_node("/clang/EST_None");
      arboretum_create_edge(data_model.enum_constant_EST_None_815, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_None_815);
    }
    {
      data_model.enum_constant_EST_DynamicNone_816 = arboretum_create_named_node("/clang/EST_DynamicNone");
      arboretum_create_edge(data_model.enum_constant_EST_DynamicNone_816, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_DynamicNone_816);
    }
    {
      data_model.enum_constant_EST_Dynamic_817 = arboretum_create_named_node("/clang/EST_Dynamic");
      arboretum_create_edge(data_model.enum_constant_EST_Dynamic_817, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_Dynamic_817);
    }
    {
      data_model.enum_constant_EST_MSAny_818 = arboretum_create_named_node("/clang/EST_MSAny");
      arboretum_create_edge(data_model.enum_constant_EST_MSAny_818, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_MSAny_818);
    }
    {
      data_model.enum_constant_EST_NoThrow_819 = arboretum_create_named_node("/clang/EST_NoThrow");
      arboretum_create_edge(data_model.enum_constant_EST_NoThrow_819, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_NoThrow_819);
    }
    {
      data_model.enum_constant_EST_BasicNoexcept_820 = arboretum_create_named_node("/clang/EST_BasicNoexcept");
      arboretum_create_edge(data_model.enum_constant_EST_BasicNoexcept_820, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_BasicNoexcept_820);
    }
    {
      data_model.enum_constant_EST_DependentNoexcept_821 = arboretum_create_named_node("/clang/EST_DependentNoexcept");
      arboretum_create_edge(data_model.enum_constant_EST_DependentNoexcept_821, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_DependentNoexcept_821);
    }
    {
      data_model.enum_constant_EST_NoexceptFalse_822 = arboretum_create_named_node("/clang/EST_NoexceptFalse");
      arboretum_create_edge(data_model.enum_constant_EST_NoexceptFalse_822, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_NoexceptFalse_822);
    }
    {
      data_model.enum_constant_EST_NoexceptTrue_823 = arboretum_create_named_node("/clang/EST_NoexceptTrue");
      arboretum_create_edge(data_model.enum_constant_EST_NoexceptTrue_823, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_NoexceptTrue_823);
    }
    {
      data_model.enum_constant_EST_Unevaluated_824 = arboretum_create_named_node("/clang/EST_Unevaluated");
      arboretum_create_edge(data_model.enum_constant_EST_Unevaluated_824, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_Unevaluated_824);
    }
    {
      data_model.enum_constant_EST_Uninstantiated_825 = arboretum_create_named_node("/clang/EST_Uninstantiated");
      arboretum_create_edge(data_model.enum_constant_EST_Uninstantiated_825, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_Uninstantiated_825);
    }
    {
      data_model.enum_constant_EST_Unparsed_826 = arboretum_create_named_node("/clang/EST_Unparsed");
      arboretum_create_edge(data_model.enum_constant_EST_Unparsed_826, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EST_Unparsed_826);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ExprDependence_827 = arboretum_create_named_node("/clang/ExprDependenceScope/ExprDependence");
    arboretum_create_edge(data_model.enum_ExprDependence_827, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_UnexpandedPack_828 = arboretum_create_named_node("/clang/ExprDependenceScope/UnexpandedPack");
      arboretum_create_edge(data_model.enum_constant_UnexpandedPack_828, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UnexpandedPack_828);
    }
    {
      data_model.enum_constant_Instantiation_829 = arboretum_create_named_node("/clang/ExprDependenceScope/Instantiation");
      arboretum_create_edge(data_model.enum_constant_Instantiation_829, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Instantiation_829);
    }
    {
      data_model.enum_constant_Type_830 = arboretum_create_named_node("/clang/ExprDependenceScope/Type");
      arboretum_create_edge(data_model.enum_constant_Type_830, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Type_830);
    }
    {
      data_model.enum_constant_Value_831 = arboretum_create_named_node("/clang/ExprDependenceScope/Value");
      arboretum_create_edge(data_model.enum_constant_Value_831, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Value_831);
    }
    {
      data_model.enum_constant_Error_832 = arboretum_create_named_node("/clang/ExprDependenceScope/Error");
      arboretum_create_edge(data_model.enum_constant_Error_832, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Error_832);
    }
    {
      data_model.enum_constant_None_833 = arboretum_create_named_node("/clang/ExprDependenceScope/None");
      arboretum_create_edge(data_model.enum_constant_None_833, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_833);
    }
    {
      data_model.enum_constant_All_834 = arboretum_create_named_node("/clang/ExprDependenceScope/All");
      arboretum_create_edge(data_model.enum_constant_All_834, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_All_834);
    }
    {
      data_model.enum_constant_TypeValue_835 = arboretum_create_named_node("/clang/ExprDependenceScope/TypeValue");
      arboretum_create_edge(data_model.enum_constant_TypeValue_835, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeValue_835);
    }
    {
      data_model.enum_constant_TypeInstantiation_836 = arboretum_create_named_node("/clang/ExprDependenceScope/TypeInstantiation");
      arboretum_create_edge(data_model.enum_constant_TypeInstantiation_836, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeInstantiation_836);
    }
    {
      data_model.enum_constant_ValueInstantiation_837 = arboretum_create_named_node("/clang/ExprDependenceScope/ValueInstantiation");
      arboretum_create_edge(data_model.enum_constant_ValueInstantiation_837, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ValueInstantiation_837);
    }
    {
      data_model.enum_constant_TypeValueInstantiation_838 = arboretum_create_named_node("/clang/ExprDependenceScope/TypeValueInstantiation");
      arboretum_create_edge(data_model.enum_constant_TypeValueInstantiation_838, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeValueInstantiation_838);
    }
    {
      data_model.enum_constant_ErrorDependent_839 = arboretum_create_named_node("/clang/ExprDependenceScope/ErrorDependent");
      arboretum_create_edge(data_model.enum_constant_ErrorDependent_839, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ErrorDependent_839);
    }
    {
      data_model.enum_constant_LLVM_BITMASK_LARGEST_ENUMERATOR_840 = arboretum_create_named_node("/clang/ExprDependenceScope/LLVM_BITMASK_LARGEST_ENUMERATOR");
      arboretum_create_edge(data_model.enum_constant_LLVM_BITMASK_LARGEST_ENUMERATOR_840, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LLVM_BITMASK_LARGEST_ENUMERATOR_840);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ExprObjectKind_841 = arboretum_create_named_node("/clang/ExprObjectKind");
    arboretum_create_edge(data_model.enum_ExprObjectKind_841, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_OK_Ordinary_842 = arboretum_create_named_node("/clang/OK_Ordinary");
      arboretum_create_edge(data_model.enum_constant_OK_Ordinary_842, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OK_Ordinary_842);
    }
    {
      data_model.enum_constant_OK_BitField_843 = arboretum_create_named_node("/clang/OK_BitField");
      arboretum_create_edge(data_model.enum_constant_OK_BitField_843, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OK_BitField_843);
    }
    {
      data_model.enum_constant_OK_VectorComponent_844 = arboretum_create_named_node("/clang/OK_VectorComponent");
      arboretum_create_edge(data_model.enum_constant_OK_VectorComponent_844, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OK_VectorComponent_844);
    }
    {
      data_model.enum_constant_OK_ObjCProperty_845 = arboretum_create_named_node("/clang/OK_ObjCProperty");
      arboretum_create_edge(data_model.enum_constant_OK_ObjCProperty_845, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OK_ObjCProperty_845);
    }
    {
      data_model.enum_constant_OK_ObjCSubscript_846 = arboretum_create_named_node("/clang/OK_ObjCSubscript");
      arboretum_create_edge(data_model.enum_constant_OK_ObjCSubscript_846, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OK_ObjCSubscript_846);
    }
    {
      data_model.enum_constant_OK_MatrixComponent_847 = arboretum_create_named_node("/clang/OK_MatrixComponent");
      arboretum_create_edge(data_model.enum_constant_OK_MatrixComponent_847, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OK_MatrixComponent_847);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ExprValueKind_848 = arboretum_create_named_node("/clang/ExprValueKind");
    arboretum_create_edge(data_model.enum_ExprValueKind_848, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_VK_PRValue_849 = arboretum_create_named_node("/clang/VK_PRValue");
      arboretum_create_edge(data_model.enum_constant_VK_PRValue_849, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VK_PRValue_849);
    }
    {
      data_model.enum_constant_VK_LValue_850 = arboretum_create_named_node("/clang/VK_LValue");
      arboretum_create_edge(data_model.enum_constant_VK_LValue_850, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VK_LValue_850);
    }
    {
      data_model.enum_constant_VK_XValue_851 = arboretum_create_named_node("/clang/VK_XValue");
      arboretum_create_edge(data_model.enum_constant_VK_XValue_851, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VK_XValue_851);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ExpressionTrait_852 = arboretum_create_named_node("/clang/ExpressionTrait");
    arboretum_create_edge(data_model.enum_ExpressionTrait_852, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_ET_IsLValueExpr_853 = arboretum_create_named_node("/clang/ET_IsLValueExpr");
      arboretum_create_edge(data_model.enum_constant_ET_IsLValueExpr_853, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ET_IsLValueExpr_853);
    }
    {
      data_model.enum_constant_ET_IsRValueExpr_854 = arboretum_create_named_node("/clang/ET_IsRValueExpr");
      arboretum_create_edge(data_model.enum_constant_ET_IsRValueExpr_854, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ET_IsRValueExpr_854);
    }
    {
      data_model.enum_constant_ET_Last_855 = arboretum_create_named_node("/clang/ET_Last");
      arboretum_create_edge(data_model.enum_constant_ET_Last_855, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ET_Last_855);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TemplatedKind_856 = arboretum_create_named_node("/clang/FunctionDecl/TemplatedKind");
    arboretum_create_edge(data_model.enum_TemplatedKind_856, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_TK_NonTemplate_857 = arboretum_create_named_node("/clang/FunctionDecl/TK_NonTemplate");
      arboretum_create_edge(data_model.enum_constant_TK_NonTemplate_857, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TK_NonTemplate_857);
    }
    {
      data_model.enum_constant_TK_FunctionTemplate_858 = arboretum_create_named_node("/clang/FunctionDecl/TK_FunctionTemplate");
      arboretum_create_edge(data_model.enum_constant_TK_FunctionTemplate_858, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TK_FunctionTemplate_858);
    }
    {
      data_model.enum_constant_TK_MemberSpecialization_859 = arboretum_create_named_node("/clang/FunctionDecl/TK_MemberSpecialization");
      arboretum_create_edge(data_model.enum_constant_TK_MemberSpecialization_859, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TK_MemberSpecialization_859);
    }
    {
      data_model.enum_constant_TK_FunctionTemplateSpecialization_860 = arboretum_create_named_node("/clang/FunctionDecl/TK_FunctionTemplateSpecialization");
      arboretum_create_edge(data_model.enum_constant_TK_FunctionTemplateSpecialization_860, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TK_FunctionTemplateSpecialization_860);
    }
    {
      data_model.enum_constant_TK_DependentFunctionTemplateSpecialization_861 = arboretum_create_named_node("/clang/FunctionDecl/TK_DependentFunctionTemplateSpecialization");
      arboretum_create_edge(data_model.enum_constant_TK_DependentFunctionTemplateSpecialization_861, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TK_DependentFunctionTemplateSpecialization_861);
    }
    {
      data_model.enum_constant_TK_DependentNonTemplate_862 = arboretum_create_named_node("/clang/FunctionDecl/TK_DependentNonTemplate");
      arboretum_create_edge(data_model.enum_constant_TK_DependentNonTemplate_862, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TK_DependentNonTemplate_862);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_IfStatementKind_863 = arboretum_create_named_node("/clang/IfStatementKind");
    arboretum_create_edge(data_model.enum_IfStatementKind_863, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Ordinary_864 = arboretum_create_named_node("/clang/IfStatementKind/Ordinary");
      arboretum_create_edge(data_model.enum_constant_Ordinary_864, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ordinary_864);
    }
    {
      data_model.enum_constant_Constexpr_865 = arboretum_create_named_node("/clang/IfStatementKind/Constexpr");
      arboretum_create_edge(data_model.enum_constant_Constexpr_865, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Constexpr_865);
    }
    {
      data_model.enum_constant_ConstevalNonNegated_866 = arboretum_create_named_node("/clang/IfStatementKind/ConstevalNonNegated");
      arboretum_create_edge(data_model.enum_constant_ConstevalNonNegated_866, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ConstevalNonNegated_866);
    }
    {
      data_model.enum_constant_ConstevalNegated_867 = arboretum_create_named_node("/clang/IfStatementKind/ConstevalNegated");
      arboretum_create_edge(data_model.enum_constant_ConstevalNegated_867, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ConstevalNegated_867);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ImplicitParamKind_868 = arboretum_create_named_node("/clang/ImplicitParamKind");
    arboretum_create_edge(data_model.enum_ImplicitParamKind_868, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_ObjCSelf_869 = arboretum_create_named_node("/clang/ImplicitParamKind/ObjCSelf");
      arboretum_create_edge(data_model.enum_constant_ObjCSelf_869, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCSelf_869);
    }
    {
      data_model.enum_constant_ObjCCmd_870 = arboretum_create_named_node("/clang/ImplicitParamKind/ObjCCmd");
      arboretum_create_edge(data_model.enum_constant_ObjCCmd_870, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCCmd_870);
    }
    {
      data_model.enum_constant_CXXThis_871 = arboretum_create_named_node("/clang/ImplicitParamKind/CXXThis");
      arboretum_create_edge(data_model.enum_constant_CXXThis_871, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CXXThis_871);
    }
    {
      data_model.enum_constant_CXXVTT_872 = arboretum_create_named_node("/clang/ImplicitParamKind/CXXVTT");
      arboretum_create_edge(data_model.enum_constant_CXXVTT_872, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CXXVTT_872);
    }
    {
      data_model.enum_constant_CapturedContext_873 = arboretum_create_named_node("/clang/ImplicitParamKind/CapturedContext");
      arboretum_create_edge(data_model.enum_constant_CapturedContext_873, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CapturedContext_873);
    }
    {
      data_model.enum_constant_ThreadPrivateVar_874 = arboretum_create_named_node("/clang/ImplicitParamKind/ThreadPrivateVar");
      arboretum_create_edge(data_model.enum_constant_ThreadPrivateVar_874, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ThreadPrivateVar_874);
    }
    {
      data_model.enum_constant_Other_875 = arboretum_create_named_node("/clang/ImplicitParamKind/Other");
      arboretum_create_edge(data_model.enum_constant_Other_875, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Other_875);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_InClassInitStyle_876 = arboretum_create_named_node("/clang/InClassInitStyle");
    arboretum_create_edge(data_model.enum_InClassInitStyle_876, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_ICIS_NoInit_877 = arboretum_create_named_node("/clang/ICIS_NoInit");
      arboretum_create_edge(data_model.enum_constant_ICIS_NoInit_877, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ICIS_NoInit_877);
    }
    {
      data_model.enum_constant_ICIS_CopyInit_878 = arboretum_create_named_node("/clang/ICIS_CopyInit");
      arboretum_create_edge(data_model.enum_constant_ICIS_CopyInit_878, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ICIS_CopyInit_878);
    }
    {
      data_model.enum_constant_ICIS_ListInit_879 = arboretum_create_named_node("/clang/ICIS_ListInit");
      arboretum_create_edge(data_model.enum_constant_ICIS_ListInit_879, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ICIS_ListInit_879);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_LambdaCaptureDefault_880 = arboretum_create_named_node("/clang/LambdaCaptureDefault");
    arboretum_create_edge(data_model.enum_LambdaCaptureDefault_880, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_LCD_None_881 = arboretum_create_named_node("/clang/LCD_None");
      arboretum_create_edge(data_model.enum_constant_LCD_None_881, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LCD_None_881);
    }
    {
      data_model.enum_constant_LCD_ByCopy_882 = arboretum_create_named_node("/clang/LCD_ByCopy");
      arboretum_create_edge(data_model.enum_constant_LCD_ByCopy_882, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LCD_ByCopy_882);
    }
    {
      data_model.enum_constant_LCD_ByRef_883 = arboretum_create_named_node("/clang/LCD_ByRef");
      arboretum_create_edge(data_model.enum_constant_LCD_ByRef_883, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LCD_ByRef_883);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_LanguageLinkage_884 = arboretum_create_named_node("/clang/LanguageLinkage");
    arboretum_create_edge(data_model.enum_LanguageLinkage_884, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CLanguageLinkage_885 = arboretum_create_named_node("/clang/CLanguageLinkage");
      arboretum_create_edge(data_model.enum_constant_CLanguageLinkage_885, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CLanguageLinkage_885);
    }
    {
      data_model.enum_constant_CXXLanguageLinkage_886 = arboretum_create_named_node("/clang/CXXLanguageLinkage");
      arboretum_create_edge(data_model.enum_constant_CXXLanguageLinkage_886, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CXXLanguageLinkage_886);
    }
    {
      data_model.enum_constant_NoLanguageLinkage_887 = arboretum_create_named_node("/clang/NoLanguageLinkage");
      arboretum_create_edge(data_model.enum_constant_NoLanguageLinkage_887, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoLanguageLinkage_887);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_Linkage_888 = arboretum_create_named_node("/clang/Linkage");
    arboretum_create_edge(data_model.enum_Linkage_888, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Invalid_889 = arboretum_create_named_node("/clang/Linkage/Invalid");
      arboretum_create_edge(data_model.enum_constant_Invalid_889, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Invalid_889);
    }
    {
      data_model.enum_constant_None_890 = arboretum_create_named_node("/clang/Linkage/None");
      arboretum_create_edge(data_model.enum_constant_None_890, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_890);
    }
    {
      data_model.enum_constant_Internal_891 = arboretum_create_named_node("/clang/Linkage/Internal");
      arboretum_create_edge(data_model.enum_constant_Internal_891, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Internal_891);
    }
    {
      data_model.enum_constant_UniqueExternal_892 = arboretum_create_named_node("/clang/Linkage/UniqueExternal");
      arboretum_create_edge(data_model.enum_constant_UniqueExternal_892, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UniqueExternal_892);
    }
    {
      data_model.enum_constant_VisibleNone_893 = arboretum_create_named_node("/clang/Linkage/VisibleNone");
      arboretum_create_edge(data_model.enum_constant_VisibleNone_893, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VisibleNone_893);
    }
    {
      data_model.enum_constant_Module_894 = arboretum_create_named_node("/clang/Linkage/Module");
      arboretum_create_edge(data_model.enum_constant_Module_894, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Module_894);
    }
    {
      data_model.enum_constant_External_895 = arboretum_create_named_node("/clang/Linkage/External");
      arboretum_create_edge(data_model.enum_constant_External_895, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_External_895);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_LinkageSpecLanguageIDs_896 = arboretum_create_named_node("/clang/LinkageSpecLanguageIDs");
    arboretum_create_edge(data_model.enum_LinkageSpecLanguageIDs_896, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_C_897 = arboretum_create_named_node("/clang/LinkageSpecLanguageIDs/C");
      arboretum_create_edge(data_model.enum_constant_C_897, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_C_897);
    }
    {
      data_model.enum_constant_CXX_898 = arboretum_create_named_node("/clang/LinkageSpecLanguageIDs/CXX");
      arboretum_create_edge(data_model.enum_constant_CXX_898, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CXX_898);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_MSVtorDispMode_899 = arboretum_create_named_node("/clang/MSVtorDispMode");
    arboretum_create_edge(data_model.enum_MSVtorDispMode_899, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Never_900 = arboretum_create_named_node("/clang/MSVtorDispMode/Never");
      arboretum_create_edge(data_model.enum_constant_Never_900, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Never_900);
    }
    {
      data_model.enum_constant_ForVBaseOverride_901 = arboretum_create_named_node("/clang/MSVtorDispMode/ForVBaseOverride");
      arboretum_create_edge(data_model.enum_constant_ForVBaseOverride_901, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ForVBaseOverride_901);
    }
    {
      data_model.enum_constant_ForVFTable_902 = arboretum_create_named_node("/clang/MSVtorDispMode/ForVFTable");
      arboretum_create_edge(data_model.enum_constant_ForVFTable_902, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ForVFTable_902);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_MultiVersionKind_903 = arboretum_create_named_node("/clang/MultiVersionKind");
    arboretum_create_edge(data_model.enum_MultiVersionKind_903, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_None_904 = arboretum_create_named_node("/clang/MultiVersionKind/None");
      arboretum_create_edge(data_model.enum_constant_None_904, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_904);
    }
    {
      data_model.enum_constant_Target_905 = arboretum_create_named_node("/clang/MultiVersionKind/Target");
      arboretum_create_edge(data_model.enum_constant_Target_905, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Target_905);
    }
    {
      data_model.enum_constant_CPUSpecific_906 = arboretum_create_named_node("/clang/MultiVersionKind/CPUSpecific");
      arboretum_create_edge(data_model.enum_constant_CPUSpecific_906, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CPUSpecific_906);
    }
    {
      data_model.enum_constant_CPUDispatch_907 = arboretum_create_named_node("/clang/MultiVersionKind/CPUDispatch");
      arboretum_create_edge(data_model.enum_constant_CPUDispatch_907, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CPUDispatch_907);
    }
    {
      data_model.enum_constant_TargetClones_908 = arboretum_create_named_node("/clang/MultiVersionKind/TargetClones");
      arboretum_create_edge(data_model.enum_constant_TargetClones_908, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TargetClones_908);
    }
    {
      data_model.enum_constant_TargetVersion_909 = arboretum_create_named_node("/clang/MultiVersionKind/TargetVersion");
      arboretum_create_edge(data_model.enum_constant_TargetVersion_909, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TargetVersion_909);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_NonOdrUseReason_910 = arboretum_create_named_node("/clang/NonOdrUseReason");
    arboretum_create_edge(data_model.enum_NonOdrUseReason_910, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_NOUR_None_911 = arboretum_create_named_node("/clang/NOUR_None");
      arboretum_create_edge(data_model.enum_constant_NOUR_None_911, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NOUR_None_911);
    }
    {
      data_model.enum_constant_NOUR_Unevaluated_912 = arboretum_create_named_node("/clang/NOUR_Unevaluated");
      arboretum_create_edge(data_model.enum_constant_NOUR_Unevaluated_912, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NOUR_Unevaluated_912);
    }
    {
      data_model.enum_constant_NOUR_Constant_913 = arboretum_create_named_node("/clang/NOUR_Constant");
      arboretum_create_edge(data_model.enum_constant_NOUR_Constant_913, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NOUR_Constant_913);
    }
    {
      data_model.enum_constant_NOUR_Discarded_914 = arboretum_create_named_node("/clang/NOUR_Discarded");
      arboretum_create_edge(data_model.enum_constant_NOUR_Discarded_914, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NOUR_Discarded_914);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ObjCStringFormatFamily_915 = arboretum_create_named_node("/clang/ObjCStringFormatFamily");
    arboretum_create_edge(data_model.enum_ObjCStringFormatFamily_915, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_SFF_None_916 = arboretum_create_named_node("/clang/SFF_None");
      arboretum_create_edge(data_model.enum_constant_SFF_None_916, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SFF_None_916);
    }
    {
      data_model.enum_constant_SFF_NSString_917 = arboretum_create_named_node("/clang/SFF_NSString");
      arboretum_create_edge(data_model.enum_constant_SFF_NSString_917, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SFF_NSString_917);
    }
    {
      data_model.enum_constant_SFF_CFString_918 = arboretum_create_named_node("/clang/SFF_CFString");
      arboretum_create_edge(data_model.enum_constant_SFF_CFString_918, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SFF_CFString_918);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_OverloadedOperatorKind_919 = arboretum_create_named_node("/clang/OverloadedOperatorKind");
    arboretum_create_edge(data_model.enum_OverloadedOperatorKind_919, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_OO_None_920 = arboretum_create_named_node("/clang/OO_None");
      arboretum_create_edge(data_model.enum_constant_OO_None_920, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_None_920);
    }
    {
      data_model.enum_constant_OO_New_921 = arboretum_create_named_node("/clang/OO_New");
      arboretum_create_edge(data_model.enum_constant_OO_New_921, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_New_921);
    }
    {
      data_model.enum_constant_OO_Delete_922 = arboretum_create_named_node("/clang/OO_Delete");
      arboretum_create_edge(data_model.enum_constant_OO_Delete_922, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Delete_922);
    }
    {
      data_model.enum_constant_OO_Array_New_923 = arboretum_create_named_node("/clang/OO_Array_New");
      arboretum_create_edge(data_model.enum_constant_OO_Array_New_923, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Array_New_923);
    }
    {
      data_model.enum_constant_OO_Array_Delete_924 = arboretum_create_named_node("/clang/OO_Array_Delete");
      arboretum_create_edge(data_model.enum_constant_OO_Array_Delete_924, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Array_Delete_924);
    }
    {
      data_model.enum_constant_OO_Plus_925 = arboretum_create_named_node("/clang/OO_Plus");
      arboretum_create_edge(data_model.enum_constant_OO_Plus_925, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Plus_925);
    }
    {
      data_model.enum_constant_OO_Minus_926 = arboretum_create_named_node("/clang/OO_Minus");
      arboretum_create_edge(data_model.enum_constant_OO_Minus_926, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Minus_926);
    }
    {
      data_model.enum_constant_OO_Star_927 = arboretum_create_named_node("/clang/OO_Star");
      arboretum_create_edge(data_model.enum_constant_OO_Star_927, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Star_927);
    }
    {
      data_model.enum_constant_OO_Slash_928 = arboretum_create_named_node("/clang/OO_Slash");
      arboretum_create_edge(data_model.enum_constant_OO_Slash_928, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Slash_928);
    }
    {
      data_model.enum_constant_OO_Percent_929 = arboretum_create_named_node("/clang/OO_Percent");
      arboretum_create_edge(data_model.enum_constant_OO_Percent_929, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Percent_929);
    }
    {
      data_model.enum_constant_OO_Caret_930 = arboretum_create_named_node("/clang/OO_Caret");
      arboretum_create_edge(data_model.enum_constant_OO_Caret_930, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Caret_930);
    }
    {
      data_model.enum_constant_OO_Amp_931 = arboretum_create_named_node("/clang/OO_Amp");
      arboretum_create_edge(data_model.enum_constant_OO_Amp_931, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Amp_931);
    }
    {
      data_model.enum_constant_OO_Pipe_932 = arboretum_create_named_node("/clang/OO_Pipe");
      arboretum_create_edge(data_model.enum_constant_OO_Pipe_932, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Pipe_932);
    }
    {
      data_model.enum_constant_OO_Tilde_933 = arboretum_create_named_node("/clang/OO_Tilde");
      arboretum_create_edge(data_model.enum_constant_OO_Tilde_933, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Tilde_933);
    }
    {
      data_model.enum_constant_OO_Exclaim_934 = arboretum_create_named_node("/clang/OO_Exclaim");
      arboretum_create_edge(data_model.enum_constant_OO_Exclaim_934, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Exclaim_934);
    }
    {
      data_model.enum_constant_OO_Equal_935 = arboretum_create_named_node("/clang/OO_Equal");
      arboretum_create_edge(data_model.enum_constant_OO_Equal_935, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Equal_935);
    }
    {
      data_model.enum_constant_OO_Less_936 = arboretum_create_named_node("/clang/OO_Less");
      arboretum_create_edge(data_model.enum_constant_OO_Less_936, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Less_936);
    }
    {
      data_model.enum_constant_OO_Greater_937 = arboretum_create_named_node("/clang/OO_Greater");
      arboretum_create_edge(data_model.enum_constant_OO_Greater_937, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Greater_937);
    }
    {
      data_model.enum_constant_OO_PlusEqual_938 = arboretum_create_named_node("/clang/OO_PlusEqual");
      arboretum_create_edge(data_model.enum_constant_OO_PlusEqual_938, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_PlusEqual_938);
    }
    {
      data_model.enum_constant_OO_MinusEqual_939 = arboretum_create_named_node("/clang/OO_MinusEqual");
      arboretum_create_edge(data_model.enum_constant_OO_MinusEqual_939, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_MinusEqual_939);
    }
    {
      data_model.enum_constant_OO_StarEqual_940 = arboretum_create_named_node("/clang/OO_StarEqual");
      arboretum_create_edge(data_model.enum_constant_OO_StarEqual_940, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_StarEqual_940);
    }
    {
      data_model.enum_constant_OO_SlashEqual_941 = arboretum_create_named_node("/clang/OO_SlashEqual");
      arboretum_create_edge(data_model.enum_constant_OO_SlashEqual_941, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_SlashEqual_941);
    }
    {
      data_model.enum_constant_OO_PercentEqual_942 = arboretum_create_named_node("/clang/OO_PercentEqual");
      arboretum_create_edge(data_model.enum_constant_OO_PercentEqual_942, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_PercentEqual_942);
    }
    {
      data_model.enum_constant_OO_CaretEqual_943 = arboretum_create_named_node("/clang/OO_CaretEqual");
      arboretum_create_edge(data_model.enum_constant_OO_CaretEqual_943, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_CaretEqual_943);
    }
    {
      data_model.enum_constant_OO_AmpEqual_944 = arboretum_create_named_node("/clang/OO_AmpEqual");
      arboretum_create_edge(data_model.enum_constant_OO_AmpEqual_944, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_AmpEqual_944);
    }
    {
      data_model.enum_constant_OO_PipeEqual_945 = arboretum_create_named_node("/clang/OO_PipeEqual");
      arboretum_create_edge(data_model.enum_constant_OO_PipeEqual_945, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_PipeEqual_945);
    }
    {
      data_model.enum_constant_OO_LessLess_946 = arboretum_create_named_node("/clang/OO_LessLess");
      arboretum_create_edge(data_model.enum_constant_OO_LessLess_946, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_LessLess_946);
    }
    {
      data_model.enum_constant_OO_GreaterGreater_947 = arboretum_create_named_node("/clang/OO_GreaterGreater");
      arboretum_create_edge(data_model.enum_constant_OO_GreaterGreater_947, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_GreaterGreater_947);
    }
    {
      data_model.enum_constant_OO_LessLessEqual_948 = arboretum_create_named_node("/clang/OO_LessLessEqual");
      arboretum_create_edge(data_model.enum_constant_OO_LessLessEqual_948, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_LessLessEqual_948);
    }
    {
      data_model.enum_constant_OO_GreaterGreaterEqual_949 = arboretum_create_named_node("/clang/OO_GreaterGreaterEqual");
      arboretum_create_edge(data_model.enum_constant_OO_GreaterGreaterEqual_949, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_GreaterGreaterEqual_949);
    }
    {
      data_model.enum_constant_OO_EqualEqual_950 = arboretum_create_named_node("/clang/OO_EqualEqual");
      arboretum_create_edge(data_model.enum_constant_OO_EqualEqual_950, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_EqualEqual_950);
    }
    {
      data_model.enum_constant_OO_ExclaimEqual_951 = arboretum_create_named_node("/clang/OO_ExclaimEqual");
      arboretum_create_edge(data_model.enum_constant_OO_ExclaimEqual_951, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_ExclaimEqual_951);
    }
    {
      data_model.enum_constant_OO_LessEqual_952 = arboretum_create_named_node("/clang/OO_LessEqual");
      arboretum_create_edge(data_model.enum_constant_OO_LessEqual_952, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_LessEqual_952);
    }
    {
      data_model.enum_constant_OO_GreaterEqual_953 = arboretum_create_named_node("/clang/OO_GreaterEqual");
      arboretum_create_edge(data_model.enum_constant_OO_GreaterEqual_953, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_GreaterEqual_953);
    }
    {
      data_model.enum_constant_OO_Spaceship_954 = arboretum_create_named_node("/clang/OO_Spaceship");
      arboretum_create_edge(data_model.enum_constant_OO_Spaceship_954, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Spaceship_954);
    }
    {
      data_model.enum_constant_OO_AmpAmp_955 = arboretum_create_named_node("/clang/OO_AmpAmp");
      arboretum_create_edge(data_model.enum_constant_OO_AmpAmp_955, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_AmpAmp_955);
    }
    {
      data_model.enum_constant_OO_PipePipe_956 = arboretum_create_named_node("/clang/OO_PipePipe");
      arboretum_create_edge(data_model.enum_constant_OO_PipePipe_956, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_PipePipe_956);
    }
    {
      data_model.enum_constant_OO_PlusPlus_957 = arboretum_create_named_node("/clang/OO_PlusPlus");
      arboretum_create_edge(data_model.enum_constant_OO_PlusPlus_957, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_PlusPlus_957);
    }
    {
      data_model.enum_constant_OO_MinusMinus_958 = arboretum_create_named_node("/clang/OO_MinusMinus");
      arboretum_create_edge(data_model.enum_constant_OO_MinusMinus_958, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_MinusMinus_958);
    }
    {
      data_model.enum_constant_OO_Comma_959 = arboretum_create_named_node("/clang/OO_Comma");
      arboretum_create_edge(data_model.enum_constant_OO_Comma_959, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Comma_959);
    }
    {
      data_model.enum_constant_OO_ArrowStar_960 = arboretum_create_named_node("/clang/OO_ArrowStar");
      arboretum_create_edge(data_model.enum_constant_OO_ArrowStar_960, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_ArrowStar_960);
    }
    {
      data_model.enum_constant_OO_Arrow_961 = arboretum_create_named_node("/clang/OO_Arrow");
      arboretum_create_edge(data_model.enum_constant_OO_Arrow_961, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Arrow_961);
    }
    {
      data_model.enum_constant_OO_Call_962 = arboretum_create_named_node("/clang/OO_Call");
      arboretum_create_edge(data_model.enum_constant_OO_Call_962, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Call_962);
    }
    {
      data_model.enum_constant_OO_Subscript_963 = arboretum_create_named_node("/clang/OO_Subscript");
      arboretum_create_edge(data_model.enum_constant_OO_Subscript_963, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Subscript_963);
    }
    {
      data_model.enum_constant_OO_Conditional_964 = arboretum_create_named_node("/clang/OO_Conditional");
      arboretum_create_edge(data_model.enum_constant_OO_Conditional_964, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Conditional_964);
    }
    {
      data_model.enum_constant_OO_Coawait_965 = arboretum_create_named_node("/clang/OO_Coawait");
      arboretum_create_edge(data_model.enum_constant_OO_Coawait_965, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OO_Coawait_965);
    }
    {
      data_model.enum_constant_NUM_OVERLOADED_OPERATORS_966 = arboretum_create_named_node("/clang/NUM_OVERLOADED_OPERATORS");
      arboretum_create_edge(data_model.enum_constant_NUM_OVERLOADED_OPERATORS_966, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NUM_OVERLOADED_OPERATORS_966);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_PragmaMSCommentKind_967 = arboretum_create_named_node("/clang/PragmaMSCommentKind");
    arboretum_create_edge(data_model.enum_PragmaMSCommentKind_967, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_PCK_Unknown_968 = arboretum_create_named_node("/clang/PCK_Unknown");
      arboretum_create_edge(data_model.enum_constant_PCK_Unknown_968, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PCK_Unknown_968);
    }
    {
      data_model.enum_constant_PCK_Linker_969 = arboretum_create_named_node("/clang/PCK_Linker");
      arboretum_create_edge(data_model.enum_constant_PCK_Linker_969, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PCK_Linker_969);
    }
    {
      data_model.enum_constant_PCK_Lib_970 = arboretum_create_named_node("/clang/PCK_Lib");
      arboretum_create_edge(data_model.enum_constant_PCK_Lib_970, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PCK_Lib_970);
    }
    {
      data_model.enum_constant_PCK_Compiler_971 = arboretum_create_named_node("/clang/PCK_Compiler");
      arboretum_create_edge(data_model.enum_constant_PCK_Compiler_971, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PCK_Compiler_971);
    }
    {
      data_model.enum_constant_PCK_ExeStr_972 = arboretum_create_named_node("/clang/PCK_ExeStr");
      arboretum_create_edge(data_model.enum_constant_PCK_ExeStr_972, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PCK_ExeStr_972);
    }
    {
      data_model.enum_constant_PCK_User_973 = arboretum_create_named_node("/clang/PCK_User");
      arboretum_create_edge(data_model.enum_constant_PCK_User_973, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PCK_User_973);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_PredefinedIdentKind_974 = arboretum_create_named_node("/clang/PredefinedIdentKind");
    arboretum_create_edge(data_model.enum_PredefinedIdentKind_974, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Func_975 = arboretum_create_named_node("/clang/PredefinedIdentKind/Func");
      arboretum_create_edge(data_model.enum_constant_Func_975, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Func_975);
    }
    {
      data_model.enum_constant_Function_976 = arboretum_create_named_node("/clang/PredefinedIdentKind/Function");
      arboretum_create_edge(data_model.enum_constant_Function_976, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Function_976);
    }
    {
      data_model.enum_constant_LFunction_977 = arboretum_create_named_node("/clang/PredefinedIdentKind/LFunction");
      arboretum_create_edge(data_model.enum_constant_LFunction_977, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LFunction_977);
    }
    {
      data_model.enum_constant_FuncDName_978 = arboretum_create_named_node("/clang/PredefinedIdentKind/FuncDName");
      arboretum_create_edge(data_model.enum_constant_FuncDName_978, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FuncDName_978);
    }
    {
      data_model.enum_constant_FuncSig_979 = arboretum_create_named_node("/clang/PredefinedIdentKind/FuncSig");
      arboretum_create_edge(data_model.enum_constant_FuncSig_979, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FuncSig_979);
    }
    {
      data_model.enum_constant_LFuncSig_980 = arboretum_create_named_node("/clang/PredefinedIdentKind/LFuncSig");
      arboretum_create_edge(data_model.enum_constant_LFuncSig_980, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LFuncSig_980);
    }
    {
      data_model.enum_constant_PrettyFunction_981 = arboretum_create_named_node("/clang/PredefinedIdentKind/PrettyFunction");
      arboretum_create_edge(data_model.enum_constant_PrettyFunction_981, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PrettyFunction_981);
    }
    {
      data_model.enum_constant_PrettyFunctionNoVirtual_982 = arboretum_create_named_node("/clang/PredefinedIdentKind/PrettyFunctionNoVirtual");
      arboretum_create_edge(data_model.enum_constant_PrettyFunctionNoVirtual_982, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PrettyFunctionNoVirtual_982);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ObjCLifetime_983 = arboretum_create_named_node("/clang/Qualifiers/ObjCLifetime");
    arboretum_create_edge(data_model.enum_ObjCLifetime_983, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_OCL_None_984 = arboretum_create_named_node("/clang/Qualifiers/OCL_None");
      arboretum_create_edge(data_model.enum_constant_OCL_None_984, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCL_None_984);
    }
    {
      data_model.enum_constant_OCL_ExplicitNone_985 = arboretum_create_named_node("/clang/Qualifiers/OCL_ExplicitNone");
      arboretum_create_edge(data_model.enum_constant_OCL_ExplicitNone_985, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCL_ExplicitNone_985);
    }
    {
      data_model.enum_constant_OCL_Strong_986 = arboretum_create_named_node("/clang/Qualifiers/OCL_Strong");
      arboretum_create_edge(data_model.enum_constant_OCL_Strong_986, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCL_Strong_986);
    }
    {
      data_model.enum_constant_OCL_Weak_987 = arboretum_create_named_node("/clang/Qualifiers/OCL_Weak");
      arboretum_create_edge(data_model.enum_constant_OCL_Weak_987, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCL_Weak_987);
    }
    {
      data_model.enum_constant_OCL_Autoreleasing_988 = arboretum_create_named_node("/clang/Qualifiers/OCL_Autoreleasing");
      arboretum_create_edge(data_model.enum_constant_OCL_Autoreleasing_988, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OCL_Autoreleasing_988);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_RecordArgPassingKind_989 = arboretum_create_named_node("/clang/RecordArgPassingKind");
    arboretum_create_edge(data_model.enum_RecordArgPassingKind_989, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CanPassInRegs_990 = arboretum_create_named_node("/clang/RecordArgPassingKind/CanPassInRegs");
      arboretum_create_edge(data_model.enum_constant_CanPassInRegs_990, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CanPassInRegs_990);
    }
    {
      data_model.enum_constant_CannotPassInRegs_991 = arboretum_create_named_node("/clang/RecordArgPassingKind/CannotPassInRegs");
      arboretum_create_edge(data_model.enum_constant_CannotPassInRegs_991, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CannotPassInRegs_991);
    }
    {
      data_model.enum_constant_CanNeverPassInRegs_992 = arboretum_create_named_node("/clang/RecordArgPassingKind/CanNeverPassInRegs");
      arboretum_create_edge(data_model.enum_constant_CanNeverPassInRegs_992, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CanNeverPassInRegs_992);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_RefQualifierKind_993 = arboretum_create_named_node("/clang/RefQualifierKind");
    arboretum_create_edge(data_model.enum_RefQualifierKind_993, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_RQ_None_994 = arboretum_create_named_node("/clang/RQ_None");
      arboretum_create_edge(data_model.enum_constant_RQ_None_994, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RQ_None_994);
    }
    {
      data_model.enum_constant_RQ_LValue_995 = arboretum_create_named_node("/clang/RQ_LValue");
      arboretum_create_edge(data_model.enum_constant_RQ_LValue_995, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RQ_LValue_995);
    }
    {
      data_model.enum_constant_RQ_RValue_996 = arboretum_create_named_node("/clang/RQ_RValue");
      arboretum_create_edge(data_model.enum_constant_RQ_RValue_996, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RQ_RValue_996);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_SourceLocIdentKind_997 = arboretum_create_named_node("/clang/SourceLocIdentKind");
    arboretum_create_edge(data_model.enum_SourceLocIdentKind_997, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Function_998 = arboretum_create_named_node("/clang/SourceLocIdentKind/Function");
      arboretum_create_edge(data_model.enum_constant_Function_998, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Function_998);
    }
    {
      data_model.enum_constant_FuncSig_999 = arboretum_create_named_node("/clang/SourceLocIdentKind/FuncSig");
      arboretum_create_edge(data_model.enum_constant_FuncSig_999, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FuncSig_999);
    }
    {
      data_model.enum_constant_File_1000 = arboretum_create_named_node("/clang/SourceLocIdentKind/File");
      arboretum_create_edge(data_model.enum_constant_File_1000, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_File_1000);
    }
    {
      data_model.enum_constant_FileName_1001 = arboretum_create_named_node("/clang/SourceLocIdentKind/FileName");
      arboretum_create_edge(data_model.enum_constant_FileName_1001, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FileName_1001);
    }
    {
      data_model.enum_constant_Line_1002 = arboretum_create_named_node("/clang/SourceLocIdentKind/Line");
      arboretum_create_edge(data_model.enum_constant_Line_1002, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Line_1002);
    }
    {
      data_model.enum_constant_Column_1003 = arboretum_create_named_node("/clang/SourceLocIdentKind/Column");
      arboretum_create_edge(data_model.enum_constant_Column_1003, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Column_1003);
    }
    {
      data_model.enum_constant_SourceLocStruct_1004 = arboretum_create_named_node("/clang/SourceLocIdentKind/SourceLocStruct");
      arboretum_create_edge(data_model.enum_constant_SourceLocStruct_1004, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SourceLocStruct_1004);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_StorageClass_1005 = arboretum_create_named_node("/clang/StorageClass");
    arboretum_create_edge(data_model.enum_StorageClass_1005, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_SC_None_1006 = arboretum_create_named_node("/clang/SC_None");
      arboretum_create_edge(data_model.enum_constant_SC_None_1006, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SC_None_1006);
    }
    {
      data_model.enum_constant_SC_Extern_1007 = arboretum_create_named_node("/clang/SC_Extern");
      arboretum_create_edge(data_model.enum_constant_SC_Extern_1007, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SC_Extern_1007);
    }
    {
      data_model.enum_constant_SC_Static_1008 = arboretum_create_named_node("/clang/SC_Static");
      arboretum_create_edge(data_model.enum_constant_SC_Static_1008, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SC_Static_1008);
    }
    {
      data_model.enum_constant_SC_PrivateExtern_1009 = arboretum_create_named_node("/clang/SC_PrivateExtern");
      arboretum_create_edge(data_model.enum_constant_SC_PrivateExtern_1009, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SC_PrivateExtern_1009);
    }
    {
      data_model.enum_constant_SC_Auto_1010 = arboretum_create_named_node("/clang/SC_Auto");
      arboretum_create_edge(data_model.enum_constant_SC_Auto_1010, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SC_Auto_1010);
    }
    {
      data_model.enum_constant_SC_Register_1011 = arboretum_create_named_node("/clang/SC_Register");
      arboretum_create_edge(data_model.enum_constant_SC_Register_1011, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SC_Register_1011);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_StorageDuration_1012 = arboretum_create_named_node("/clang/StorageDuration");
    arboretum_create_edge(data_model.enum_StorageDuration_1012, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_SD_FullExpression_1013 = arboretum_create_named_node("/clang/SD_FullExpression");
      arboretum_create_edge(data_model.enum_constant_SD_FullExpression_1013, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SD_FullExpression_1013);
    }
    {
      data_model.enum_constant_SD_Automatic_1014 = arboretum_create_named_node("/clang/SD_Automatic");
      arboretum_create_edge(data_model.enum_constant_SD_Automatic_1014, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SD_Automatic_1014);
    }
    {
      data_model.enum_constant_SD_Thread_1015 = arboretum_create_named_node("/clang/SD_Thread");
      arboretum_create_edge(data_model.enum_constant_SD_Thread_1015, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SD_Thread_1015);
    }
    {
      data_model.enum_constant_SD_Static_1016 = arboretum_create_named_node("/clang/SD_Static");
      arboretum_create_edge(data_model.enum_constant_SD_Static_1016, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SD_Static_1016);
    }
    {
      data_model.enum_constant_SD_Dynamic_1017 = arboretum_create_named_node("/clang/SD_Dynamic");
      arboretum_create_edge(data_model.enum_constant_SD_Dynamic_1017, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SD_Dynamic_1017);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_StringLiteralKind_1018 = arboretum_create_named_node("/clang/StringLiteralKind");
    arboretum_create_edge(data_model.enum_StringLiteralKind_1018, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Ordinary_1019 = arboretum_create_named_node("/clang/StringLiteralKind/Ordinary");
      arboretum_create_edge(data_model.enum_constant_Ordinary_1019, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ordinary_1019);
    }
    {
      data_model.enum_constant_Wide_1020 = arboretum_create_named_node("/clang/StringLiteralKind/Wide");
      arboretum_create_edge(data_model.enum_constant_Wide_1020, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Wide_1020);
    }
    {
      data_model.enum_constant_UTF8_1021 = arboretum_create_named_node("/clang/StringLiteralKind/UTF8");
      arboretum_create_edge(data_model.enum_constant_UTF8_1021, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTF8_1021);
    }
    {
      data_model.enum_constant_UTF16_1022 = arboretum_create_named_node("/clang/StringLiteralKind/UTF16");
      arboretum_create_edge(data_model.enum_constant_UTF16_1022, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTF16_1022);
    }
    {
      data_model.enum_constant_UTF32_1023 = arboretum_create_named_node("/clang/StringLiteralKind/UTF32");
      arboretum_create_edge(data_model.enum_constant_UTF32_1023, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTF32_1023);
    }
    {
      data_model.enum_constant_Unevaluated_1024 = arboretum_create_named_node("/clang/StringLiteralKind/Unevaluated");
      arboretum_create_edge(data_model.enum_constant_Unevaluated_1024, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unevaluated_1024);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TagTypeKind_1025 = arboretum_create_named_node("/clang/TagTypeKind");
    arboretum_create_edge(data_model.enum_TagTypeKind_1025, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Struct_1026 = arboretum_create_named_node("/clang/TagTypeKind/Struct");
      arboretum_create_edge(data_model.enum_constant_Struct_1026, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Struct_1026);
    }
    {
      data_model.enum_constant_Interface_1027 = arboretum_create_named_node("/clang/TagTypeKind/Interface");
      arboretum_create_edge(data_model.enum_constant_Interface_1027, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Interface_1027);
    }
    {
      data_model.enum_constant_Union_1028 = arboretum_create_named_node("/clang/TagTypeKind/Union");
      arboretum_create_edge(data_model.enum_constant_Union_1028, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Union_1028);
    }
    {
      data_model.enum_constant_Class_1029 = arboretum_create_named_node("/clang/TagTypeKind/Class");
      arboretum_create_edge(data_model.enum_constant_Class_1029, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Class_1029);
    }
    {
      data_model.enum_constant_Enum_1030 = arboretum_create_named_node("/clang/TagTypeKind/Enum");
      arboretum_create_edge(data_model.enum_constant_Enum_1030, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Enum_1030);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TemplateSpecializationKind_1031 = arboretum_create_named_node("/clang/TemplateSpecializationKind");
    arboretum_create_edge(data_model.enum_TemplateSpecializationKind_1031, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_TSK_Undeclared_1032 = arboretum_create_named_node("/clang/TSK_Undeclared");
      arboretum_create_edge(data_model.enum_constant_TSK_Undeclared_1032, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSK_Undeclared_1032);
    }
    {
      data_model.enum_constant_TSK_ImplicitInstantiation_1033 = arboretum_create_named_node("/clang/TSK_ImplicitInstantiation");
      arboretum_create_edge(data_model.enum_constant_TSK_ImplicitInstantiation_1033, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSK_ImplicitInstantiation_1033);
    }
    {
      data_model.enum_constant_TSK_ExplicitSpecialization_1034 = arboretum_create_named_node("/clang/TSK_ExplicitSpecialization");
      arboretum_create_edge(data_model.enum_constant_TSK_ExplicitSpecialization_1034, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSK_ExplicitSpecialization_1034);
    }
    {
      data_model.enum_constant_TSK_ExplicitInstantiationDeclaration_1035 = arboretum_create_named_node("/clang/TSK_ExplicitInstantiationDeclaration");
      arboretum_create_edge(data_model.enum_constant_TSK_ExplicitInstantiationDeclaration_1035, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSK_ExplicitInstantiationDeclaration_1035);
    }
    {
      data_model.enum_constant_TSK_ExplicitInstantiationDefinition_1036 = arboretum_create_named_node("/clang/TSK_ExplicitInstantiationDefinition");
      arboretum_create_edge(data_model.enum_constant_TSK_ExplicitInstantiationDefinition_1036, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSK_ExplicitInstantiationDefinition_1036);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_ThreadStorageClassSpecifier_1037 = arboretum_create_named_node("/clang/ThreadStorageClassSpecifier");
    arboretum_create_edge(data_model.enum_ThreadStorageClassSpecifier_1037, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_TSCS_unspecified_1038 = arboretum_create_named_node("/clang/TSCS_unspecified");
      arboretum_create_edge(data_model.enum_constant_TSCS_unspecified_1038, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSCS_unspecified_1038);
    }
    {
      data_model.enum_constant_TSCS___thread_1039 = arboretum_create_named_node("/clang/TSCS___thread");
      arboretum_create_edge(data_model.enum_constant_TSCS___thread_1039, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSCS___thread_1039);
    }
    {
      data_model.enum_constant_TSCS_thread_local_1040 = arboretum_create_named_node("/clang/TSCS_thread_local");
      arboretum_create_edge(data_model.enum_constant_TSCS_thread_local_1040, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSCS_thread_local_1040);
    }
    {
      data_model.enum_constant_TSCS__Thread_local_1041 = arboretum_create_named_node("/clang/TSCS__Thread_local");
      arboretum_create_edge(data_model.enum_constant_TSCS__Thread_local_1041, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TSCS__Thread_local_1041);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TypeDependence_1042 = arboretum_create_named_node("/clang/TypeDependenceScope/TypeDependence");
    arboretum_create_edge(data_model.enum_TypeDependence_1042, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_UnexpandedPack_1043 = arboretum_create_named_node("/clang/TypeDependenceScope/UnexpandedPack");
      arboretum_create_edge(data_model.enum_constant_UnexpandedPack_1043, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UnexpandedPack_1043);
    }
    {
      data_model.enum_constant_Instantiation_1044 = arboretum_create_named_node("/clang/TypeDependenceScope/Instantiation");
      arboretum_create_edge(data_model.enum_constant_Instantiation_1044, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Instantiation_1044);
    }
    {
      data_model.enum_constant_Dependent_1045 = arboretum_create_named_node("/clang/TypeDependenceScope/Dependent");
      arboretum_create_edge(data_model.enum_constant_Dependent_1045, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Dependent_1045);
    }
    {
      data_model.enum_constant_VariablyModified_1046 = arboretum_create_named_node("/clang/TypeDependenceScope/VariablyModified");
      arboretum_create_edge(data_model.enum_constant_VariablyModified_1046, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VariablyModified_1046);
    }
    {
      data_model.enum_constant_Error_1047 = arboretum_create_named_node("/clang/TypeDependenceScope/Error");
      arboretum_create_edge(data_model.enum_constant_Error_1047, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Error_1047);
    }
    {
      data_model.enum_constant_None_1048 = arboretum_create_named_node("/clang/TypeDependenceScope/None");
      arboretum_create_edge(data_model.enum_constant_None_1048, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_None_1048);
    }
    {
      data_model.enum_constant_All_1049 = arboretum_create_named_node("/clang/TypeDependenceScope/All");
      arboretum_create_edge(data_model.enum_constant_All_1049, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_All_1049);
    }
    {
      data_model.enum_constant_DependentInstantiation_1050 = arboretum_create_named_node("/clang/TypeDependenceScope/DependentInstantiation");
      arboretum_create_edge(data_model.enum_constant_DependentInstantiation_1050, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DependentInstantiation_1050);
    }
    {
      data_model.enum_constant_LLVM_BITMASK_LARGEST_ENUMERATOR_1051 = arboretum_create_named_node("/clang/TypeDependenceScope/LLVM_BITMASK_LARGEST_ENUMERATOR");
      arboretum_create_edge(data_model.enum_constant_LLVM_BITMASK_LARGEST_ENUMERATOR_1051, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LLVM_BITMASK_LARGEST_ENUMERATOR_1051);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TypeOfKind_1052 = arboretum_create_named_node("/clang/TypeOfKind");
    arboretum_create_edge(data_model.enum_TypeOfKind_1052, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Qualified_1053 = arboretum_create_named_node("/clang/TypeOfKind/Qualified");
      arboretum_create_edge(data_model.enum_constant_Qualified_1053, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Qualified_1053);
    }
    {
      data_model.enum_constant_Unqualified_1054 = arboretum_create_named_node("/clang/TypeOfKind/Unqualified");
      arboretum_create_edge(data_model.enum_constant_Unqualified_1054, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unqualified_1054);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TypeTrait_1055 = arboretum_create_named_node("/clang/TypeTrait");
    arboretum_create_edge(data_model.enum_TypeTrait_1055, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_UTT_IsInterfaceClass_1056 = arboretum_create_named_node("/clang/UTT_IsInterfaceClass");
      arboretum_create_edge(data_model.enum_constant_UTT_IsInterfaceClass_1056, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsInterfaceClass_1056);
    }
    {
      data_model.enum_constant_UTT_IsSealed_1057 = arboretum_create_named_node("/clang/UTT_IsSealed");
      arboretum_create_edge(data_model.enum_constant_UTT_IsSealed_1057, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsSealed_1057);
    }
    {
      data_model.enum_constant_UTT_IsDestructible_1058 = arboretum_create_named_node("/clang/UTT_IsDestructible");
      arboretum_create_edge(data_model.enum_constant_UTT_IsDestructible_1058, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsDestructible_1058);
    }
    {
      data_model.enum_constant_UTT_IsTriviallyDestructible_1059 = arboretum_create_named_node("/clang/UTT_IsTriviallyDestructible");
      arboretum_create_edge(data_model.enum_constant_UTT_IsTriviallyDestructible_1059, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsTriviallyDestructible_1059);
    }
    {
      data_model.enum_constant_UTT_IsNothrowDestructible_1060 = arboretum_create_named_node("/clang/UTT_IsNothrowDestructible");
      arboretum_create_edge(data_model.enum_constant_UTT_IsNothrowDestructible_1060, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsNothrowDestructible_1060);
    }
    {
      data_model.enum_constant_UTT_HasNothrowMoveAssign_1061 = arboretum_create_named_node("/clang/UTT_HasNothrowMoveAssign");
      arboretum_create_edge(data_model.enum_constant_UTT_HasNothrowMoveAssign_1061, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasNothrowMoveAssign_1061);
    }
    {
      data_model.enum_constant_UTT_HasTrivialMoveAssign_1062 = arboretum_create_named_node("/clang/UTT_HasTrivialMoveAssign");
      arboretum_create_edge(data_model.enum_constant_UTT_HasTrivialMoveAssign_1062, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasTrivialMoveAssign_1062);
    }
    {
      data_model.enum_constant_UTT_HasTrivialMoveConstructor_1063 = arboretum_create_named_node("/clang/UTT_HasTrivialMoveConstructor");
      arboretum_create_edge(data_model.enum_constant_UTT_HasTrivialMoveConstructor_1063, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasTrivialMoveConstructor_1063);
    }
    {
      data_model.enum_constant_UTT_HasNothrowAssign_1064 = arboretum_create_named_node("/clang/UTT_HasNothrowAssign");
      arboretum_create_edge(data_model.enum_constant_UTT_HasNothrowAssign_1064, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasNothrowAssign_1064);
    }
    {
      data_model.enum_constant_UTT_HasNothrowCopy_1065 = arboretum_create_named_node("/clang/UTT_HasNothrowCopy");
      arboretum_create_edge(data_model.enum_constant_UTT_HasNothrowCopy_1065, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasNothrowCopy_1065);
    }
    {
      data_model.enum_constant_UTT_HasNothrowConstructor_1066 = arboretum_create_named_node("/clang/UTT_HasNothrowConstructor");
      arboretum_create_edge(data_model.enum_constant_UTT_HasNothrowConstructor_1066, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasNothrowConstructor_1066);
    }
    {
      data_model.enum_constant_UTT_HasTrivialAssign_1067 = arboretum_create_named_node("/clang/UTT_HasTrivialAssign");
      arboretum_create_edge(data_model.enum_constant_UTT_HasTrivialAssign_1067, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasTrivialAssign_1067);
    }
    {
      data_model.enum_constant_UTT_HasTrivialCopy_1068 = arboretum_create_named_node("/clang/UTT_HasTrivialCopy");
      arboretum_create_edge(data_model.enum_constant_UTT_HasTrivialCopy_1068, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasTrivialCopy_1068);
    }
    {
      data_model.enum_constant_UTT_HasTrivialDefaultConstructor_1069 = arboretum_create_named_node("/clang/UTT_HasTrivialDefaultConstructor");
      arboretum_create_edge(data_model.enum_constant_UTT_HasTrivialDefaultConstructor_1069, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasTrivialDefaultConstructor_1069);
    }
    {
      data_model.enum_constant_UTT_HasTrivialDestructor_1070 = arboretum_create_named_node("/clang/UTT_HasTrivialDestructor");
      arboretum_create_edge(data_model.enum_constant_UTT_HasTrivialDestructor_1070, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasTrivialDestructor_1070);
    }
    {
      data_model.enum_constant_UTT_HasVirtualDestructor_1071 = arboretum_create_named_node("/clang/UTT_HasVirtualDestructor");
      arboretum_create_edge(data_model.enum_constant_UTT_HasVirtualDestructor_1071, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasVirtualDestructor_1071);
    }
    {
      data_model.enum_constant_UTT_IsAbstract_1072 = arboretum_create_named_node("/clang/UTT_IsAbstract");
      arboretum_create_edge(data_model.enum_constant_UTT_IsAbstract_1072, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsAbstract_1072);
    }
    {
      data_model.enum_constant_UTT_IsAggregate_1073 = arboretum_create_named_node("/clang/UTT_IsAggregate");
      arboretum_create_edge(data_model.enum_constant_UTT_IsAggregate_1073, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsAggregate_1073);
    }
    {
      data_model.enum_constant_UTT_IsClass_1074 = arboretum_create_named_node("/clang/UTT_IsClass");
      arboretum_create_edge(data_model.enum_constant_UTT_IsClass_1074, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsClass_1074);
    }
    {
      data_model.enum_constant_UTT_IsEmpty_1075 = arboretum_create_named_node("/clang/UTT_IsEmpty");
      arboretum_create_edge(data_model.enum_constant_UTT_IsEmpty_1075, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsEmpty_1075);
    }
    {
      data_model.enum_constant_UTT_IsEnum_1076 = arboretum_create_named_node("/clang/UTT_IsEnum");
      arboretum_create_edge(data_model.enum_constant_UTT_IsEnum_1076, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsEnum_1076);
    }
    {
      data_model.enum_constant_UTT_IsFinal_1077 = arboretum_create_named_node("/clang/UTT_IsFinal");
      arboretum_create_edge(data_model.enum_constant_UTT_IsFinal_1077, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsFinal_1077);
    }
    {
      data_model.enum_constant_UTT_IsLiteral_1078 = arboretum_create_named_node("/clang/UTT_IsLiteral");
      arboretum_create_edge(data_model.enum_constant_UTT_IsLiteral_1078, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsLiteral_1078);
    }
    {
      data_model.enum_constant_UTT_IsPOD_1079 = arboretum_create_named_node("/clang/UTT_IsPOD");
      arboretum_create_edge(data_model.enum_constant_UTT_IsPOD_1079, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsPOD_1079);
    }
    {
      data_model.enum_constant_UTT_IsPolymorphic_1080 = arboretum_create_named_node("/clang/UTT_IsPolymorphic");
      arboretum_create_edge(data_model.enum_constant_UTT_IsPolymorphic_1080, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsPolymorphic_1080);
    }
    {
      data_model.enum_constant_UTT_IsStandardLayout_1081 = arboretum_create_named_node("/clang/UTT_IsStandardLayout");
      arboretum_create_edge(data_model.enum_constant_UTT_IsStandardLayout_1081, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsStandardLayout_1081);
    }
    {
      data_model.enum_constant_UTT_IsTrivial_1082 = arboretum_create_named_node("/clang/UTT_IsTrivial");
      arboretum_create_edge(data_model.enum_constant_UTT_IsTrivial_1082, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsTrivial_1082);
    }
    {
      data_model.enum_constant_UTT_IsTriviallyCopyable_1083 = arboretum_create_named_node("/clang/UTT_IsTriviallyCopyable");
      arboretum_create_edge(data_model.enum_constant_UTT_IsTriviallyCopyable_1083, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsTriviallyCopyable_1083);
    }
    {
      data_model.enum_constant_UTT_IsUnion_1084 = arboretum_create_named_node("/clang/UTT_IsUnion");
      arboretum_create_edge(data_model.enum_constant_UTT_IsUnion_1084, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsUnion_1084);
    }
    {
      data_model.enum_constant_UTT_HasUniqueObjectRepresentations_1085 = arboretum_create_named_node("/clang/UTT_HasUniqueObjectRepresentations");
      arboretum_create_edge(data_model.enum_constant_UTT_HasUniqueObjectRepresentations_1085, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_HasUniqueObjectRepresentations_1085);
    }
    {
      data_model.enum_constant_UTT_IsTriviallyRelocatable_1086 = arboretum_create_named_node("/clang/UTT_IsTriviallyRelocatable");
      arboretum_create_edge(data_model.enum_constant_UTT_IsTriviallyRelocatable_1086, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsTriviallyRelocatable_1086);
    }
    {
      data_model.enum_constant_UTT_IsTriviallyEqualityComparable_1087 = arboretum_create_named_node("/clang/UTT_IsTriviallyEqualityComparable");
      arboretum_create_edge(data_model.enum_constant_UTT_IsTriviallyEqualityComparable_1087, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsTriviallyEqualityComparable_1087);
    }
    {
      data_model.enum_constant_UTT_IsBoundedArray_1088 = arboretum_create_named_node("/clang/UTT_IsBoundedArray");
      arboretum_create_edge(data_model.enum_constant_UTT_IsBoundedArray_1088, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsBoundedArray_1088);
    }
    {
      data_model.enum_constant_UTT_IsUnboundedArray_1089 = arboretum_create_named_node("/clang/UTT_IsUnboundedArray");
      arboretum_create_edge(data_model.enum_constant_UTT_IsUnboundedArray_1089, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsUnboundedArray_1089);
    }
    {
      data_model.enum_constant_UTT_IsNullPointer_1090 = arboretum_create_named_node("/clang/UTT_IsNullPointer");
      arboretum_create_edge(data_model.enum_constant_UTT_IsNullPointer_1090, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsNullPointer_1090);
    }
    {
      data_model.enum_constant_UTT_IsScopedEnum_1091 = arboretum_create_named_node("/clang/UTT_IsScopedEnum");
      arboretum_create_edge(data_model.enum_constant_UTT_IsScopedEnum_1091, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsScopedEnum_1091);
    }
    {
      data_model.enum_constant_UTT_IsReferenceable_1092 = arboretum_create_named_node("/clang/UTT_IsReferenceable");
      arboretum_create_edge(data_model.enum_constant_UTT_IsReferenceable_1092, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsReferenceable_1092);
    }
    {
      data_model.enum_constant_UTT_CanPassInRegs_1093 = arboretum_create_named_node("/clang/UTT_CanPassInRegs");
      arboretum_create_edge(data_model.enum_constant_UTT_CanPassInRegs_1093, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_CanPassInRegs_1093);
    }
    {
      data_model.enum_constant_UTT_IsArithmetic_1094 = arboretum_create_named_node("/clang/UTT_IsArithmetic");
      arboretum_create_edge(data_model.enum_constant_UTT_IsArithmetic_1094, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsArithmetic_1094);
    }
    {
      data_model.enum_constant_UTT_IsFloatingPoint_1095 = arboretum_create_named_node("/clang/UTT_IsFloatingPoint");
      arboretum_create_edge(data_model.enum_constant_UTT_IsFloatingPoint_1095, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsFloatingPoint_1095);
    }
    {
      data_model.enum_constant_UTT_IsIntegral_1096 = arboretum_create_named_node("/clang/UTT_IsIntegral");
      arboretum_create_edge(data_model.enum_constant_UTT_IsIntegral_1096, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsIntegral_1096);
    }
    {
      data_model.enum_constant_UTT_IsCompleteType_1097 = arboretum_create_named_node("/clang/UTT_IsCompleteType");
      arboretum_create_edge(data_model.enum_constant_UTT_IsCompleteType_1097, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsCompleteType_1097);
    }
    {
      data_model.enum_constant_UTT_IsVoid_1098 = arboretum_create_named_node("/clang/UTT_IsVoid");
      arboretum_create_edge(data_model.enum_constant_UTT_IsVoid_1098, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsVoid_1098);
    }
    {
      data_model.enum_constant_UTT_IsArray_1099 = arboretum_create_named_node("/clang/UTT_IsArray");
      arboretum_create_edge(data_model.enum_constant_UTT_IsArray_1099, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsArray_1099);
    }
    {
      data_model.enum_constant_UTT_IsFunction_1100 = arboretum_create_named_node("/clang/UTT_IsFunction");
      arboretum_create_edge(data_model.enum_constant_UTT_IsFunction_1100, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsFunction_1100);
    }
    {
      data_model.enum_constant_UTT_IsReference_1101 = arboretum_create_named_node("/clang/UTT_IsReference");
      arboretum_create_edge(data_model.enum_constant_UTT_IsReference_1101, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsReference_1101);
    }
    {
      data_model.enum_constant_UTT_IsLvalueReference_1102 = arboretum_create_named_node("/clang/UTT_IsLvalueReference");
      arboretum_create_edge(data_model.enum_constant_UTT_IsLvalueReference_1102, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsLvalueReference_1102);
    }
    {
      data_model.enum_constant_UTT_IsRvalueReference_1103 = arboretum_create_named_node("/clang/UTT_IsRvalueReference");
      arboretum_create_edge(data_model.enum_constant_UTT_IsRvalueReference_1103, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsRvalueReference_1103);
    }
    {
      data_model.enum_constant_UTT_IsFundamental_1104 = arboretum_create_named_node("/clang/UTT_IsFundamental");
      arboretum_create_edge(data_model.enum_constant_UTT_IsFundamental_1104, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsFundamental_1104);
    }
    {
      data_model.enum_constant_UTT_IsObject_1105 = arboretum_create_named_node("/clang/UTT_IsObject");
      arboretum_create_edge(data_model.enum_constant_UTT_IsObject_1105, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsObject_1105);
    }
    {
      data_model.enum_constant_UTT_IsScalar_1106 = arboretum_create_named_node("/clang/UTT_IsScalar");
      arboretum_create_edge(data_model.enum_constant_UTT_IsScalar_1106, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsScalar_1106);
    }
    {
      data_model.enum_constant_UTT_IsCompound_1107 = arboretum_create_named_node("/clang/UTT_IsCompound");
      arboretum_create_edge(data_model.enum_constant_UTT_IsCompound_1107, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsCompound_1107);
    }
    {
      data_model.enum_constant_UTT_IsPointer_1108 = arboretum_create_named_node("/clang/UTT_IsPointer");
      arboretum_create_edge(data_model.enum_constant_UTT_IsPointer_1108, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsPointer_1108);
    }
    {
      data_model.enum_constant_UTT_IsMemberObjectPointer_1109 = arboretum_create_named_node("/clang/UTT_IsMemberObjectPointer");
      arboretum_create_edge(data_model.enum_constant_UTT_IsMemberObjectPointer_1109, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsMemberObjectPointer_1109);
    }
    {
      data_model.enum_constant_UTT_IsMemberFunctionPointer_1110 = arboretum_create_named_node("/clang/UTT_IsMemberFunctionPointer");
      arboretum_create_edge(data_model.enum_constant_UTT_IsMemberFunctionPointer_1110, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsMemberFunctionPointer_1110);
    }
    {
      data_model.enum_constant_UTT_IsMemberPointer_1111 = arboretum_create_named_node("/clang/UTT_IsMemberPointer");
      arboretum_create_edge(data_model.enum_constant_UTT_IsMemberPointer_1111, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsMemberPointer_1111);
    }
    {
      data_model.enum_constant_UTT_IsConst_1112 = arboretum_create_named_node("/clang/UTT_IsConst");
      arboretum_create_edge(data_model.enum_constant_UTT_IsConst_1112, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsConst_1112);
    }
    {
      data_model.enum_constant_UTT_IsVolatile_1113 = arboretum_create_named_node("/clang/UTT_IsVolatile");
      arboretum_create_edge(data_model.enum_constant_UTT_IsVolatile_1113, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsVolatile_1113);
    }
    {
      data_model.enum_constant_UTT_IsSigned_1114 = arboretum_create_named_node("/clang/UTT_IsSigned");
      arboretum_create_edge(data_model.enum_constant_UTT_IsSigned_1114, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsSigned_1114);
    }
    {
      data_model.enum_constant_UTT_IsUnsigned_1115 = arboretum_create_named_node("/clang/UTT_IsUnsigned");
      arboretum_create_edge(data_model.enum_constant_UTT_IsUnsigned_1115, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_IsUnsigned_1115);
    }
    {
      data_model.enum_constant_UTT_Last_1116 = arboretum_create_named_node("/clang/UTT_Last");
      arboretum_create_edge(data_model.enum_constant_UTT_Last_1116, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UTT_Last_1116);
    }
    {
      data_model.enum_constant_BTT_TypeCompatible_1117 = arboretum_create_named_node("/clang/BTT_TypeCompatible");
      arboretum_create_edge(data_model.enum_constant_BTT_TypeCompatible_1117, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_TypeCompatible_1117);
    }
    {
      data_model.enum_constant_BTT_IsNothrowAssignable_1118 = arboretum_create_named_node("/clang/BTT_IsNothrowAssignable");
      arboretum_create_edge(data_model.enum_constant_BTT_IsNothrowAssignable_1118, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsNothrowAssignable_1118);
    }
    {
      data_model.enum_constant_BTT_IsAssignable_1119 = arboretum_create_named_node("/clang/BTT_IsAssignable");
      arboretum_create_edge(data_model.enum_constant_BTT_IsAssignable_1119, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsAssignable_1119);
    }
    {
      data_model.enum_constant_BTT_IsBaseOf_1120 = arboretum_create_named_node("/clang/BTT_IsBaseOf");
      arboretum_create_edge(data_model.enum_constant_BTT_IsBaseOf_1120, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsBaseOf_1120);
    }
    {
      data_model.enum_constant_BTT_IsConvertibleTo_1121 = arboretum_create_named_node("/clang/BTT_IsConvertibleTo");
      arboretum_create_edge(data_model.enum_constant_BTT_IsConvertibleTo_1121, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsConvertibleTo_1121);
    }
    {
      data_model.enum_constant_BTT_IsTriviallyAssignable_1122 = arboretum_create_named_node("/clang/BTT_IsTriviallyAssignable");
      arboretum_create_edge(data_model.enum_constant_BTT_IsTriviallyAssignable_1122, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsTriviallyAssignable_1122);
    }
    {
      data_model.enum_constant_BTT_ReferenceBindsToTemporary_1123 = arboretum_create_named_node("/clang/BTT_ReferenceBindsToTemporary");
      arboretum_create_edge(data_model.enum_constant_BTT_ReferenceBindsToTemporary_1123, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_ReferenceBindsToTemporary_1123);
    }
    {
      data_model.enum_constant_BTT_ReferenceConstructsFromTemporary_1124 = arboretum_create_named_node("/clang/BTT_ReferenceConstructsFromTemporary");
      arboretum_create_edge(data_model.enum_constant_BTT_ReferenceConstructsFromTemporary_1124, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_ReferenceConstructsFromTemporary_1124);
    }
    {
      data_model.enum_constant_BTT_IsSame_1125 = arboretum_create_named_node("/clang/BTT_IsSame");
      arboretum_create_edge(data_model.enum_constant_BTT_IsSame_1125, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsSame_1125);
    }
    {
      data_model.enum_constant_BTT_IsConvertible_1126 = arboretum_create_named_node("/clang/BTT_IsConvertible");
      arboretum_create_edge(data_model.enum_constant_BTT_IsConvertible_1126, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_IsConvertible_1126);
    }
    {
      data_model.enum_constant_BTT_Last_1127 = arboretum_create_named_node("/clang/BTT_Last");
      arboretum_create_edge(data_model.enum_constant_BTT_Last_1127, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTT_Last_1127);
    }
    {
      data_model.enum_constant_TT_IsConstructible_1128 = arboretum_create_named_node("/clang/TT_IsConstructible");
      arboretum_create_edge(data_model.enum_constant_TT_IsConstructible_1128, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TT_IsConstructible_1128);
    }
    {
      data_model.enum_constant_TT_IsNothrowConstructible_1129 = arboretum_create_named_node("/clang/TT_IsNothrowConstructible");
      arboretum_create_edge(data_model.enum_constant_TT_IsNothrowConstructible_1129, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TT_IsNothrowConstructible_1129);
    }
    {
      data_model.enum_constant_TT_IsTriviallyConstructible_1130 = arboretum_create_named_node("/clang/TT_IsTriviallyConstructible");
      arboretum_create_edge(data_model.enum_constant_TT_IsTriviallyConstructible_1130, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TT_IsTriviallyConstructible_1130);
    }
    {
      data_model.enum_constant_TT_Last_1131 = arboretum_create_named_node("/clang/TT_Last");
      arboretum_create_edge(data_model.enum_constant_TT_Last_1131, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TT_Last_1131);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_UnaryExprOrTypeTrait_1132 = arboretum_create_named_node("/clang/UnaryExprOrTypeTrait");
    arboretum_create_edge(data_model.enum_UnaryExprOrTypeTrait_1132, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_UETT_SizeOf_1133 = arboretum_create_named_node("/clang/UETT_SizeOf");
      arboretum_create_edge(data_model.enum_constant_UETT_SizeOf_1133, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_SizeOf_1133);
    }
    {
      data_model.enum_constant_UETT_DataSizeOf_1134 = arboretum_create_named_node("/clang/UETT_DataSizeOf");
      arboretum_create_edge(data_model.enum_constant_UETT_DataSizeOf_1134, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_DataSizeOf_1134);
    }
    {
      data_model.enum_constant_UETT_AlignOf_1135 = arboretum_create_named_node("/clang/UETT_AlignOf");
      arboretum_create_edge(data_model.enum_constant_UETT_AlignOf_1135, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_AlignOf_1135);
    }
    {
      data_model.enum_constant_UETT_PreferredAlignOf_1136 = arboretum_create_named_node("/clang/UETT_PreferredAlignOf");
      arboretum_create_edge(data_model.enum_constant_UETT_PreferredAlignOf_1136, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_PreferredAlignOf_1136);
    }
    {
      data_model.enum_constant_UETT_VecStep_1137 = arboretum_create_named_node("/clang/UETT_VecStep");
      arboretum_create_edge(data_model.enum_constant_UETT_VecStep_1137, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_VecStep_1137);
    }
    {
      data_model.enum_constant_UETT_OpenMPRequiredSimdAlign_1138 = arboretum_create_named_node("/clang/UETT_OpenMPRequiredSimdAlign");
      arboretum_create_edge(data_model.enum_constant_UETT_OpenMPRequiredSimdAlign_1138, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_OpenMPRequiredSimdAlign_1138);
    }
    {
      data_model.enum_constant_UETT_VectorElements_1139 = arboretum_create_named_node("/clang/UETT_VectorElements");
      arboretum_create_edge(data_model.enum_constant_UETT_VectorElements_1139, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_VectorElements_1139);
    }
    {
      data_model.enum_constant_UETT_Last_1140 = arboretum_create_named_node("/clang/UETT_Last");
      arboretum_create_edge(data_model.enum_constant_UETT_Last_1140, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UETT_Last_1140);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_UnaryOperatorKind_1141 = arboretum_create_named_node("/clang/UnaryOperatorKind");
    arboretum_create_edge(data_model.enum_UnaryOperatorKind_1141, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_UO_PostInc_1142 = arboretum_create_named_node("/clang/UO_PostInc");
      arboretum_create_edge(data_model.enum_constant_UO_PostInc_1142, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_PostInc_1142);
    }
    {
      data_model.enum_constant_UO_PostDec_1143 = arboretum_create_named_node("/clang/UO_PostDec");
      arboretum_create_edge(data_model.enum_constant_UO_PostDec_1143, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_PostDec_1143);
    }
    {
      data_model.enum_constant_UO_PreInc_1144 = arboretum_create_named_node("/clang/UO_PreInc");
      arboretum_create_edge(data_model.enum_constant_UO_PreInc_1144, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_PreInc_1144);
    }
    {
      data_model.enum_constant_UO_PreDec_1145 = arboretum_create_named_node("/clang/UO_PreDec");
      arboretum_create_edge(data_model.enum_constant_UO_PreDec_1145, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_PreDec_1145);
    }
    {
      data_model.enum_constant_UO_AddrOf_1146 = arboretum_create_named_node("/clang/UO_AddrOf");
      arboretum_create_edge(data_model.enum_constant_UO_AddrOf_1146, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_AddrOf_1146);
    }
    {
      data_model.enum_constant_UO_Deref_1147 = arboretum_create_named_node("/clang/UO_Deref");
      arboretum_create_edge(data_model.enum_constant_UO_Deref_1147, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Deref_1147);
    }
    {
      data_model.enum_constant_UO_Plus_1148 = arboretum_create_named_node("/clang/UO_Plus");
      arboretum_create_edge(data_model.enum_constant_UO_Plus_1148, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Plus_1148);
    }
    {
      data_model.enum_constant_UO_Minus_1149 = arboretum_create_named_node("/clang/UO_Minus");
      arboretum_create_edge(data_model.enum_constant_UO_Minus_1149, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Minus_1149);
    }
    {
      data_model.enum_constant_UO_Not_1150 = arboretum_create_named_node("/clang/UO_Not");
      arboretum_create_edge(data_model.enum_constant_UO_Not_1150, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Not_1150);
    }
    {
      data_model.enum_constant_UO_LNot_1151 = arboretum_create_named_node("/clang/UO_LNot");
      arboretum_create_edge(data_model.enum_constant_UO_LNot_1151, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_LNot_1151);
    }
    {
      data_model.enum_constant_UO_Real_1152 = arboretum_create_named_node("/clang/UO_Real");
      arboretum_create_edge(data_model.enum_constant_UO_Real_1152, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Real_1152);
    }
    {
      data_model.enum_constant_UO_Imag_1153 = arboretum_create_named_node("/clang/UO_Imag");
      arboretum_create_edge(data_model.enum_constant_UO_Imag_1153, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Imag_1153);
    }
    {
      data_model.enum_constant_UO_Extension_1154 = arboretum_create_named_node("/clang/UO_Extension");
      arboretum_create_edge(data_model.enum_constant_UO_Extension_1154, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Extension_1154);
    }
    {
      data_model.enum_constant_UO_Coawait_1155 = arboretum_create_named_node("/clang/UO_Coawait");
      arboretum_create_edge(data_model.enum_constant_UO_Coawait_1155, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UO_Coawait_1155);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_UTTKind_1156 = arboretum_create_named_node("/clang/UnaryTransformType/UTTKind");
    arboretum_create_edge(data_model.enum_UTTKind_1156, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_AddLvalueReference_1157 = arboretum_create_named_node("/clang/UnaryTransformType/AddLvalueReference");
      arboretum_create_edge(data_model.enum_constant_AddLvalueReference_1157, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AddLvalueReference_1157);
    }
    {
      data_model.enum_constant_AddPointer_1158 = arboretum_create_named_node("/clang/UnaryTransformType/AddPointer");
      arboretum_create_edge(data_model.enum_constant_AddPointer_1158, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AddPointer_1158);
    }
    {
      data_model.enum_constant_AddRvalueReference_1159 = arboretum_create_named_node("/clang/UnaryTransformType/AddRvalueReference");
      arboretum_create_edge(data_model.enum_constant_AddRvalueReference_1159, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AddRvalueReference_1159);
    }
    {
      data_model.enum_constant_Decay_1160 = arboretum_create_named_node("/clang/UnaryTransformType/Decay");
      arboretum_create_edge(data_model.enum_constant_Decay_1160, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Decay_1160);
    }
    {
      data_model.enum_constant_MakeSigned_1161 = arboretum_create_named_node("/clang/UnaryTransformType/MakeSigned");
      arboretum_create_edge(data_model.enum_constant_MakeSigned_1161, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MakeSigned_1161);
    }
    {
      data_model.enum_constant_MakeUnsigned_1162 = arboretum_create_named_node("/clang/UnaryTransformType/MakeUnsigned");
      arboretum_create_edge(data_model.enum_constant_MakeUnsigned_1162, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MakeUnsigned_1162);
    }
    {
      data_model.enum_constant_RemoveAllExtents_1163 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveAllExtents");
      arboretum_create_edge(data_model.enum_constant_RemoveAllExtents_1163, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveAllExtents_1163);
    }
    {
      data_model.enum_constant_RemoveConst_1164 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveConst");
      arboretum_create_edge(data_model.enum_constant_RemoveConst_1164, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveConst_1164);
    }
    {
      data_model.enum_constant_RemoveCV_1165 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveCV");
      arboretum_create_edge(data_model.enum_constant_RemoveCV_1165, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveCV_1165);
    }
    {
      data_model.enum_constant_RemoveCVRef_1166 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveCVRef");
      arboretum_create_edge(data_model.enum_constant_RemoveCVRef_1166, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveCVRef_1166);
    }
    {
      data_model.enum_constant_RemoveExtent_1167 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveExtent");
      arboretum_create_edge(data_model.enum_constant_RemoveExtent_1167, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveExtent_1167);
    }
    {
      data_model.enum_constant_RemovePointer_1168 = arboretum_create_named_node("/clang/UnaryTransformType/RemovePointer");
      arboretum_create_edge(data_model.enum_constant_RemovePointer_1168, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemovePointer_1168);
    }
    {
      data_model.enum_constant_RemoveReference_1169 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveReference");
      arboretum_create_edge(data_model.enum_constant_RemoveReference_1169, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveReference_1169);
    }
    {
      data_model.enum_constant_RemoveRestrict_1170 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveRestrict");
      arboretum_create_edge(data_model.enum_constant_RemoveRestrict_1170, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveRestrict_1170);
    }
    {
      data_model.enum_constant_RemoveVolatile_1171 = arboretum_create_named_node("/clang/UnaryTransformType/RemoveVolatile");
      arboretum_create_edge(data_model.enum_constant_RemoveVolatile_1171, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RemoveVolatile_1171);
    }
    {
      data_model.enum_constant_EnumUnderlyingType_1172 = arboretum_create_named_node("/clang/UnaryTransformType/EnumUnderlyingType");
      arboretum_create_edge(data_model.enum_constant_EnumUnderlyingType_1172, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EnumUnderlyingType_1172);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_LiteralOperatorKind_1173 = arboretum_create_named_node("/clang/UserDefinedLiteral/LiteralOperatorKind");
    arboretum_create_edge(data_model.enum_LiteralOperatorKind_1173, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_LOK_Raw_1174 = arboretum_create_named_node("/clang/UserDefinedLiteral/LOK_Raw");
      arboretum_create_edge(data_model.enum_constant_LOK_Raw_1174, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LOK_Raw_1174);
    }
    {
      data_model.enum_constant_LOK_Template_1175 = arboretum_create_named_node("/clang/UserDefinedLiteral/LOK_Template");
      arboretum_create_edge(data_model.enum_constant_LOK_Template_1175, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LOK_Template_1175);
    }
    {
      data_model.enum_constant_LOK_Integer_1176 = arboretum_create_named_node("/clang/UserDefinedLiteral/LOK_Integer");
      arboretum_create_edge(data_model.enum_constant_LOK_Integer_1176, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LOK_Integer_1176);
    }
    {
      data_model.enum_constant_LOK_Floating_1177 = arboretum_create_named_node("/clang/UserDefinedLiteral/LOK_Floating");
      arboretum_create_edge(data_model.enum_constant_LOK_Floating_1177, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LOK_Floating_1177);
    }
    {
      data_model.enum_constant_LOK_String_1178 = arboretum_create_named_node("/clang/UserDefinedLiteral/LOK_String");
      arboretum_create_edge(data_model.enum_constant_LOK_String_1178, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LOK_String_1178);
    }
    {
      data_model.enum_constant_LOK_Character_1179 = arboretum_create_named_node("/clang/UserDefinedLiteral/LOK_Character");
      arboretum_create_edge(data_model.enum_constant_LOK_Character_1179, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LOK_Character_1179);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_DefinitionKind_1180 = arboretum_create_named_node("/clang/VarDecl/DefinitionKind");
    arboretum_create_edge(data_model.enum_DefinitionKind_1180, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_DeclarationOnly_1181 = arboretum_create_named_node("/clang/VarDecl/DeclarationOnly");
      arboretum_create_edge(data_model.enum_constant_DeclarationOnly_1181, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DeclarationOnly_1181);
    }
    {
      data_model.enum_constant_TentativeDefinition_1182 = arboretum_create_named_node("/clang/VarDecl/TentativeDefinition");
      arboretum_create_edge(data_model.enum_constant_TentativeDefinition_1182, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TentativeDefinition_1182);
    }
    {
      data_model.enum_constant_Definition_1183 = arboretum_create_named_node("/clang/VarDecl/Definition");
      arboretum_create_edge(data_model.enum_constant_Definition_1183, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Definition_1183);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_InitializationStyle_1184 = arboretum_create_named_node("/clang/VarDecl/InitializationStyle");
    arboretum_create_edge(data_model.enum_InitializationStyle_1184, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_CInit_1185 = arboretum_create_named_node("/clang/VarDecl/CInit");
      arboretum_create_edge(data_model.enum_constant_CInit_1185, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CInit_1185);
    }
    {
      data_model.enum_constant_CallInit_1186 = arboretum_create_named_node("/clang/VarDecl/CallInit");
      arboretum_create_edge(data_model.enum_constant_CallInit_1186, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CallInit_1186);
    }
    {
      data_model.enum_constant_ListInit_1187 = arboretum_create_named_node("/clang/VarDecl/ListInit");
      arboretum_create_edge(data_model.enum_constant_ListInit_1187, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ListInit_1187);
    }
    {
      data_model.enum_constant_ParenListInit_1188 = arboretum_create_named_node("/clang/VarDecl/ParenListInit");
      arboretum_create_edge(data_model.enum_constant_ParenListInit_1188, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ParenListInit_1188);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_TLSKind_1189 = arboretum_create_named_node("/clang/VarDecl/TLSKind");
    arboretum_create_edge(data_model.enum_TLSKind_1189, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_TLS_None_1190 = arboretum_create_named_node("/clang/VarDecl/TLS_None");
      arboretum_create_edge(data_model.enum_constant_TLS_None_1190, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TLS_None_1190);
    }
    {
      data_model.enum_constant_TLS_Static_1191 = arboretum_create_named_node("/clang/VarDecl/TLS_Static");
      arboretum_create_edge(data_model.enum_constant_TLS_Static_1191, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TLS_Static_1191);
    }
    {
      data_model.enum_constant_TLS_Dynamic_1192 = arboretum_create_named_node("/clang/VarDecl/TLS_Dynamic");
      arboretum_create_edge(data_model.enum_constant_TLS_Dynamic_1192, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TLS_Dynamic_1192);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_VectorKind_1193 = arboretum_create_named_node("/clang/VectorKind");
    arboretum_create_edge(data_model.enum_VectorKind_1193, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_Generic_1194 = arboretum_create_named_node("/clang/VectorKind/Generic");
      arboretum_create_edge(data_model.enum_constant_Generic_1194, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Generic_1194);
    }
    {
      data_model.enum_constant_AltiVecVector_1195 = arboretum_create_named_node("/clang/VectorKind/AltiVecVector");
      arboretum_create_edge(data_model.enum_constant_AltiVecVector_1195, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AltiVecVector_1195);
    }
    {
      data_model.enum_constant_AltiVecPixel_1196 = arboretum_create_named_node("/clang/VectorKind/AltiVecPixel");
      arboretum_create_edge(data_model.enum_constant_AltiVecPixel_1196, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AltiVecPixel_1196);
    }
    {
      data_model.enum_constant_AltiVecBool_1197 = arboretum_create_named_node("/clang/VectorKind/AltiVecBool");
      arboretum_create_edge(data_model.enum_constant_AltiVecBool_1197, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AltiVecBool_1197);
    }
    {
      data_model.enum_constant_Neon_1198 = arboretum_create_named_node("/clang/VectorKind/Neon");
      arboretum_create_edge(data_model.enum_constant_Neon_1198, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Neon_1198);
    }
    {
      data_model.enum_constant_NeonPoly_1199 = arboretum_create_named_node("/clang/VectorKind/NeonPoly");
      arboretum_create_edge(data_model.enum_constant_NeonPoly_1199, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NeonPoly_1199);
    }
    {
      data_model.enum_constant_SveFixedLengthData_1200 = arboretum_create_named_node("/clang/VectorKind/SveFixedLengthData");
      arboretum_create_edge(data_model.enum_constant_SveFixedLengthData_1200, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFixedLengthData_1200);
    }
    {
      data_model.enum_constant_SveFixedLengthPredicate_1201 = arboretum_create_named_node("/clang/VectorKind/SveFixedLengthPredicate");
      arboretum_create_edge(data_model.enum_constant_SveFixedLengthPredicate_1201, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SveFixedLengthPredicate_1201);
    }
    {
      data_model.enum_constant_RVVFixedLengthData_1202 = arboretum_create_named_node("/clang/VectorKind/RVVFixedLengthData");
      arboretum_create_edge(data_model.enum_constant_RVVFixedLengthData_1202, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RVVFixedLengthData_1202);
    }
    {
      data_model.enum_constant_RVVFixedLengthMask_1203 = arboretum_create_named_node("/clang/VectorKind/RVVFixedLengthMask");
      arboretum_create_edge(data_model.enum_constant_RVVFixedLengthMask_1203, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RVVFixedLengthMask_1203);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_Visibility_1204 = arboretum_create_named_node("/clang/Visibility");
    arboretum_create_edge(data_model.enum_Visibility_1204, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_HiddenVisibility_1205 = arboretum_create_named_node("/clang/HiddenVisibility");
      arboretum_create_edge(data_model.enum_constant_HiddenVisibility_1205, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HiddenVisibility_1205);
    }
    {
      data_model.enum_constant_ProtectedVisibility_1206 = arboretum_create_named_node("/clang/ProtectedVisibility");
      arboretum_create_edge(data_model.enum_constant_ProtectedVisibility_1206, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ProtectedVisibility_1206);
    }
    {
      data_model.enum_constant_DefaultVisibility_1207 = arboretum_create_named_node("/clang/DefaultVisibility");
      arboretum_create_edge(data_model.enum_constant_DefaultVisibility_1207, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DefaultVisibility_1207);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_Kind_1208 = arboretum_create_named_node("/clang/attr/Kind");
    arboretum_create_edge(data_model.enum_Kind_1208, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_AddressSpace_1209 = arboretum_create_named_node("/clang/attr/AddressSpace");
      arboretum_create_edge(data_model.enum_constant_AddressSpace_1209, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AddressSpace_1209);
    }
    {
      data_model.enum_constant_AnnotateType_1210 = arboretum_create_named_node("/clang/attr/AnnotateType");
      arboretum_create_edge(data_model.enum_constant_AnnotateType_1210, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AnnotateType_1210);
    }
    {
      data_model.enum_constant_ArmIn_1211 = arboretum_create_named_node("/clang/attr/ArmIn");
      arboretum_create_edge(data_model.enum_constant_ArmIn_1211, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmIn_1211);
    }
    {
      data_model.enum_constant_ArmInOut_1212 = arboretum_create_named_node("/clang/attr/ArmInOut");
      arboretum_create_edge(data_model.enum_constant_ArmInOut_1212, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmInOut_1212);
    }
    {
      data_model.enum_constant_ArmMveStrictPolymorphism_1213 = arboretum_create_named_node("/clang/attr/ArmMveStrictPolymorphism");
      arboretum_create_edge(data_model.enum_constant_ArmMveStrictPolymorphism_1213, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmMveStrictPolymorphism_1213);
    }
    {
      data_model.enum_constant_ArmOut_1214 = arboretum_create_named_node("/clang/attr/ArmOut");
      arboretum_create_edge(data_model.enum_constant_ArmOut_1214, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmOut_1214);
    }
    {
      data_model.enum_constant_ArmPreserves_1215 = arboretum_create_named_node("/clang/attr/ArmPreserves");
      arboretum_create_edge(data_model.enum_constant_ArmPreserves_1215, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmPreserves_1215);
    }
    {
      data_model.enum_constant_ArmStreaming_1216 = arboretum_create_named_node("/clang/attr/ArmStreaming");
      arboretum_create_edge(data_model.enum_constant_ArmStreaming_1216, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmStreaming_1216);
    }
    {
      data_model.enum_constant_ArmStreamingCompatible_1217 = arboretum_create_named_node("/clang/attr/ArmStreamingCompatible");
      arboretum_create_edge(data_model.enum_constant_ArmStreamingCompatible_1217, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmStreamingCompatible_1217);
    }
    {
      data_model.enum_constant_BTFTypeTag_1218 = arboretum_create_named_node("/clang/attr/BTFTypeTag");
      arboretum_create_edge(data_model.enum_constant_BTFTypeTag_1218, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTFTypeTag_1218);
    }
    {
      data_model.enum_constant_CmseNSCall_1219 = arboretum_create_named_node("/clang/attr/CmseNSCall");
      arboretum_create_edge(data_model.enum_constant_CmseNSCall_1219, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CmseNSCall_1219);
    }
    {
      data_model.enum_constant_HLSLGroupSharedAddressSpace_1220 = arboretum_create_named_node("/clang/attr/HLSLGroupSharedAddressSpace");
      arboretum_create_edge(data_model.enum_constant_HLSLGroupSharedAddressSpace_1220, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLGroupSharedAddressSpace_1220);
    }
    {
      data_model.enum_constant_HLSLParamModifier_1221 = arboretum_create_named_node("/clang/attr/HLSLParamModifier");
      arboretum_create_edge(data_model.enum_constant_HLSLParamModifier_1221, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLParamModifier_1221);
    }
    {
      data_model.enum_constant_NoDeref_1222 = arboretum_create_named_node("/clang/attr/NoDeref");
      arboretum_create_edge(data_model.enum_constant_NoDeref_1222, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoDeref_1222);
    }
    {
      data_model.enum_constant_ObjCGC_1223 = arboretum_create_named_node("/clang/attr/ObjCGC");
      arboretum_create_edge(data_model.enum_constant_ObjCGC_1223, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCGC_1223);
    }
    {
      data_model.enum_constant_ObjCInertUnsafeUnretained_1224 = arboretum_create_named_node("/clang/attr/ObjCInertUnsafeUnretained");
      arboretum_create_edge(data_model.enum_constant_ObjCInertUnsafeUnretained_1224, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCInertUnsafeUnretained_1224);
    }
    {
      data_model.enum_constant_ObjCKindOf_1225 = arboretum_create_named_node("/clang/attr/ObjCKindOf");
      arboretum_create_edge(data_model.enum_constant_ObjCKindOf_1225, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCKindOf_1225);
    }
    {
      data_model.enum_constant_OpenCLConstantAddressSpace_1226 = arboretum_create_named_node("/clang/attr/OpenCLConstantAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLConstantAddressSpace_1226, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLConstantAddressSpace_1226);
    }
    {
      data_model.enum_constant_OpenCLGenericAddressSpace_1227 = arboretum_create_named_node("/clang/attr/OpenCLGenericAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLGenericAddressSpace_1227, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLGenericAddressSpace_1227);
    }
    {
      data_model.enum_constant_OpenCLGlobalAddressSpace_1228 = arboretum_create_named_node("/clang/attr/OpenCLGlobalAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLGlobalAddressSpace_1228, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLGlobalAddressSpace_1228);
    }
    {
      data_model.enum_constant_OpenCLGlobalDeviceAddressSpace_1229 = arboretum_create_named_node("/clang/attr/OpenCLGlobalDeviceAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLGlobalDeviceAddressSpace_1229, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLGlobalDeviceAddressSpace_1229);
    }
    {
      data_model.enum_constant_OpenCLGlobalHostAddressSpace_1230 = arboretum_create_named_node("/clang/attr/OpenCLGlobalHostAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLGlobalHostAddressSpace_1230, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLGlobalHostAddressSpace_1230);
    }
    {
      data_model.enum_constant_OpenCLLocalAddressSpace_1231 = arboretum_create_named_node("/clang/attr/OpenCLLocalAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLLocalAddressSpace_1231, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLLocalAddressSpace_1231);
    }
    {
      data_model.enum_constant_OpenCLPrivateAddressSpace_1232 = arboretum_create_named_node("/clang/attr/OpenCLPrivateAddressSpace");
      arboretum_create_edge(data_model.enum_constant_OpenCLPrivateAddressSpace_1232, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLPrivateAddressSpace_1232);
    }
    {
      data_model.enum_constant_Ptr32_1233 = arboretum_create_named_node("/clang/attr/Ptr32");
      arboretum_create_edge(data_model.enum_constant_Ptr32_1233, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ptr32_1233);
    }
    {
      data_model.enum_constant_Ptr64_1234 = arboretum_create_named_node("/clang/attr/Ptr64");
      arboretum_create_edge(data_model.enum_constant_Ptr64_1234, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ptr64_1234);
    }
    {
      data_model.enum_constant_SPtr_1235 = arboretum_create_named_node("/clang/attr/SPtr");
      arboretum_create_edge(data_model.enum_constant_SPtr_1235, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SPtr_1235);
    }
    {
      data_model.enum_constant_TypeNonNull_1236 = arboretum_create_named_node("/clang/attr/TypeNonNull");
      arboretum_create_edge(data_model.enum_constant_TypeNonNull_1236, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeNonNull_1236);
    }
    {
      data_model.enum_constant_TypeNullUnspecified_1237 = arboretum_create_named_node("/clang/attr/TypeNullUnspecified");
      arboretum_create_edge(data_model.enum_constant_TypeNullUnspecified_1237, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeNullUnspecified_1237);
    }
    {
      data_model.enum_constant_TypeNullable_1238 = arboretum_create_named_node("/clang/attr/TypeNullable");
      arboretum_create_edge(data_model.enum_constant_TypeNullable_1238, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeNullable_1238);
    }
    {
      data_model.enum_constant_TypeNullableResult_1239 = arboretum_create_named_node("/clang/attr/TypeNullableResult");
      arboretum_create_edge(data_model.enum_constant_TypeNullableResult_1239, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeNullableResult_1239);
    }
    {
      data_model.enum_constant_UPtr_1240 = arboretum_create_named_node("/clang/attr/UPtr");
      arboretum_create_edge(data_model.enum_constant_UPtr_1240, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UPtr_1240);
    }
    {
      data_model.enum_constant_WebAssemblyFuncref_1241 = arboretum_create_named_node("/clang/attr/WebAssemblyFuncref");
      arboretum_create_edge(data_model.enum_constant_WebAssemblyFuncref_1241, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WebAssemblyFuncref_1241);
    }
    {
      data_model.enum_constant_CodeAlign_1242 = arboretum_create_named_node("/clang/attr/CodeAlign");
      arboretum_create_edge(data_model.enum_constant_CodeAlign_1242, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CodeAlign_1242);
    }
    {
      data_model.enum_constant_FallThrough_1243 = arboretum_create_named_node("/clang/attr/FallThrough");
      arboretum_create_edge(data_model.enum_constant_FallThrough_1243, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FallThrough_1243);
    }
    {
      data_model.enum_constant_Likely_1244 = arboretum_create_named_node("/clang/attr/Likely");
      arboretum_create_edge(data_model.enum_constant_Likely_1244, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Likely_1244);
    }
    {
      data_model.enum_constant_MustTail_1245 = arboretum_create_named_node("/clang/attr/MustTail");
      arboretum_create_edge(data_model.enum_constant_MustTail_1245, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MustTail_1245);
    }
    {
      data_model.enum_constant_OpenCLUnrollHint_1246 = arboretum_create_named_node("/clang/attr/OpenCLUnrollHint");
      arboretum_create_edge(data_model.enum_constant_OpenCLUnrollHint_1246, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLUnrollHint_1246);
    }
    {
      data_model.enum_constant_Unlikely_1247 = arboretum_create_named_node("/clang/attr/Unlikely");
      arboretum_create_edge(data_model.enum_constant_Unlikely_1247, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unlikely_1247);
    }
    {
      data_model.enum_constant_AlwaysInline_1248 = arboretum_create_named_node("/clang/attr/AlwaysInline");
      arboretum_create_edge(data_model.enum_constant_AlwaysInline_1248, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AlwaysInline_1248);
    }
    {
      data_model.enum_constant_NoInline_1249 = arboretum_create_named_node("/clang/attr/NoInline");
      arboretum_create_edge(data_model.enum_constant_NoInline_1249, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoInline_1249);
    }
    {
      data_model.enum_constant_NoMerge_1250 = arboretum_create_named_node("/clang/attr/NoMerge");
      arboretum_create_edge(data_model.enum_constant_NoMerge_1250, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoMerge_1250);
    }
    {
      data_model.enum_constant_Suppress_1251 = arboretum_create_named_node("/clang/attr/Suppress");
      arboretum_create_edge(data_model.enum_constant_Suppress_1251, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Suppress_1251);
    }
    {
      data_model.enum_constant_AArch64SVEPcs_1252 = arboretum_create_named_node("/clang/attr/AArch64SVEPcs");
      arboretum_create_edge(data_model.enum_constant_AArch64SVEPcs_1252, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AArch64SVEPcs_1252);
    }
    {
      data_model.enum_constant_AArch64VectorPcs_1253 = arboretum_create_named_node("/clang/attr/AArch64VectorPcs");
      arboretum_create_edge(data_model.enum_constant_AArch64VectorPcs_1253, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AArch64VectorPcs_1253);
    }
    {
      data_model.enum_constant_AMDGPUKernelCall_1254 = arboretum_create_named_node("/clang/attr/AMDGPUKernelCall");
      arboretum_create_edge(data_model.enum_constant_AMDGPUKernelCall_1254, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AMDGPUKernelCall_1254);
    }
    {
      data_model.enum_constant_AcquireHandle_1255 = arboretum_create_named_node("/clang/attr/AcquireHandle");
      arboretum_create_edge(data_model.enum_constant_AcquireHandle_1255, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AcquireHandle_1255);
    }
    {
      data_model.enum_constant_AnyX86NoCfCheck_1256 = arboretum_create_named_node("/clang/attr/AnyX86NoCfCheck");
      arboretum_create_edge(data_model.enum_constant_AnyX86NoCfCheck_1256, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AnyX86NoCfCheck_1256);
    }
    {
      data_model.enum_constant_CDecl_1257 = arboretum_create_named_node("/clang/attr/CDecl");
      arboretum_create_edge(data_model.enum_constant_CDecl_1257, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CDecl_1257);
    }
    {
      data_model.enum_constant_FastCall_1258 = arboretum_create_named_node("/clang/attr/FastCall");
      arboretum_create_edge(data_model.enum_constant_FastCall_1258, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FastCall_1258);
    }
    {
      data_model.enum_constant_IntelOclBicc_1259 = arboretum_create_named_node("/clang/attr/IntelOclBicc");
      arboretum_create_edge(data_model.enum_constant_IntelOclBicc_1259, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_IntelOclBicc_1259);
    }
    {
      data_model.enum_constant_LifetimeBound_1260 = arboretum_create_named_node("/clang/attr/LifetimeBound");
      arboretum_create_edge(data_model.enum_constant_LifetimeBound_1260, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LifetimeBound_1260);
    }
    {
      data_model.enum_constant_M68kRTD_1261 = arboretum_create_named_node("/clang/attr/M68kRTD");
      arboretum_create_edge(data_model.enum_constant_M68kRTD_1261, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_M68kRTD_1261);
    }
    {
      data_model.enum_constant_MSABI_1262 = arboretum_create_named_node("/clang/attr/MSABI");
      arboretum_create_edge(data_model.enum_constant_MSABI_1262, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSABI_1262);
    }
    {
      data_model.enum_constant_NSReturnsRetained_1263 = arboretum_create_named_node("/clang/attr/NSReturnsRetained");
      arboretum_create_edge(data_model.enum_constant_NSReturnsRetained_1263, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NSReturnsRetained_1263);
    }
    {
      data_model.enum_constant_ObjCOwnership_1264 = arboretum_create_named_node("/clang/attr/ObjCOwnership");
      arboretum_create_edge(data_model.enum_constant_ObjCOwnership_1264, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCOwnership_1264);
    }
    {
      data_model.enum_constant_Pascal_1265 = arboretum_create_named_node("/clang/attr/Pascal");
      arboretum_create_edge(data_model.enum_constant_Pascal_1265, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Pascal_1265);
    }
    {
      data_model.enum_constant_Pcs_1266 = arboretum_create_named_node("/clang/attr/Pcs");
      arboretum_create_edge(data_model.enum_constant_Pcs_1266, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Pcs_1266);
    }
    {
      data_model.enum_constant_PreserveAll_1267 = arboretum_create_named_node("/clang/attr/PreserveAll");
      arboretum_create_edge(data_model.enum_constant_PreserveAll_1267, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PreserveAll_1267);
    }
    {
      data_model.enum_constant_PreserveMost_1268 = arboretum_create_named_node("/clang/attr/PreserveMost");
      arboretum_create_edge(data_model.enum_constant_PreserveMost_1268, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PreserveMost_1268);
    }
    {
      data_model.enum_constant_RegCall_1269 = arboretum_create_named_node("/clang/attr/RegCall");
      arboretum_create_edge(data_model.enum_constant_RegCall_1269, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RegCall_1269);
    }
    {
      data_model.enum_constant_StdCall_1270 = arboretum_create_named_node("/clang/attr/StdCall");
      arboretum_create_edge(data_model.enum_constant_StdCall_1270, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_StdCall_1270);
    }
    {
      data_model.enum_constant_SwiftAsyncCall_1271 = arboretum_create_named_node("/clang/attr/SwiftAsyncCall");
      arboretum_create_edge(data_model.enum_constant_SwiftAsyncCall_1271, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftAsyncCall_1271);
    }
    {
      data_model.enum_constant_SwiftCall_1272 = arboretum_create_named_node("/clang/attr/SwiftCall");
      arboretum_create_edge(data_model.enum_constant_SwiftCall_1272, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftCall_1272);
    }
    {
      data_model.enum_constant_SysVABI_1273 = arboretum_create_named_node("/clang/attr/SysVABI");
      arboretum_create_edge(data_model.enum_constant_SysVABI_1273, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SysVABI_1273);
    }
    {
      data_model.enum_constant_ThisCall_1274 = arboretum_create_named_node("/clang/attr/ThisCall");
      arboretum_create_edge(data_model.enum_constant_ThisCall_1274, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ThisCall_1274);
    }
    {
      data_model.enum_constant_VectorCall_1275 = arboretum_create_named_node("/clang/attr/VectorCall");
      arboretum_create_edge(data_model.enum_constant_VectorCall_1275, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VectorCall_1275);
    }
    {
      data_model.enum_constant_SwiftAsyncContext_1276 = arboretum_create_named_node("/clang/attr/SwiftAsyncContext");
      arboretum_create_edge(data_model.enum_constant_SwiftAsyncContext_1276, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftAsyncContext_1276);
    }
    {
      data_model.enum_constant_SwiftContext_1277 = arboretum_create_named_node("/clang/attr/SwiftContext");
      arboretum_create_edge(data_model.enum_constant_SwiftContext_1277, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftContext_1277);
    }
    {
      data_model.enum_constant_SwiftErrorResult_1278 = arboretum_create_named_node("/clang/attr/SwiftErrorResult");
      arboretum_create_edge(data_model.enum_constant_SwiftErrorResult_1278, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftErrorResult_1278);
    }
    {
      data_model.enum_constant_SwiftIndirectResult_1279 = arboretum_create_named_node("/clang/attr/SwiftIndirectResult");
      arboretum_create_edge(data_model.enum_constant_SwiftIndirectResult_1279, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftIndirectResult_1279);
    }
    {
      data_model.enum_constant_Annotate_1280 = arboretum_create_named_node("/clang/attr/Annotate");
      arboretum_create_edge(data_model.enum_constant_Annotate_1280, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Annotate_1280);
    }
    {
      data_model.enum_constant_CFConsumed_1281 = arboretum_create_named_node("/clang/attr/CFConsumed");
      arboretum_create_edge(data_model.enum_constant_CFConsumed_1281, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFConsumed_1281);
    }
    {
      data_model.enum_constant_CarriesDependency_1282 = arboretum_create_named_node("/clang/attr/CarriesDependency");
      arboretum_create_edge(data_model.enum_constant_CarriesDependency_1282, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CarriesDependency_1282);
    }
    {
      data_model.enum_constant_NSConsumed_1283 = arboretum_create_named_node("/clang/attr/NSConsumed");
      arboretum_create_edge(data_model.enum_constant_NSConsumed_1283, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NSConsumed_1283);
    }
    {
      data_model.enum_constant_NonNull_1284 = arboretum_create_named_node("/clang/attr/NonNull");
      arboretum_create_edge(data_model.enum_constant_NonNull_1284, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NonNull_1284);
    }
    {
      data_model.enum_constant_OSConsumed_1285 = arboretum_create_named_node("/clang/attr/OSConsumed");
      arboretum_create_edge(data_model.enum_constant_OSConsumed_1285, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OSConsumed_1285);
    }
    {
      data_model.enum_constant_PassObjectSize_1286 = arboretum_create_named_node("/clang/attr/PassObjectSize");
      arboretum_create_edge(data_model.enum_constant_PassObjectSize_1286, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PassObjectSize_1286);
    }
    {
      data_model.enum_constant_ReleaseHandle_1287 = arboretum_create_named_node("/clang/attr/ReleaseHandle");
      arboretum_create_edge(data_model.enum_constant_ReleaseHandle_1287, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReleaseHandle_1287);
    }
    {
      data_model.enum_constant_UseHandle_1288 = arboretum_create_named_node("/clang/attr/UseHandle");
      arboretum_create_edge(data_model.enum_constant_UseHandle_1288, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UseHandle_1288);
    }
    {
      data_model.enum_constant_HLSLSV_DispatchThreadID_1289 = arboretum_create_named_node("/clang/attr/HLSLSV_DispatchThreadID");
      arboretum_create_edge(data_model.enum_constant_HLSLSV_DispatchThreadID_1289, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLSV_DispatchThreadID_1289);
    }
    {
      data_model.enum_constant_HLSLSV_GroupIndex_1290 = arboretum_create_named_node("/clang/attr/HLSLSV_GroupIndex");
      arboretum_create_edge(data_model.enum_constant_HLSLSV_GroupIndex_1290, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLSV_GroupIndex_1290);
    }
    {
      data_model.enum_constant_AMDGPUFlatWorkGroupSize_1291 = arboretum_create_named_node("/clang/attr/AMDGPUFlatWorkGroupSize");
      arboretum_create_edge(data_model.enum_constant_AMDGPUFlatWorkGroupSize_1291, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AMDGPUFlatWorkGroupSize_1291);
    }
    {
      data_model.enum_constant_AMDGPUNumSGPR_1292 = arboretum_create_named_node("/clang/attr/AMDGPUNumSGPR");
      arboretum_create_edge(data_model.enum_constant_AMDGPUNumSGPR_1292, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AMDGPUNumSGPR_1292);
    }
    {
      data_model.enum_constant_AMDGPUNumVGPR_1293 = arboretum_create_named_node("/clang/attr/AMDGPUNumVGPR");
      arboretum_create_edge(data_model.enum_constant_AMDGPUNumVGPR_1293, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AMDGPUNumVGPR_1293);
    }
    {
      data_model.enum_constant_AMDGPUWavesPerEU_1294 = arboretum_create_named_node("/clang/attr/AMDGPUWavesPerEU");
      arboretum_create_edge(data_model.enum_constant_AMDGPUWavesPerEU_1294, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AMDGPUWavesPerEU_1294);
    }
    {
      data_model.enum_constant_ARMInterrupt_1295 = arboretum_create_named_node("/clang/attr/ARMInterrupt");
      arboretum_create_edge(data_model.enum_constant_ARMInterrupt_1295, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ARMInterrupt_1295);
    }
    {
      data_model.enum_constant_AVRInterrupt_1296 = arboretum_create_named_node("/clang/attr/AVRInterrupt");
      arboretum_create_edge(data_model.enum_constant_AVRInterrupt_1296, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AVRInterrupt_1296);
    }
    {
      data_model.enum_constant_AVRSignal_1297 = arboretum_create_named_node("/clang/attr/AVRSignal");
      arboretum_create_edge(data_model.enum_constant_AVRSignal_1297, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AVRSignal_1297);
    }
    {
      data_model.enum_constant_AcquireCapability_1298 = arboretum_create_named_node("/clang/attr/AcquireCapability");
      arboretum_create_edge(data_model.enum_constant_AcquireCapability_1298, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AcquireCapability_1298);
    }
    {
      data_model.enum_constant_AcquiredAfter_1299 = arboretum_create_named_node("/clang/attr/AcquiredAfter");
      arboretum_create_edge(data_model.enum_constant_AcquiredAfter_1299, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AcquiredAfter_1299);
    }
    {
      data_model.enum_constant_AcquiredBefore_1300 = arboretum_create_named_node("/clang/attr/AcquiredBefore");
      arboretum_create_edge(data_model.enum_constant_AcquiredBefore_1300, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AcquiredBefore_1300);
    }
    {
      data_model.enum_constant_AlignMac68k_1301 = arboretum_create_named_node("/clang/attr/AlignMac68k");
      arboretum_create_edge(data_model.enum_constant_AlignMac68k_1301, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AlignMac68k_1301);
    }
    {
      data_model.enum_constant_AlignNatural_1302 = arboretum_create_named_node("/clang/attr/AlignNatural");
      arboretum_create_edge(data_model.enum_constant_AlignNatural_1302, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AlignNatural_1302);
    }
    {
      data_model.enum_constant_Aligned_1303 = arboretum_create_named_node("/clang/attr/Aligned");
      arboretum_create_edge(data_model.enum_constant_Aligned_1303, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Aligned_1303);
    }
    {
      data_model.enum_constant_AllocAlign_1304 = arboretum_create_named_node("/clang/attr/AllocAlign");
      arboretum_create_edge(data_model.enum_constant_AllocAlign_1304, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AllocAlign_1304);
    }
    {
      data_model.enum_constant_AllocSize_1305 = arboretum_create_named_node("/clang/attr/AllocSize");
      arboretum_create_edge(data_model.enum_constant_AllocSize_1305, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AllocSize_1305);
    }
    {
      data_model.enum_constant_AlwaysDestroy_1306 = arboretum_create_named_node("/clang/attr/AlwaysDestroy");
      arboretum_create_edge(data_model.enum_constant_AlwaysDestroy_1306, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AlwaysDestroy_1306);
    }
    {
      data_model.enum_constant_AnalyzerNoReturn_1307 = arboretum_create_named_node("/clang/attr/AnalyzerNoReturn");
      arboretum_create_edge(data_model.enum_constant_AnalyzerNoReturn_1307, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AnalyzerNoReturn_1307);
    }
    {
      data_model.enum_constant_AnyX86Interrupt_1308 = arboretum_create_named_node("/clang/attr/AnyX86Interrupt");
      arboretum_create_edge(data_model.enum_constant_AnyX86Interrupt_1308, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AnyX86Interrupt_1308);
    }
    {
      data_model.enum_constant_AnyX86NoCallerSavedRegisters_1309 = arboretum_create_named_node("/clang/attr/AnyX86NoCallerSavedRegisters");
      arboretum_create_edge(data_model.enum_constant_AnyX86NoCallerSavedRegisters_1309, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AnyX86NoCallerSavedRegisters_1309);
    }
    {
      data_model.enum_constant_ArcWeakrefUnavailable_1310 = arboretum_create_named_node("/clang/attr/ArcWeakrefUnavailable");
      arboretum_create_edge(data_model.enum_constant_ArcWeakrefUnavailable_1310, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArcWeakrefUnavailable_1310);
    }
    {
      data_model.enum_constant_ArgumentWithTypeTag_1311 = arboretum_create_named_node("/clang/attr/ArgumentWithTypeTag");
      arboretum_create_edge(data_model.enum_constant_ArgumentWithTypeTag_1311, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArgumentWithTypeTag_1311);
    }
    {
      data_model.enum_constant_ArmBuiltinAlias_1312 = arboretum_create_named_node("/clang/attr/ArmBuiltinAlias");
      arboretum_create_edge(data_model.enum_constant_ArmBuiltinAlias_1312, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmBuiltinAlias_1312);
    }
    {
      data_model.enum_constant_ArmLocallyStreaming_1313 = arboretum_create_named_node("/clang/attr/ArmLocallyStreaming");
      arboretum_create_edge(data_model.enum_constant_ArmLocallyStreaming_1313, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmLocallyStreaming_1313);
    }
    {
      data_model.enum_constant_ArmNew_1314 = arboretum_create_named_node("/clang/attr/ArmNew");
      arboretum_create_edge(data_model.enum_constant_ArmNew_1314, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ArmNew_1314);
    }
    {
      data_model.enum_constant_Artificial_1315 = arboretum_create_named_node("/clang/attr/Artificial");
      arboretum_create_edge(data_model.enum_constant_Artificial_1315, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Artificial_1315);
    }
    {
      data_model.enum_constant_AsmLabel_1316 = arboretum_create_named_node("/clang/attr/AsmLabel");
      arboretum_create_edge(data_model.enum_constant_AsmLabel_1316, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AsmLabel_1316);
    }
    {
      data_model.enum_constant_AssertCapability_1317 = arboretum_create_named_node("/clang/attr/AssertCapability");
      arboretum_create_edge(data_model.enum_constant_AssertCapability_1317, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AssertCapability_1317);
    }
    {
      data_model.enum_constant_AssertExclusiveLock_1318 = arboretum_create_named_node("/clang/attr/AssertExclusiveLock");
      arboretum_create_edge(data_model.enum_constant_AssertExclusiveLock_1318, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AssertExclusiveLock_1318);
    }
    {
      data_model.enum_constant_AssertSharedLock_1319 = arboretum_create_named_node("/clang/attr/AssertSharedLock");
      arboretum_create_edge(data_model.enum_constant_AssertSharedLock_1319, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AssertSharedLock_1319);
    }
    {
      data_model.enum_constant_AssumeAligned_1320 = arboretum_create_named_node("/clang/attr/AssumeAligned");
      arboretum_create_edge(data_model.enum_constant_AssumeAligned_1320, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AssumeAligned_1320);
    }
    {
      data_model.enum_constant_Assumption_1321 = arboretum_create_named_node("/clang/attr/Assumption");
      arboretum_create_edge(data_model.enum_constant_Assumption_1321, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Assumption_1321);
    }
    {
      data_model.enum_constant_Availability_1322 = arboretum_create_named_node("/clang/attr/Availability");
      arboretum_create_edge(data_model.enum_constant_Availability_1322, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Availability_1322);
    }
    {
      data_model.enum_constant_AvailableOnlyInDefaultEvalMethod_1323 = arboretum_create_named_node("/clang/attr/AvailableOnlyInDefaultEvalMethod");
      arboretum_create_edge(data_model.enum_constant_AvailableOnlyInDefaultEvalMethod_1323, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AvailableOnlyInDefaultEvalMethod_1323);
    }
    {
      data_model.enum_constant_BPFPreserveAccessIndex_1324 = arboretum_create_named_node("/clang/attr/BPFPreserveAccessIndex");
      arboretum_create_edge(data_model.enum_constant_BPFPreserveAccessIndex_1324, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BPFPreserveAccessIndex_1324);
    }
    {
      data_model.enum_constant_BPFPreserveStaticOffset_1325 = arboretum_create_named_node("/clang/attr/BPFPreserveStaticOffset");
      arboretum_create_edge(data_model.enum_constant_BPFPreserveStaticOffset_1325, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BPFPreserveStaticOffset_1325);
    }
    {
      data_model.enum_constant_BTFDeclTag_1326 = arboretum_create_named_node("/clang/attr/BTFDeclTag");
      arboretum_create_edge(data_model.enum_constant_BTFDeclTag_1326, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BTFDeclTag_1326);
    }
    {
      data_model.enum_constant_Blocks_1327 = arboretum_create_named_node("/clang/attr/Blocks");
      arboretum_create_edge(data_model.enum_constant_Blocks_1327, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Blocks_1327);
    }
    {
      data_model.enum_constant_Builtin_1328 = arboretum_create_named_node("/clang/attr/Builtin");
      arboretum_create_edge(data_model.enum_constant_Builtin_1328, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Builtin_1328);
    }
    {
      data_model.enum_constant_C11NoReturn_1329 = arboretum_create_named_node("/clang/attr/C11NoReturn");
      arboretum_create_edge(data_model.enum_constant_C11NoReturn_1329, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_C11NoReturn_1329);
    }
    {
      data_model.enum_constant_CFAuditedTransfer_1330 = arboretum_create_named_node("/clang/attr/CFAuditedTransfer");
      arboretum_create_edge(data_model.enum_constant_CFAuditedTransfer_1330, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFAuditedTransfer_1330);
    }
    {
      data_model.enum_constant_CFGuard_1331 = arboretum_create_named_node("/clang/attr/CFGuard");
      arboretum_create_edge(data_model.enum_constant_CFGuard_1331, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFGuard_1331);
    }
    {
      data_model.enum_constant_CFICanonicalJumpTable_1332 = arboretum_create_named_node("/clang/attr/CFICanonicalJumpTable");
      arboretum_create_edge(data_model.enum_constant_CFICanonicalJumpTable_1332, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFICanonicalJumpTable_1332);
    }
    {
      data_model.enum_constant_CFReturnsNotRetained_1333 = arboretum_create_named_node("/clang/attr/CFReturnsNotRetained");
      arboretum_create_edge(data_model.enum_constant_CFReturnsNotRetained_1333, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFReturnsNotRetained_1333);
    }
    {
      data_model.enum_constant_CFReturnsRetained_1334 = arboretum_create_named_node("/clang/attr/CFReturnsRetained");
      arboretum_create_edge(data_model.enum_constant_CFReturnsRetained_1334, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFReturnsRetained_1334);
    }
    {
      data_model.enum_constant_CFUnknownTransfer_1335 = arboretum_create_named_node("/clang/attr/CFUnknownTransfer");
      arboretum_create_edge(data_model.enum_constant_CFUnknownTransfer_1335, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CFUnknownTransfer_1335);
    }
    {
      data_model.enum_constant_CPUDispatch_1336 = arboretum_create_named_node("/clang/attr/CPUDispatch");
      arboretum_create_edge(data_model.enum_constant_CPUDispatch_1336, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CPUDispatch_1336);
    }
    {
      data_model.enum_constant_CPUSpecific_1337 = arboretum_create_named_node("/clang/attr/CPUSpecific");
      arboretum_create_edge(data_model.enum_constant_CPUSpecific_1337, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CPUSpecific_1337);
    }
    {
      data_model.enum_constant_CUDAConstant_1338 = arboretum_create_named_node("/clang/attr/CUDAConstant");
      arboretum_create_edge(data_model.enum_constant_CUDAConstant_1338, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDAConstant_1338);
    }
    {
      data_model.enum_constant_CUDADevice_1339 = arboretum_create_named_node("/clang/attr/CUDADevice");
      arboretum_create_edge(data_model.enum_constant_CUDADevice_1339, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDADevice_1339);
    }
    {
      data_model.enum_constant_CUDADeviceBuiltinSurfaceType_1340 = arboretum_create_named_node("/clang/attr/CUDADeviceBuiltinSurfaceType");
      arboretum_create_edge(data_model.enum_constant_CUDADeviceBuiltinSurfaceType_1340, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDADeviceBuiltinSurfaceType_1340);
    }
    {
      data_model.enum_constant_CUDADeviceBuiltinTextureType_1341 = arboretum_create_named_node("/clang/attr/CUDADeviceBuiltinTextureType");
      arboretum_create_edge(data_model.enum_constant_CUDADeviceBuiltinTextureType_1341, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDADeviceBuiltinTextureType_1341);
    }
    {
      data_model.enum_constant_CUDAGlobal_1342 = arboretum_create_named_node("/clang/attr/CUDAGlobal");
      arboretum_create_edge(data_model.enum_constant_CUDAGlobal_1342, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDAGlobal_1342);
    }
    {
      data_model.enum_constant_CUDAHost_1343 = arboretum_create_named_node("/clang/attr/CUDAHost");
      arboretum_create_edge(data_model.enum_constant_CUDAHost_1343, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDAHost_1343);
    }
    {
      data_model.enum_constant_CUDAInvalidTarget_1344 = arboretum_create_named_node("/clang/attr/CUDAInvalidTarget");
      arboretum_create_edge(data_model.enum_constant_CUDAInvalidTarget_1344, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDAInvalidTarget_1344);
    }
    {
      data_model.enum_constant_CUDALaunchBounds_1345 = arboretum_create_named_node("/clang/attr/CUDALaunchBounds");
      arboretum_create_edge(data_model.enum_constant_CUDALaunchBounds_1345, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDALaunchBounds_1345);
    }
    {
      data_model.enum_constant_CUDAShared_1346 = arboretum_create_named_node("/clang/attr/CUDAShared");
      arboretum_create_edge(data_model.enum_constant_CUDAShared_1346, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CUDAShared_1346);
    }
    {
      data_model.enum_constant_CXX11NoReturn_1347 = arboretum_create_named_node("/clang/attr/CXX11NoReturn");
      arboretum_create_edge(data_model.enum_constant_CXX11NoReturn_1347, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CXX11NoReturn_1347);
    }
    {
      data_model.enum_constant_CallableWhen_1348 = arboretum_create_named_node("/clang/attr/CallableWhen");
      arboretum_create_edge(data_model.enum_constant_CallableWhen_1348, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CallableWhen_1348);
    }
    {
      data_model.enum_constant_Callback_1349 = arboretum_create_named_node("/clang/attr/Callback");
      arboretum_create_edge(data_model.enum_constant_Callback_1349, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Callback_1349);
    }
    {
      data_model.enum_constant_Capability_1350 = arboretum_create_named_node("/clang/attr/Capability");
      arboretum_create_edge(data_model.enum_constant_Capability_1350, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Capability_1350);
    }
    {
      data_model.enum_constant_CapturedRecord_1351 = arboretum_create_named_node("/clang/attr/CapturedRecord");
      arboretum_create_edge(data_model.enum_constant_CapturedRecord_1351, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CapturedRecord_1351);
    }
    {
      data_model.enum_constant_Cleanup_1352 = arboretum_create_named_node("/clang/attr/Cleanup");
      arboretum_create_edge(data_model.enum_constant_Cleanup_1352, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Cleanup_1352);
    }
    {
      data_model.enum_constant_CmseNSEntry_1353 = arboretum_create_named_node("/clang/attr/CmseNSEntry");
      arboretum_create_edge(data_model.enum_constant_CmseNSEntry_1353, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CmseNSEntry_1353);
    }
    {
      data_model.enum_constant_CodeModel_1354 = arboretum_create_named_node("/clang/attr/CodeModel");
      arboretum_create_edge(data_model.enum_constant_CodeModel_1354, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CodeModel_1354);
    }
    {
      data_model.enum_constant_CodeSeg_1355 = arboretum_create_named_node("/clang/attr/CodeSeg");
      arboretum_create_edge(data_model.enum_constant_CodeSeg_1355, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CodeSeg_1355);
    }
    {
      data_model.enum_constant_Cold_1356 = arboretum_create_named_node("/clang/attr/Cold");
      arboretum_create_edge(data_model.enum_constant_Cold_1356, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Cold_1356);
    }
    {
      data_model.enum_constant_Common_1357 = arboretum_create_named_node("/clang/attr/Common");
      arboretum_create_edge(data_model.enum_constant_Common_1357, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Common_1357);
    }
    {
      data_model.enum_constant_Const_1358 = arboretum_create_named_node("/clang/attr/Const");
      arboretum_create_edge(data_model.enum_constant_Const_1358, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Const_1358);
    }
    {
      data_model.enum_constant_ConstInit_1359 = arboretum_create_named_node("/clang/attr/ConstInit");
      arboretum_create_edge(data_model.enum_constant_ConstInit_1359, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ConstInit_1359);
    }
    {
      data_model.enum_constant_Constructor_1360 = arboretum_create_named_node("/clang/attr/Constructor");
      arboretum_create_edge(data_model.enum_constant_Constructor_1360, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Constructor_1360);
    }
    {
      data_model.enum_constant_Consumable_1361 = arboretum_create_named_node("/clang/attr/Consumable");
      arboretum_create_edge(data_model.enum_constant_Consumable_1361, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Consumable_1361);
    }
    {
      data_model.enum_constant_ConsumableAutoCast_1362 = arboretum_create_named_node("/clang/attr/ConsumableAutoCast");
      arboretum_create_edge(data_model.enum_constant_ConsumableAutoCast_1362, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ConsumableAutoCast_1362);
    }
    {
      data_model.enum_constant_ConsumableSetOnRead_1363 = arboretum_create_named_node("/clang/attr/ConsumableSetOnRead");
      arboretum_create_edge(data_model.enum_constant_ConsumableSetOnRead_1363, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ConsumableSetOnRead_1363);
    }
    {
      data_model.enum_constant_Convergent_1364 = arboretum_create_named_node("/clang/attr/Convergent");
      arboretum_create_edge(data_model.enum_constant_Convergent_1364, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Convergent_1364);
    }
    {
      data_model.enum_constant_CoroDisableLifetimeBound_1365 = arboretum_create_named_node("/clang/attr/CoroDisableLifetimeBound");
      arboretum_create_edge(data_model.enum_constant_CoroDisableLifetimeBound_1365, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CoroDisableLifetimeBound_1365);
    }
    {
      data_model.enum_constant_CoroLifetimeBound_1366 = arboretum_create_named_node("/clang/attr/CoroLifetimeBound");
      arboretum_create_edge(data_model.enum_constant_CoroLifetimeBound_1366, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CoroLifetimeBound_1366);
    }
    {
      data_model.enum_constant_CoroOnlyDestroyWhenComplete_1367 = arboretum_create_named_node("/clang/attr/CoroOnlyDestroyWhenComplete");
      arboretum_create_edge(data_model.enum_constant_CoroOnlyDestroyWhenComplete_1367, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CoroOnlyDestroyWhenComplete_1367);
    }
    {
      data_model.enum_constant_CoroReturnType_1368 = arboretum_create_named_node("/clang/attr/CoroReturnType");
      arboretum_create_edge(data_model.enum_constant_CoroReturnType_1368, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CoroReturnType_1368);
    }
    {
      data_model.enum_constant_CoroWrapper_1369 = arboretum_create_named_node("/clang/attr/CoroWrapper");
      arboretum_create_edge(data_model.enum_constant_CoroWrapper_1369, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CoroWrapper_1369);
    }
    {
      data_model.enum_constant_CountedBy_1370 = arboretum_create_named_node("/clang/attr/CountedBy");
      arboretum_create_edge(data_model.enum_constant_CountedBy_1370, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CountedBy_1370);
    }
    {
      data_model.enum_constant_DLLExport_1371 = arboretum_create_named_node("/clang/attr/DLLExport");
      arboretum_create_edge(data_model.enum_constant_DLLExport_1371, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DLLExport_1371);
    }
    {
      data_model.enum_constant_DLLExportStaticLocal_1372 = arboretum_create_named_node("/clang/attr/DLLExportStaticLocal");
      arboretum_create_edge(data_model.enum_constant_DLLExportStaticLocal_1372, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DLLExportStaticLocal_1372);
    }
    {
      data_model.enum_constant_DLLImport_1373 = arboretum_create_named_node("/clang/attr/DLLImport");
      arboretum_create_edge(data_model.enum_constant_DLLImport_1373, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DLLImport_1373);
    }
    {
      data_model.enum_constant_DLLImportStaticLocal_1374 = arboretum_create_named_node("/clang/attr/DLLImportStaticLocal");
      arboretum_create_edge(data_model.enum_constant_DLLImportStaticLocal_1374, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DLLImportStaticLocal_1374);
    }
    {
      data_model.enum_constant_Deprecated_1375 = arboretum_create_named_node("/clang/attr/Deprecated");
      arboretum_create_edge(data_model.enum_constant_Deprecated_1375, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Deprecated_1375);
    }
    {
      data_model.enum_constant_Destructor_1376 = arboretum_create_named_node("/clang/attr/Destructor");
      arboretum_create_edge(data_model.enum_constant_Destructor_1376, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Destructor_1376);
    }
    {
      data_model.enum_constant_DiagnoseAsBuiltin_1377 = arboretum_create_named_node("/clang/attr/DiagnoseAsBuiltin");
      arboretum_create_edge(data_model.enum_constant_DiagnoseAsBuiltin_1377, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DiagnoseAsBuiltin_1377);
    }
    {
      data_model.enum_constant_DiagnoseIf_1378 = arboretum_create_named_node("/clang/attr/DiagnoseIf");
      arboretum_create_edge(data_model.enum_constant_DiagnoseIf_1378, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DiagnoseIf_1378);
    }
    {
      data_model.enum_constant_DisableSanitizerInstrumentation_1379 = arboretum_create_named_node("/clang/attr/DisableSanitizerInstrumentation");
      arboretum_create_edge(data_model.enum_constant_DisableSanitizerInstrumentation_1379, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DisableSanitizerInstrumentation_1379);
    }
    {
      data_model.enum_constant_DisableTailCalls_1380 = arboretum_create_named_node("/clang/attr/DisableTailCalls");
      arboretum_create_edge(data_model.enum_constant_DisableTailCalls_1380, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_DisableTailCalls_1380);
    }
    {
      data_model.enum_constant_EmptyBases_1381 = arboretum_create_named_node("/clang/attr/EmptyBases");
      arboretum_create_edge(data_model.enum_constant_EmptyBases_1381, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EmptyBases_1381);
    }
    {
      data_model.enum_constant_EnableIf_1382 = arboretum_create_named_node("/clang/attr/EnableIf");
      arboretum_create_edge(data_model.enum_constant_EnableIf_1382, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EnableIf_1382);
    }
    {
      data_model.enum_constant_EnforceTCB_1383 = arboretum_create_named_node("/clang/attr/EnforceTCB");
      arboretum_create_edge(data_model.enum_constant_EnforceTCB_1383, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EnforceTCB_1383);
    }
    {
      data_model.enum_constant_EnforceTCBLeaf_1384 = arboretum_create_named_node("/clang/attr/EnforceTCBLeaf");
      arboretum_create_edge(data_model.enum_constant_EnforceTCBLeaf_1384, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EnforceTCBLeaf_1384);
    }
    {
      data_model.enum_constant_EnumExtensibility_1385 = arboretum_create_named_node("/clang/attr/EnumExtensibility");
      arboretum_create_edge(data_model.enum_constant_EnumExtensibility_1385, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_EnumExtensibility_1385);
    }
    {
      data_model.enum_constant_Error_1386 = arboretum_create_named_node("/clang/attr/Error");
      arboretum_create_edge(data_model.enum_constant_Error_1386, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Error_1386);
    }
    {
      data_model.enum_constant_ExcludeFromExplicitInstantiation_1387 = arboretum_create_named_node("/clang/attr/ExcludeFromExplicitInstantiation");
      arboretum_create_edge(data_model.enum_constant_ExcludeFromExplicitInstantiation_1387, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ExcludeFromExplicitInstantiation_1387);
    }
    {
      data_model.enum_constant_ExclusiveTrylockFunction_1388 = arboretum_create_named_node("/clang/attr/ExclusiveTrylockFunction");
      arboretum_create_edge(data_model.enum_constant_ExclusiveTrylockFunction_1388, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ExclusiveTrylockFunction_1388);
    }
    {
      data_model.enum_constant_ExternalSourceSymbol_1389 = arboretum_create_named_node("/clang/attr/ExternalSourceSymbol");
      arboretum_create_edge(data_model.enum_constant_ExternalSourceSymbol_1389, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ExternalSourceSymbol_1389);
    }
    {
      data_model.enum_constant_Final_1390 = arboretum_create_named_node("/clang/attr/Final");
      arboretum_create_edge(data_model.enum_constant_Final_1390, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Final_1390);
    }
    {
      data_model.enum_constant_FlagEnum_1391 = arboretum_create_named_node("/clang/attr/FlagEnum");
      arboretum_create_edge(data_model.enum_constant_FlagEnum_1391, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FlagEnum_1391);
    }
    {
      data_model.enum_constant_Flatten_1392 = arboretum_create_named_node("/clang/attr/Flatten");
      arboretum_create_edge(data_model.enum_constant_Flatten_1392, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Flatten_1392);
    }
    {
      data_model.enum_constant_Format_1393 = arboretum_create_named_node("/clang/attr/Format");
      arboretum_create_edge(data_model.enum_constant_Format_1393, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Format_1393);
    }
    {
      data_model.enum_constant_FormatArg_1394 = arboretum_create_named_node("/clang/attr/FormatArg");
      arboretum_create_edge(data_model.enum_constant_FormatArg_1394, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FormatArg_1394);
    }
    {
      data_model.enum_constant_FunctionReturnThunks_1395 = arboretum_create_named_node("/clang/attr/FunctionReturnThunks");
      arboretum_create_edge(data_model.enum_constant_FunctionReturnThunks_1395, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FunctionReturnThunks_1395);
    }
    {
      data_model.enum_constant_GNUInline_1396 = arboretum_create_named_node("/clang/attr/GNUInline");
      arboretum_create_edge(data_model.enum_constant_GNUInline_1396, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_GNUInline_1396);
    }
    {
      data_model.enum_constant_GuardedBy_1397 = arboretum_create_named_node("/clang/attr/GuardedBy");
      arboretum_create_edge(data_model.enum_constant_GuardedBy_1397, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_GuardedBy_1397);
    }
    {
      data_model.enum_constant_GuardedVar_1398 = arboretum_create_named_node("/clang/attr/GuardedVar");
      arboretum_create_edge(data_model.enum_constant_GuardedVar_1398, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_GuardedVar_1398);
    }
    {
      data_model.enum_constant_HIPManaged_1399 = arboretum_create_named_node("/clang/attr/HIPManaged");
      arboretum_create_edge(data_model.enum_constant_HIPManaged_1399, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HIPManaged_1399);
    }
    {
      data_model.enum_constant_HLSLNumThreads_1400 = arboretum_create_named_node("/clang/attr/HLSLNumThreads");
      arboretum_create_edge(data_model.enum_constant_HLSLNumThreads_1400, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLNumThreads_1400);
    }
    {
      data_model.enum_constant_HLSLResource_1401 = arboretum_create_named_node("/clang/attr/HLSLResource");
      arboretum_create_edge(data_model.enum_constant_HLSLResource_1401, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLResource_1401);
    }
    {
      data_model.enum_constant_HLSLResourceBinding_1402 = arboretum_create_named_node("/clang/attr/HLSLResourceBinding");
      arboretum_create_edge(data_model.enum_constant_HLSLResourceBinding_1402, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLResourceBinding_1402);
    }
    {
      data_model.enum_constant_HLSLShader_1403 = arboretum_create_named_node("/clang/attr/HLSLShader");
      arboretum_create_edge(data_model.enum_constant_HLSLShader_1403, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_HLSLShader_1403);
    }
    {
      data_model.enum_constant_Hot_1404 = arboretum_create_named_node("/clang/attr/Hot");
      arboretum_create_edge(data_model.enum_constant_Hot_1404, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Hot_1404);
    }
    {
      data_model.enum_constant_IBAction_1405 = arboretum_create_named_node("/clang/attr/IBAction");
      arboretum_create_edge(data_model.enum_constant_IBAction_1405, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_IBAction_1405);
    }
    {
      data_model.enum_constant_IBOutlet_1406 = arboretum_create_named_node("/clang/attr/IBOutlet");
      arboretum_create_edge(data_model.enum_constant_IBOutlet_1406, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_IBOutlet_1406);
    }
    {
      data_model.enum_constant_IBOutletCollection_1407 = arboretum_create_named_node("/clang/attr/IBOutletCollection");
      arboretum_create_edge(data_model.enum_constant_IBOutletCollection_1407, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_IBOutletCollection_1407);
    }
    {
      data_model.enum_constant_InitPriority_1408 = arboretum_create_named_node("/clang/attr/InitPriority");
      arboretum_create_edge(data_model.enum_constant_InitPriority_1408, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_InitPriority_1408);
    }
    {
      data_model.enum_constant_InternalLinkage_1409 = arboretum_create_named_node("/clang/attr/InternalLinkage");
      arboretum_create_edge(data_model.enum_constant_InternalLinkage_1409, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_InternalLinkage_1409);
    }
    {
      data_model.enum_constant_LTOVisibilityPublic_1410 = arboretum_create_named_node("/clang/attr/LTOVisibilityPublic");
      arboretum_create_edge(data_model.enum_constant_LTOVisibilityPublic_1410, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LTOVisibilityPublic_1410);
    }
    {
      data_model.enum_constant_LayoutVersion_1411 = arboretum_create_named_node("/clang/attr/LayoutVersion");
      arboretum_create_edge(data_model.enum_constant_LayoutVersion_1411, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LayoutVersion_1411);
    }
    {
      data_model.enum_constant_Leaf_1412 = arboretum_create_named_node("/clang/attr/Leaf");
      arboretum_create_edge(data_model.enum_constant_Leaf_1412, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Leaf_1412);
    }
    {
      data_model.enum_constant_LockReturned_1413 = arboretum_create_named_node("/clang/attr/LockReturned");
      arboretum_create_edge(data_model.enum_constant_LockReturned_1413, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LockReturned_1413);
    }
    {
      data_model.enum_constant_LocksExcluded_1414 = arboretum_create_named_node("/clang/attr/LocksExcluded");
      arboretum_create_edge(data_model.enum_constant_LocksExcluded_1414, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LocksExcluded_1414);
    }
    {
      data_model.enum_constant_M68kInterrupt_1415 = arboretum_create_named_node("/clang/attr/M68kInterrupt");
      arboretum_create_edge(data_model.enum_constant_M68kInterrupt_1415, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_M68kInterrupt_1415);
    }
    {
      data_model.enum_constant_MIGServerRoutine_1416 = arboretum_create_named_node("/clang/attr/MIGServerRoutine");
      arboretum_create_edge(data_model.enum_constant_MIGServerRoutine_1416, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MIGServerRoutine_1416);
    }
    {
      data_model.enum_constant_MSAllocator_1417 = arboretum_create_named_node("/clang/attr/MSAllocator");
      arboretum_create_edge(data_model.enum_constant_MSAllocator_1417, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSAllocator_1417);
    }
    {
      data_model.enum_constant_MSConstexpr_1418 = arboretum_create_named_node("/clang/attr/MSConstexpr");
      arboretum_create_edge(data_model.enum_constant_MSConstexpr_1418, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSConstexpr_1418);
    }
    {
      data_model.enum_constant_MSInheritance_1419 = arboretum_create_named_node("/clang/attr/MSInheritance");
      arboretum_create_edge(data_model.enum_constant_MSInheritance_1419, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSInheritance_1419);
    }
    {
      data_model.enum_constant_MSNoVTable_1420 = arboretum_create_named_node("/clang/attr/MSNoVTable");
      arboretum_create_edge(data_model.enum_constant_MSNoVTable_1420, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSNoVTable_1420);
    }
    {
      data_model.enum_constant_MSP430Interrupt_1421 = arboretum_create_named_node("/clang/attr/MSP430Interrupt");
      arboretum_create_edge(data_model.enum_constant_MSP430Interrupt_1421, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSP430Interrupt_1421);
    }
    {
      data_model.enum_constant_MSStruct_1422 = arboretum_create_named_node("/clang/attr/MSStruct");
      arboretum_create_edge(data_model.enum_constant_MSStruct_1422, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSStruct_1422);
    }
    {
      data_model.enum_constant_MSVtorDisp_1423 = arboretum_create_named_node("/clang/attr/MSVtorDisp");
      arboretum_create_edge(data_model.enum_constant_MSVtorDisp_1423, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MSVtorDisp_1423);
    }
    {
      data_model.enum_constant_MaxFieldAlignment_1424 = arboretum_create_named_node("/clang/attr/MaxFieldAlignment");
      arboretum_create_edge(data_model.enum_constant_MaxFieldAlignment_1424, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MaxFieldAlignment_1424);
    }
    {
      data_model.enum_constant_MayAlias_1425 = arboretum_create_named_node("/clang/attr/MayAlias");
      arboretum_create_edge(data_model.enum_constant_MayAlias_1425, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MayAlias_1425);
    }
    {
      data_model.enum_constant_MaybeUndef_1426 = arboretum_create_named_node("/clang/attr/MaybeUndef");
      arboretum_create_edge(data_model.enum_constant_MaybeUndef_1426, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MaybeUndef_1426);
    }
    {
      data_model.enum_constant_MicroMips_1427 = arboretum_create_named_node("/clang/attr/MicroMips");
      arboretum_create_edge(data_model.enum_constant_MicroMips_1427, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MicroMips_1427);
    }
    {
      data_model.enum_constant_MinSize_1428 = arboretum_create_named_node("/clang/attr/MinSize");
      arboretum_create_edge(data_model.enum_constant_MinSize_1428, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MinSize_1428);
    }
    {
      data_model.enum_constant_MinVectorWidth_1429 = arboretum_create_named_node("/clang/attr/MinVectorWidth");
      arboretum_create_edge(data_model.enum_constant_MinVectorWidth_1429, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MinVectorWidth_1429);
    }
    {
      data_model.enum_constant_Mips16_1430 = arboretum_create_named_node("/clang/attr/Mips16");
      arboretum_create_edge(data_model.enum_constant_Mips16_1430, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Mips16_1430);
    }
    {
      data_model.enum_constant_MipsInterrupt_1431 = arboretum_create_named_node("/clang/attr/MipsInterrupt");
      arboretum_create_edge(data_model.enum_constant_MipsInterrupt_1431, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MipsInterrupt_1431);
    }
    {
      data_model.enum_constant_MipsLongCall_1432 = arboretum_create_named_node("/clang/attr/MipsLongCall");
      arboretum_create_edge(data_model.enum_constant_MipsLongCall_1432, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MipsLongCall_1432);
    }
    {
      data_model.enum_constant_MipsShortCall_1433 = arboretum_create_named_node("/clang/attr/MipsShortCall");
      arboretum_create_edge(data_model.enum_constant_MipsShortCall_1433, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_MipsShortCall_1433);
    }
    {
      data_model.enum_constant_NSConsumesSelf_1434 = arboretum_create_named_node("/clang/attr/NSConsumesSelf");
      arboretum_create_edge(data_model.enum_constant_NSConsumesSelf_1434, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NSConsumesSelf_1434);
    }
    {
      data_model.enum_constant_NSErrorDomain_1435 = arboretum_create_named_node("/clang/attr/NSErrorDomain");
      arboretum_create_edge(data_model.enum_constant_NSErrorDomain_1435, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NSErrorDomain_1435);
    }
    {
      data_model.enum_constant_NSReturnsAutoreleased_1436 = arboretum_create_named_node("/clang/attr/NSReturnsAutoreleased");
      arboretum_create_edge(data_model.enum_constant_NSReturnsAutoreleased_1436, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NSReturnsAutoreleased_1436);
    }
    {
      data_model.enum_constant_NSReturnsNotRetained_1437 = arboretum_create_named_node("/clang/attr/NSReturnsNotRetained");
      arboretum_create_edge(data_model.enum_constant_NSReturnsNotRetained_1437, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NSReturnsNotRetained_1437);
    }
    {
      data_model.enum_constant_NVPTXKernel_1438 = arboretum_create_named_node("/clang/attr/NVPTXKernel");
      arboretum_create_edge(data_model.enum_constant_NVPTXKernel_1438, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NVPTXKernel_1438);
    }
    {
      data_model.enum_constant_Naked_1439 = arboretum_create_named_node("/clang/attr/Naked");
      arboretum_create_edge(data_model.enum_constant_Naked_1439, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Naked_1439);
    }
    {
      data_model.enum_constant_NoAlias_1440 = arboretum_create_named_node("/clang/attr/NoAlias");
      arboretum_create_edge(data_model.enum_constant_NoAlias_1440, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoAlias_1440);
    }
    {
      data_model.enum_constant_NoCommon_1441 = arboretum_create_named_node("/clang/attr/NoCommon");
      arboretum_create_edge(data_model.enum_constant_NoCommon_1441, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoCommon_1441);
    }
    {
      data_model.enum_constant_NoDebug_1442 = arboretum_create_named_node("/clang/attr/NoDebug");
      arboretum_create_edge(data_model.enum_constant_NoDebug_1442, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoDebug_1442);
    }
    {
      data_model.enum_constant_NoDestroy_1443 = arboretum_create_named_node("/clang/attr/NoDestroy");
      arboretum_create_edge(data_model.enum_constant_NoDestroy_1443, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoDestroy_1443);
    }
    {
      data_model.enum_constant_NoDuplicate_1444 = arboretum_create_named_node("/clang/attr/NoDuplicate");
      arboretum_create_edge(data_model.enum_constant_NoDuplicate_1444, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoDuplicate_1444);
    }
    {
      data_model.enum_constant_NoInstrumentFunction_1445 = arboretum_create_named_node("/clang/attr/NoInstrumentFunction");
      arboretum_create_edge(data_model.enum_constant_NoInstrumentFunction_1445, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoInstrumentFunction_1445);
    }
    {
      data_model.enum_constant_NoMicroMips_1446 = arboretum_create_named_node("/clang/attr/NoMicroMips");
      arboretum_create_edge(data_model.enum_constant_NoMicroMips_1446, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoMicroMips_1446);
    }
    {
      data_model.enum_constant_NoMips16_1447 = arboretum_create_named_node("/clang/attr/NoMips16");
      arboretum_create_edge(data_model.enum_constant_NoMips16_1447, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoMips16_1447);
    }
    {
      data_model.enum_constant_NoProfileFunction_1448 = arboretum_create_named_node("/clang/attr/NoProfileFunction");
      arboretum_create_edge(data_model.enum_constant_NoProfileFunction_1448, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoProfileFunction_1448);
    }
    {
      data_model.enum_constant_NoRandomizeLayout_1449 = arboretum_create_named_node("/clang/attr/NoRandomizeLayout");
      arboretum_create_edge(data_model.enum_constant_NoRandomizeLayout_1449, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoRandomizeLayout_1449);
    }
    {
      data_model.enum_constant_NoReturn_1450 = arboretum_create_named_node("/clang/attr/NoReturn");
      arboretum_create_edge(data_model.enum_constant_NoReturn_1450, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoReturn_1450);
    }
    {
      data_model.enum_constant_NoSanitize_1451 = arboretum_create_named_node("/clang/attr/NoSanitize");
      arboretum_create_edge(data_model.enum_constant_NoSanitize_1451, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoSanitize_1451);
    }
    {
      data_model.enum_constant_NoSpeculativeLoadHardening_1452 = arboretum_create_named_node("/clang/attr/NoSpeculativeLoadHardening");
      arboretum_create_edge(data_model.enum_constant_NoSpeculativeLoadHardening_1452, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoSpeculativeLoadHardening_1452);
    }
    {
      data_model.enum_constant_NoSplitStack_1453 = arboretum_create_named_node("/clang/attr/NoSplitStack");
      arboretum_create_edge(data_model.enum_constant_NoSplitStack_1453, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoSplitStack_1453);
    }
    {
      data_model.enum_constant_NoStackProtector_1454 = arboretum_create_named_node("/clang/attr/NoStackProtector");
      arboretum_create_edge(data_model.enum_constant_NoStackProtector_1454, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoStackProtector_1454);
    }
    {
      data_model.enum_constant_NoThreadSafetyAnalysis_1455 = arboretum_create_named_node("/clang/attr/NoThreadSafetyAnalysis");
      arboretum_create_edge(data_model.enum_constant_NoThreadSafetyAnalysis_1455, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoThreadSafetyAnalysis_1455);
    }
    {
      data_model.enum_constant_NoThrow_1456 = arboretum_create_named_node("/clang/attr/NoThrow");
      arboretum_create_edge(data_model.enum_constant_NoThrow_1456, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoThrow_1456);
    }
    {
      data_model.enum_constant_NoUniqueAddress_1457 = arboretum_create_named_node("/clang/attr/NoUniqueAddress");
      arboretum_create_edge(data_model.enum_constant_NoUniqueAddress_1457, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoUniqueAddress_1457);
    }
    {
      data_model.enum_constant_NoUwtable_1458 = arboretum_create_named_node("/clang/attr/NoUwtable");
      arboretum_create_edge(data_model.enum_constant_NoUwtable_1458, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoUwtable_1458);
    }
    {
      data_model.enum_constant_NotTailCalled_1459 = arboretum_create_named_node("/clang/attr/NotTailCalled");
      arboretum_create_edge(data_model.enum_constant_NotTailCalled_1459, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NotTailCalled_1459);
    }
    {
      data_model.enum_constant_OMPAllocateDecl_1460 = arboretum_create_named_node("/clang/attr/OMPAllocateDecl");
      arboretum_create_edge(data_model.enum_constant_OMPAllocateDecl_1460, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPAllocateDecl_1460);
    }
    {
      data_model.enum_constant_OMPCaptureNoInit_1461 = arboretum_create_named_node("/clang/attr/OMPCaptureNoInit");
      arboretum_create_edge(data_model.enum_constant_OMPCaptureNoInit_1461, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPCaptureNoInit_1461);
    }
    {
      data_model.enum_constant_OMPDeclareTargetDecl_1462 = arboretum_create_named_node("/clang/attr/OMPDeclareTargetDecl");
      arboretum_create_edge(data_model.enum_constant_OMPDeclareTargetDecl_1462, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPDeclareTargetDecl_1462);
    }
    {
      data_model.enum_constant_OMPDeclareVariant_1463 = arboretum_create_named_node("/clang/attr/OMPDeclareVariant");
      arboretum_create_edge(data_model.enum_constant_OMPDeclareVariant_1463, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPDeclareVariant_1463);
    }
    {
      data_model.enum_constant_OMPThreadPrivateDecl_1464 = arboretum_create_named_node("/clang/attr/OMPThreadPrivateDecl");
      arboretum_create_edge(data_model.enum_constant_OMPThreadPrivateDecl_1464, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPThreadPrivateDecl_1464);
    }
    {
      data_model.enum_constant_OSConsumesThis_1465 = arboretum_create_named_node("/clang/attr/OSConsumesThis");
      arboretum_create_edge(data_model.enum_constant_OSConsumesThis_1465, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OSConsumesThis_1465);
    }
    {
      data_model.enum_constant_OSReturnsNotRetained_1466 = arboretum_create_named_node("/clang/attr/OSReturnsNotRetained");
      arboretum_create_edge(data_model.enum_constant_OSReturnsNotRetained_1466, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OSReturnsNotRetained_1466);
    }
    {
      data_model.enum_constant_OSReturnsRetained_1467 = arboretum_create_named_node("/clang/attr/OSReturnsRetained");
      arboretum_create_edge(data_model.enum_constant_OSReturnsRetained_1467, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OSReturnsRetained_1467);
    }
    {
      data_model.enum_constant_OSReturnsRetainedOnNonZero_1468 = arboretum_create_named_node("/clang/attr/OSReturnsRetainedOnNonZero");
      arboretum_create_edge(data_model.enum_constant_OSReturnsRetainedOnNonZero_1468, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OSReturnsRetainedOnNonZero_1468);
    }
    {
      data_model.enum_constant_OSReturnsRetainedOnZero_1469 = arboretum_create_named_node("/clang/attr/OSReturnsRetainedOnZero");
      arboretum_create_edge(data_model.enum_constant_OSReturnsRetainedOnZero_1469, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OSReturnsRetainedOnZero_1469);
    }
    {
      data_model.enum_constant_ObjCBridge_1470 = arboretum_create_named_node("/clang/attr/ObjCBridge");
      arboretum_create_edge(data_model.enum_constant_ObjCBridge_1470, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCBridge_1470);
    }
    {
      data_model.enum_constant_ObjCBridgeMutable_1471 = arboretum_create_named_node("/clang/attr/ObjCBridgeMutable");
      arboretum_create_edge(data_model.enum_constant_ObjCBridgeMutable_1471, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCBridgeMutable_1471);
    }
    {
      data_model.enum_constant_ObjCBridgeRelated_1472 = arboretum_create_named_node("/clang/attr/ObjCBridgeRelated");
      arboretum_create_edge(data_model.enum_constant_ObjCBridgeRelated_1472, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCBridgeRelated_1472);
    }
    {
      data_model.enum_constant_ObjCException_1473 = arboretum_create_named_node("/clang/attr/ObjCException");
      arboretum_create_edge(data_model.enum_constant_ObjCException_1473, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCException_1473);
    }
    {
      data_model.enum_constant_ObjCExplicitProtocolImpl_1474 = arboretum_create_named_node("/clang/attr/ObjCExplicitProtocolImpl");
      arboretum_create_edge(data_model.enum_constant_ObjCExplicitProtocolImpl_1474, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCExplicitProtocolImpl_1474);
    }
    {
      data_model.enum_constant_ObjCExternallyRetained_1475 = arboretum_create_named_node("/clang/attr/ObjCExternallyRetained");
      arboretum_create_edge(data_model.enum_constant_ObjCExternallyRetained_1475, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCExternallyRetained_1475);
    }
    {
      data_model.enum_constant_ObjCIndependentClass_1476 = arboretum_create_named_node("/clang/attr/ObjCIndependentClass");
      arboretum_create_edge(data_model.enum_constant_ObjCIndependentClass_1476, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCIndependentClass_1476);
    }
    {
      data_model.enum_constant_ObjCMethodFamily_1477 = arboretum_create_named_node("/clang/attr/ObjCMethodFamily");
      arboretum_create_edge(data_model.enum_constant_ObjCMethodFamily_1477, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCMethodFamily_1477);
    }
    {
      data_model.enum_constant_ObjCNSObject_1478 = arboretum_create_named_node("/clang/attr/ObjCNSObject");
      arboretum_create_edge(data_model.enum_constant_ObjCNSObject_1478, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCNSObject_1478);
    }
    {
      data_model.enum_constant_ObjCPreciseLifetime_1479 = arboretum_create_named_node("/clang/attr/ObjCPreciseLifetime");
      arboretum_create_edge(data_model.enum_constant_ObjCPreciseLifetime_1479, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCPreciseLifetime_1479);
    }
    {
      data_model.enum_constant_ObjCRequiresPropertyDefs_1480 = arboretum_create_named_node("/clang/attr/ObjCRequiresPropertyDefs");
      arboretum_create_edge(data_model.enum_constant_ObjCRequiresPropertyDefs_1480, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCRequiresPropertyDefs_1480);
    }
    {
      data_model.enum_constant_ObjCRequiresSuper_1481 = arboretum_create_named_node("/clang/attr/ObjCRequiresSuper");
      arboretum_create_edge(data_model.enum_constant_ObjCRequiresSuper_1481, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCRequiresSuper_1481);
    }
    {
      data_model.enum_constant_ObjCReturnsInnerPointer_1482 = arboretum_create_named_node("/clang/attr/ObjCReturnsInnerPointer");
      arboretum_create_edge(data_model.enum_constant_ObjCReturnsInnerPointer_1482, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCReturnsInnerPointer_1482);
    }
    {
      data_model.enum_constant_ObjCRootClass_1483 = arboretum_create_named_node("/clang/attr/ObjCRootClass");
      arboretum_create_edge(data_model.enum_constant_ObjCRootClass_1483, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCRootClass_1483);
    }
    {
      data_model.enum_constant_ObjCSubclassingRestricted_1484 = arboretum_create_named_node("/clang/attr/ObjCSubclassingRestricted");
      arboretum_create_edge(data_model.enum_constant_ObjCSubclassingRestricted_1484, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCSubclassingRestricted_1484);
    }
    {
      data_model.enum_constant_OpenCLIntelReqdSubGroupSize_1485 = arboretum_create_named_node("/clang/attr/OpenCLIntelReqdSubGroupSize");
      arboretum_create_edge(data_model.enum_constant_OpenCLIntelReqdSubGroupSize_1485, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLIntelReqdSubGroupSize_1485);
    }
    {
      data_model.enum_constant_OpenCLKernel_1486 = arboretum_create_named_node("/clang/attr/OpenCLKernel");
      arboretum_create_edge(data_model.enum_constant_OpenCLKernel_1486, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLKernel_1486);
    }
    {
      data_model.enum_constant_OptimizeNone_1487 = arboretum_create_named_node("/clang/attr/OptimizeNone");
      arboretum_create_edge(data_model.enum_constant_OptimizeNone_1487, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OptimizeNone_1487);
    }
    {
      data_model.enum_constant_Override_1488 = arboretum_create_named_node("/clang/attr/Override");
      arboretum_create_edge(data_model.enum_constant_Override_1488, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Override_1488);
    }
    {
      data_model.enum_constant_Owner_1489 = arboretum_create_named_node("/clang/attr/Owner");
      arboretum_create_edge(data_model.enum_constant_Owner_1489, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Owner_1489);
    }
    {
      data_model.enum_constant_Ownership_1490 = arboretum_create_named_node("/clang/attr/Ownership");
      arboretum_create_edge(data_model.enum_constant_Ownership_1490, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Ownership_1490);
    }
    {
      data_model.enum_constant_Packed_1491 = arboretum_create_named_node("/clang/attr/Packed");
      arboretum_create_edge(data_model.enum_constant_Packed_1491, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Packed_1491);
    }
    {
      data_model.enum_constant_ParamTypestate_1492 = arboretum_create_named_node("/clang/attr/ParamTypestate");
      arboretum_create_edge(data_model.enum_constant_ParamTypestate_1492, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ParamTypestate_1492);
    }
    {
      data_model.enum_constant_PatchableFunctionEntry_1493 = arboretum_create_named_node("/clang/attr/PatchableFunctionEntry");
      arboretum_create_edge(data_model.enum_constant_PatchableFunctionEntry_1493, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PatchableFunctionEntry_1493);
    }
    {
      data_model.enum_constant_Pointer_1494 = arboretum_create_named_node("/clang/attr/Pointer");
      arboretum_create_edge(data_model.enum_constant_Pointer_1494, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Pointer_1494);
    }
    {
      data_model.enum_constant_PragmaClangBSSSection_1495 = arboretum_create_named_node("/clang/attr/PragmaClangBSSSection");
      arboretum_create_edge(data_model.enum_constant_PragmaClangBSSSection_1495, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PragmaClangBSSSection_1495);
    }
    {
      data_model.enum_constant_PragmaClangDataSection_1496 = arboretum_create_named_node("/clang/attr/PragmaClangDataSection");
      arboretum_create_edge(data_model.enum_constant_PragmaClangDataSection_1496, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PragmaClangDataSection_1496);
    }
    {
      data_model.enum_constant_PragmaClangRelroSection_1497 = arboretum_create_named_node("/clang/attr/PragmaClangRelroSection");
      arboretum_create_edge(data_model.enum_constant_PragmaClangRelroSection_1497, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PragmaClangRelroSection_1497);
    }
    {
      data_model.enum_constant_PragmaClangRodataSection_1498 = arboretum_create_named_node("/clang/attr/PragmaClangRodataSection");
      arboretum_create_edge(data_model.enum_constant_PragmaClangRodataSection_1498, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PragmaClangRodataSection_1498);
    }
    {
      data_model.enum_constant_PragmaClangTextSection_1499 = arboretum_create_named_node("/clang/attr/PragmaClangTextSection");
      arboretum_create_edge(data_model.enum_constant_PragmaClangTextSection_1499, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PragmaClangTextSection_1499);
    }
    {
      data_model.enum_constant_PreferredName_1500 = arboretum_create_named_node("/clang/attr/PreferredName");
      arboretum_create_edge(data_model.enum_constant_PreferredName_1500, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PreferredName_1500);
    }
    {
      data_model.enum_constant_PreferredType_1501 = arboretum_create_named_node("/clang/attr/PreferredType");
      arboretum_create_edge(data_model.enum_constant_PreferredType_1501, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PreferredType_1501);
    }
    {
      data_model.enum_constant_PtGuardedBy_1502 = arboretum_create_named_node("/clang/attr/PtGuardedBy");
      arboretum_create_edge(data_model.enum_constant_PtGuardedBy_1502, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PtGuardedBy_1502);
    }
    {
      data_model.enum_constant_PtGuardedVar_1503 = arboretum_create_named_node("/clang/attr/PtGuardedVar");
      arboretum_create_edge(data_model.enum_constant_PtGuardedVar_1503, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_PtGuardedVar_1503);
    }
    {
      data_model.enum_constant_Pure_1504 = arboretum_create_named_node("/clang/attr/Pure");
      arboretum_create_edge(data_model.enum_constant_Pure_1504, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Pure_1504);
    }
    {
      data_model.enum_constant_RISCVInterrupt_1505 = arboretum_create_named_node("/clang/attr/RISCVInterrupt");
      arboretum_create_edge(data_model.enum_constant_RISCVInterrupt_1505, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RISCVInterrupt_1505);
    }
    {
      data_model.enum_constant_RandomizeLayout_1506 = arboretum_create_named_node("/clang/attr/RandomizeLayout");
      arboretum_create_edge(data_model.enum_constant_RandomizeLayout_1506, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RandomizeLayout_1506);
    }
    {
      data_model.enum_constant_ReadOnlyPlacement_1507 = arboretum_create_named_node("/clang/attr/ReadOnlyPlacement");
      arboretum_create_edge(data_model.enum_constant_ReadOnlyPlacement_1507, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReadOnlyPlacement_1507);
    }
    {
      data_model.enum_constant_Reinitializes_1508 = arboretum_create_named_node("/clang/attr/Reinitializes");
      arboretum_create_edge(data_model.enum_constant_Reinitializes_1508, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Reinitializes_1508);
    }
    {
      data_model.enum_constant_ReleaseCapability_1509 = arboretum_create_named_node("/clang/attr/ReleaseCapability");
      arboretum_create_edge(data_model.enum_constant_ReleaseCapability_1509, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReleaseCapability_1509);
    }
    {
      data_model.enum_constant_ReqdWorkGroupSize_1510 = arboretum_create_named_node("/clang/attr/ReqdWorkGroupSize");
      arboretum_create_edge(data_model.enum_constant_ReqdWorkGroupSize_1510, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReqdWorkGroupSize_1510);
    }
    {
      data_model.enum_constant_RequiresCapability_1511 = arboretum_create_named_node("/clang/attr/RequiresCapability");
      arboretum_create_edge(data_model.enum_constant_RequiresCapability_1511, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RequiresCapability_1511);
    }
    {
      data_model.enum_constant_Restrict_1512 = arboretum_create_named_node("/clang/attr/Restrict");
      arboretum_create_edge(data_model.enum_constant_Restrict_1512, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Restrict_1512);
    }
    {
      data_model.enum_constant_Retain_1513 = arboretum_create_named_node("/clang/attr/Retain");
      arboretum_create_edge(data_model.enum_constant_Retain_1513, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Retain_1513);
    }
    {
      data_model.enum_constant_ReturnTypestate_1514 = arboretum_create_named_node("/clang/attr/ReturnTypestate");
      arboretum_create_edge(data_model.enum_constant_ReturnTypestate_1514, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReturnTypestate_1514);
    }
    {
      data_model.enum_constant_ReturnsNonNull_1515 = arboretum_create_named_node("/clang/attr/ReturnsNonNull");
      arboretum_create_edge(data_model.enum_constant_ReturnsNonNull_1515, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReturnsNonNull_1515);
    }
    {
      data_model.enum_constant_ReturnsTwice_1516 = arboretum_create_named_node("/clang/attr/ReturnsTwice");
      arboretum_create_edge(data_model.enum_constant_ReturnsTwice_1516, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ReturnsTwice_1516);
    }
    {
      data_model.enum_constant_SYCLKernel_1517 = arboretum_create_named_node("/clang/attr/SYCLKernel");
      arboretum_create_edge(data_model.enum_constant_SYCLKernel_1517, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SYCLKernel_1517);
    }
    {
      data_model.enum_constant_SYCLSpecialClass_1518 = arboretum_create_named_node("/clang/attr/SYCLSpecialClass");
      arboretum_create_edge(data_model.enum_constant_SYCLSpecialClass_1518, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SYCLSpecialClass_1518);
    }
    {
      data_model.enum_constant_ScopedLockable_1519 = arboretum_create_named_node("/clang/attr/ScopedLockable");
      arboretum_create_edge(data_model.enum_constant_ScopedLockable_1519, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ScopedLockable_1519);
    }
    {
      data_model.enum_constant_Section_1520 = arboretum_create_named_node("/clang/attr/Section");
      arboretum_create_edge(data_model.enum_constant_Section_1520, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Section_1520);
    }
    {
      data_model.enum_constant_SelectAny_1521 = arboretum_create_named_node("/clang/attr/SelectAny");
      arboretum_create_edge(data_model.enum_constant_SelectAny_1521, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SelectAny_1521);
    }
    {
      data_model.enum_constant_Sentinel_1522 = arboretum_create_named_node("/clang/attr/Sentinel");
      arboretum_create_edge(data_model.enum_constant_Sentinel_1522, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Sentinel_1522);
    }
    {
      data_model.enum_constant_SetTypestate_1523 = arboretum_create_named_node("/clang/attr/SetTypestate");
      arboretum_create_edge(data_model.enum_constant_SetTypestate_1523, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SetTypestate_1523);
    }
    {
      data_model.enum_constant_SharedTrylockFunction_1524 = arboretum_create_named_node("/clang/attr/SharedTrylockFunction");
      arboretum_create_edge(data_model.enum_constant_SharedTrylockFunction_1524, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SharedTrylockFunction_1524);
    }
    {
      data_model.enum_constant_SpeculativeLoadHardening_1525 = arboretum_create_named_node("/clang/attr/SpeculativeLoadHardening");
      arboretum_create_edge(data_model.enum_constant_SpeculativeLoadHardening_1525, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SpeculativeLoadHardening_1525);
    }
    {
      data_model.enum_constant_StandaloneDebug_1526 = arboretum_create_named_node("/clang/attr/StandaloneDebug");
      arboretum_create_edge(data_model.enum_constant_StandaloneDebug_1526, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_StandaloneDebug_1526);
    }
    {
      data_model.enum_constant_StrictFP_1527 = arboretum_create_named_node("/clang/attr/StrictFP");
      arboretum_create_edge(data_model.enum_constant_StrictFP_1527, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_StrictFP_1527);
    }
    {
      data_model.enum_constant_StrictGuardStackCheck_1528 = arboretum_create_named_node("/clang/attr/StrictGuardStackCheck");
      arboretum_create_edge(data_model.enum_constant_StrictGuardStackCheck_1528, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_StrictGuardStackCheck_1528);
    }
    {
      data_model.enum_constant_SwiftAsync_1529 = arboretum_create_named_node("/clang/attr/SwiftAsync");
      arboretum_create_edge(data_model.enum_constant_SwiftAsync_1529, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftAsync_1529);
    }
    {
      data_model.enum_constant_SwiftAsyncError_1530 = arboretum_create_named_node("/clang/attr/SwiftAsyncError");
      arboretum_create_edge(data_model.enum_constant_SwiftAsyncError_1530, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftAsyncError_1530);
    }
    {
      data_model.enum_constant_SwiftAsyncName_1531 = arboretum_create_named_node("/clang/attr/SwiftAsyncName");
      arboretum_create_edge(data_model.enum_constant_SwiftAsyncName_1531, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftAsyncName_1531);
    }
    {
      data_model.enum_constant_SwiftAttr_1532 = arboretum_create_named_node("/clang/attr/SwiftAttr");
      arboretum_create_edge(data_model.enum_constant_SwiftAttr_1532, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftAttr_1532);
    }
    {
      data_model.enum_constant_SwiftBridge_1533 = arboretum_create_named_node("/clang/attr/SwiftBridge");
      arboretum_create_edge(data_model.enum_constant_SwiftBridge_1533, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftBridge_1533);
    }
    {
      data_model.enum_constant_SwiftBridgedTypedef_1534 = arboretum_create_named_node("/clang/attr/SwiftBridgedTypedef");
      arboretum_create_edge(data_model.enum_constant_SwiftBridgedTypedef_1534, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftBridgedTypedef_1534);
    }
    {
      data_model.enum_constant_SwiftError_1535 = arboretum_create_named_node("/clang/attr/SwiftError");
      arboretum_create_edge(data_model.enum_constant_SwiftError_1535, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftError_1535);
    }
    {
      data_model.enum_constant_SwiftImportAsNonGeneric_1536 = arboretum_create_named_node("/clang/attr/SwiftImportAsNonGeneric");
      arboretum_create_edge(data_model.enum_constant_SwiftImportAsNonGeneric_1536, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftImportAsNonGeneric_1536);
    }
    {
      data_model.enum_constant_SwiftImportPropertyAsAccessors_1537 = arboretum_create_named_node("/clang/attr/SwiftImportPropertyAsAccessors");
      arboretum_create_edge(data_model.enum_constant_SwiftImportPropertyAsAccessors_1537, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftImportPropertyAsAccessors_1537);
    }
    {
      data_model.enum_constant_SwiftName_1538 = arboretum_create_named_node("/clang/attr/SwiftName");
      arboretum_create_edge(data_model.enum_constant_SwiftName_1538, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftName_1538);
    }
    {
      data_model.enum_constant_SwiftNewType_1539 = arboretum_create_named_node("/clang/attr/SwiftNewType");
      arboretum_create_edge(data_model.enum_constant_SwiftNewType_1539, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftNewType_1539);
    }
    {
      data_model.enum_constant_SwiftPrivate_1540 = arboretum_create_named_node("/clang/attr/SwiftPrivate");
      arboretum_create_edge(data_model.enum_constant_SwiftPrivate_1540, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftPrivate_1540);
    }
    {
      data_model.enum_constant_TLSModel_1541 = arboretum_create_named_node("/clang/attr/TLSModel");
      arboretum_create_edge(data_model.enum_constant_TLSModel_1541, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TLSModel_1541);
    }
    {
      data_model.enum_constant_Target_1542 = arboretum_create_named_node("/clang/attr/Target");
      arboretum_create_edge(data_model.enum_constant_Target_1542, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Target_1542);
    }
    {
      data_model.enum_constant_TargetClones_1543 = arboretum_create_named_node("/clang/attr/TargetClones");
      arboretum_create_edge(data_model.enum_constant_TargetClones_1543, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TargetClones_1543);
    }
    {
      data_model.enum_constant_TargetVersion_1544 = arboretum_create_named_node("/clang/attr/TargetVersion");
      arboretum_create_edge(data_model.enum_constant_TargetVersion_1544, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TargetVersion_1544);
    }
    {
      data_model.enum_constant_TestTypestate_1545 = arboretum_create_named_node("/clang/attr/TestTypestate");
      arboretum_create_edge(data_model.enum_constant_TestTypestate_1545, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TestTypestate_1545);
    }
    {
      data_model.enum_constant_TransparentUnion_1546 = arboretum_create_named_node("/clang/attr/TransparentUnion");
      arboretum_create_edge(data_model.enum_constant_TransparentUnion_1546, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TransparentUnion_1546);
    }
    {
      data_model.enum_constant_TrivialABI_1547 = arboretum_create_named_node("/clang/attr/TrivialABI");
      arboretum_create_edge(data_model.enum_constant_TrivialABI_1547, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TrivialABI_1547);
    }
    {
      data_model.enum_constant_TryAcquireCapability_1548 = arboretum_create_named_node("/clang/attr/TryAcquireCapability");
      arboretum_create_edge(data_model.enum_constant_TryAcquireCapability_1548, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TryAcquireCapability_1548);
    }
    {
      data_model.enum_constant_TypeTagForDatatype_1549 = arboretum_create_named_node("/clang/attr/TypeTagForDatatype");
      arboretum_create_edge(data_model.enum_constant_TypeTagForDatatype_1549, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeTagForDatatype_1549);
    }
    {
      data_model.enum_constant_TypeVisibility_1550 = arboretum_create_named_node("/clang/attr/TypeVisibility");
      arboretum_create_edge(data_model.enum_constant_TypeVisibility_1550, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_TypeVisibility_1550);
    }
    {
      data_model.enum_constant_Unavailable_1551 = arboretum_create_named_node("/clang/attr/Unavailable");
      arboretum_create_edge(data_model.enum_constant_Unavailable_1551, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unavailable_1551);
    }
    {
      data_model.enum_constant_Uninitialized_1552 = arboretum_create_named_node("/clang/attr/Uninitialized");
      arboretum_create_edge(data_model.enum_constant_Uninitialized_1552, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Uninitialized_1552);
    }
    {
      data_model.enum_constant_UnsafeBufferUsage_1553 = arboretum_create_named_node("/clang/attr/UnsafeBufferUsage");
      arboretum_create_edge(data_model.enum_constant_UnsafeBufferUsage_1553, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UnsafeBufferUsage_1553);
    }
    {
      data_model.enum_constant_Unused_1554 = arboretum_create_named_node("/clang/attr/Unused");
      arboretum_create_edge(data_model.enum_constant_Unused_1554, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Unused_1554);
    }
    {
      data_model.enum_constant_Used_1555 = arboretum_create_named_node("/clang/attr/Used");
      arboretum_create_edge(data_model.enum_constant_Used_1555, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Used_1555);
    }
    {
      data_model.enum_constant_UsingIfExists_1556 = arboretum_create_named_node("/clang/attr/UsingIfExists");
      arboretum_create_edge(data_model.enum_constant_UsingIfExists_1556, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_UsingIfExists_1556);
    }
    {
      data_model.enum_constant_Uuid_1557 = arboretum_create_named_node("/clang/attr/Uuid");
      arboretum_create_edge(data_model.enum_constant_Uuid_1557, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Uuid_1557);
    }
    {
      data_model.enum_constant_VecReturn_1558 = arboretum_create_named_node("/clang/attr/VecReturn");
      arboretum_create_edge(data_model.enum_constant_VecReturn_1558, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VecReturn_1558);
    }
    {
      data_model.enum_constant_VecTypeHint_1559 = arboretum_create_named_node("/clang/attr/VecTypeHint");
      arboretum_create_edge(data_model.enum_constant_VecTypeHint_1559, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_VecTypeHint_1559);
    }
    {
      data_model.enum_constant_Visibility_1560 = arboretum_create_named_node("/clang/attr/Visibility");
      arboretum_create_edge(data_model.enum_constant_Visibility_1560, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Visibility_1560);
    }
    {
      data_model.enum_constant_WarnUnused_1561 = arboretum_create_named_node("/clang/attr/WarnUnused");
      arboretum_create_edge(data_model.enum_constant_WarnUnused_1561, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WarnUnused_1561);
    }
    {
      data_model.enum_constant_WarnUnusedResult_1562 = arboretum_create_named_node("/clang/attr/WarnUnusedResult");
      arboretum_create_edge(data_model.enum_constant_WarnUnusedResult_1562, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WarnUnusedResult_1562);
    }
    {
      data_model.enum_constant_Weak_1563 = arboretum_create_named_node("/clang/attr/Weak");
      arboretum_create_edge(data_model.enum_constant_Weak_1563, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Weak_1563);
    }
    {
      data_model.enum_constant_WeakImport_1564 = arboretum_create_named_node("/clang/attr/WeakImport");
      arboretum_create_edge(data_model.enum_constant_WeakImport_1564, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WeakImport_1564);
    }
    {
      data_model.enum_constant_WeakRef_1565 = arboretum_create_named_node("/clang/attr/WeakRef");
      arboretum_create_edge(data_model.enum_constant_WeakRef_1565, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WeakRef_1565);
    }
    {
      data_model.enum_constant_WebAssemblyExportName_1566 = arboretum_create_named_node("/clang/attr/WebAssemblyExportName");
      arboretum_create_edge(data_model.enum_constant_WebAssemblyExportName_1566, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WebAssemblyExportName_1566);
    }
    {
      data_model.enum_constant_WebAssemblyImportModule_1567 = arboretum_create_named_node("/clang/attr/WebAssemblyImportModule");
      arboretum_create_edge(data_model.enum_constant_WebAssemblyImportModule_1567, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WebAssemblyImportModule_1567);
    }
    {
      data_model.enum_constant_WebAssemblyImportName_1568 = arboretum_create_named_node("/clang/attr/WebAssemblyImportName");
      arboretum_create_edge(data_model.enum_constant_WebAssemblyImportName_1568, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WebAssemblyImportName_1568);
    }
    {
      data_model.enum_constant_WorkGroupSizeHint_1569 = arboretum_create_named_node("/clang/attr/WorkGroupSizeHint");
      arboretum_create_edge(data_model.enum_constant_WorkGroupSizeHint_1569, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_WorkGroupSizeHint_1569);
    }
    {
      data_model.enum_constant_X86ForceAlignArgPointer_1570 = arboretum_create_named_node("/clang/attr/X86ForceAlignArgPointer");
      arboretum_create_edge(data_model.enum_constant_X86ForceAlignArgPointer_1570, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_X86ForceAlignArgPointer_1570);
    }
    {
      data_model.enum_constant_XRayInstrument_1571 = arboretum_create_named_node("/clang/attr/XRayInstrument");
      arboretum_create_edge(data_model.enum_constant_XRayInstrument_1571, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_XRayInstrument_1571);
    }
    {
      data_model.enum_constant_XRayLogArgs_1572 = arboretum_create_named_node("/clang/attr/XRayLogArgs");
      arboretum_create_edge(data_model.enum_constant_XRayLogArgs_1572, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_XRayLogArgs_1572);
    }
    {
      data_model.enum_constant_ZeroCallUsedRegs_1573 = arboretum_create_named_node("/clang/attr/ZeroCallUsedRegs");
      arboretum_create_edge(data_model.enum_constant_ZeroCallUsedRegs_1573, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ZeroCallUsedRegs_1573);
    }
    {
      data_model.enum_constant_AbiTag_1574 = arboretum_create_named_node("/clang/attr/AbiTag");
      arboretum_create_edge(data_model.enum_constant_AbiTag_1574, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AbiTag_1574);
    }
    {
      data_model.enum_constant_Alias_1575 = arboretum_create_named_node("/clang/attr/Alias");
      arboretum_create_edge(data_model.enum_constant_Alias_1575, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Alias_1575);
    }
    {
      data_model.enum_constant_AlignValue_1576 = arboretum_create_named_node("/clang/attr/AlignValue");
      arboretum_create_edge(data_model.enum_constant_AlignValue_1576, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_AlignValue_1576);
    }
    {
      data_model.enum_constant_BuiltinAlias_1577 = arboretum_create_named_node("/clang/attr/BuiltinAlias");
      arboretum_create_edge(data_model.enum_constant_BuiltinAlias_1577, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_BuiltinAlias_1577);
    }
    {
      data_model.enum_constant_CalledOnce_1578 = arboretum_create_named_node("/clang/attr/CalledOnce");
      arboretum_create_edge(data_model.enum_constant_CalledOnce_1578, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_CalledOnce_1578);
    }
    {
      data_model.enum_constant_IFunc_1579 = arboretum_create_named_node("/clang/attr/IFunc");
      arboretum_create_edge(data_model.enum_constant_IFunc_1579, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_IFunc_1579);
    }
    {
      data_model.enum_constant_InitSeg_1580 = arboretum_create_named_node("/clang/attr/InitSeg");
      arboretum_create_edge(data_model.enum_constant_InitSeg_1580, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_InitSeg_1580);
    }
    {
      data_model.enum_constant_LoaderUninitialized_1581 = arboretum_create_named_node("/clang/attr/LoaderUninitialized");
      arboretum_create_edge(data_model.enum_constant_LoaderUninitialized_1581, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LoaderUninitialized_1581);
    }
    {
      data_model.enum_constant_LoopHint_1582 = arboretum_create_named_node("/clang/attr/LoopHint");
      arboretum_create_edge(data_model.enum_constant_LoopHint_1582, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LoopHint_1582);
    }
    {
      data_model.enum_constant_Mode_1583 = arboretum_create_named_node("/clang/attr/Mode");
      arboretum_create_edge(data_model.enum_constant_Mode_1583, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Mode_1583);
    }
    {
      data_model.enum_constant_NoBuiltin_1584 = arboretum_create_named_node("/clang/attr/NoBuiltin");
      arboretum_create_edge(data_model.enum_constant_NoBuiltin_1584, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoBuiltin_1584);
    }
    {
      data_model.enum_constant_NoEscape_1585 = arboretum_create_named_node("/clang/attr/NoEscape");
      arboretum_create_edge(data_model.enum_constant_NoEscape_1585, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_NoEscape_1585);
    }
    {
      data_model.enum_constant_OMPCaptureKind_1586 = arboretum_create_named_node("/clang/attr/OMPCaptureKind");
      arboretum_create_edge(data_model.enum_constant_OMPCaptureKind_1586, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPCaptureKind_1586);
    }
    {
      data_model.enum_constant_OMPDeclareSimdDecl_1587 = arboretum_create_named_node("/clang/attr/OMPDeclareSimdDecl");
      arboretum_create_edge(data_model.enum_constant_OMPDeclareSimdDecl_1587, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPDeclareSimdDecl_1587);
    }
    {
      data_model.enum_constant_OMPReferencedVar_1588 = arboretum_create_named_node("/clang/attr/OMPReferencedVar");
      arboretum_create_edge(data_model.enum_constant_OMPReferencedVar_1588, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OMPReferencedVar_1588);
    }
    {
      data_model.enum_constant_ObjCBoxable_1589 = arboretum_create_named_node("/clang/attr/ObjCBoxable");
      arboretum_create_edge(data_model.enum_constant_ObjCBoxable_1589, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCBoxable_1589);
    }
    {
      data_model.enum_constant_ObjCClassStub_1590 = arboretum_create_named_node("/clang/attr/ObjCClassStub");
      arboretum_create_edge(data_model.enum_constant_ObjCClassStub_1590, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCClassStub_1590);
    }
    {
      data_model.enum_constant_ObjCDesignatedInitializer_1591 = arboretum_create_named_node("/clang/attr/ObjCDesignatedInitializer");
      arboretum_create_edge(data_model.enum_constant_ObjCDesignatedInitializer_1591, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCDesignatedInitializer_1591);
    }
    {
      data_model.enum_constant_ObjCDirect_1592 = arboretum_create_named_node("/clang/attr/ObjCDirect");
      arboretum_create_edge(data_model.enum_constant_ObjCDirect_1592, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCDirect_1592);
    }
    {
      data_model.enum_constant_ObjCDirectMembers_1593 = arboretum_create_named_node("/clang/attr/ObjCDirectMembers");
      arboretum_create_edge(data_model.enum_constant_ObjCDirectMembers_1593, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCDirectMembers_1593);
    }
    {
      data_model.enum_constant_ObjCNonLazyClass_1594 = arboretum_create_named_node("/clang/attr/ObjCNonLazyClass");
      arboretum_create_edge(data_model.enum_constant_ObjCNonLazyClass_1594, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCNonLazyClass_1594);
    }
    {
      data_model.enum_constant_ObjCNonRuntimeProtocol_1595 = arboretum_create_named_node("/clang/attr/ObjCNonRuntimeProtocol");
      arboretum_create_edge(data_model.enum_constant_ObjCNonRuntimeProtocol_1595, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCNonRuntimeProtocol_1595);
    }
    {
      data_model.enum_constant_ObjCRuntimeName_1596 = arboretum_create_named_node("/clang/attr/ObjCRuntimeName");
      arboretum_create_edge(data_model.enum_constant_ObjCRuntimeName_1596, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCRuntimeName_1596);
    }
    {
      data_model.enum_constant_ObjCRuntimeVisible_1597 = arboretum_create_named_node("/clang/attr/ObjCRuntimeVisible");
      arboretum_create_edge(data_model.enum_constant_ObjCRuntimeVisible_1597, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_ObjCRuntimeVisible_1597);
    }
    {
      data_model.enum_constant_OpenCLAccess_1598 = arboretum_create_named_node("/clang/attr/OpenCLAccess");
      arboretum_create_edge(data_model.enum_constant_OpenCLAccess_1598, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_OpenCLAccess_1598);
    }
    {
      data_model.enum_constant_Overloadable_1599 = arboretum_create_named_node("/clang/attr/Overloadable");
      arboretum_create_edge(data_model.enum_constant_Overloadable_1599, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Overloadable_1599);
    }
    {
      data_model.enum_constant_RenderScriptKernel_1600 = arboretum_create_named_node("/clang/attr/RenderScriptKernel");
      arboretum_create_edge(data_model.enum_constant_RenderScriptKernel_1600, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_RenderScriptKernel_1600);
    }
    {
      data_model.enum_constant_SwiftObjCMembers_1601 = arboretum_create_named_node("/clang/attr/SwiftObjCMembers");
      arboretum_create_edge(data_model.enum_constant_SwiftObjCMembers_1601, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftObjCMembers_1601);
    }
    {
      data_model.enum_constant_SwiftVersionedAddition_1602 = arboretum_create_named_node("/clang/attr/SwiftVersionedAddition");
      arboretum_create_edge(data_model.enum_constant_SwiftVersionedAddition_1602, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftVersionedAddition_1602);
    }
    {
      data_model.enum_constant_SwiftVersionedRemoval_1603 = arboretum_create_named_node("/clang/attr/SwiftVersionedRemoval");
      arboretum_create_edge(data_model.enum_constant_SwiftVersionedRemoval_1603, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_SwiftVersionedRemoval_1603);
    }
    {
      data_model.enum_constant_Thread_1604 = arboretum_create_named_node("/clang/attr/Thread");
      arboretum_create_edge(data_model.enum_constant_Thread_1604, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_Thread_1604);
    }
    {
      data_model.enum_constant_FirstAttr_1605 = arboretum_create_named_node("/clang/attr/FirstAttr");
      arboretum_create_edge(data_model.enum_constant_FirstAttr_1605, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstAttr_1605);
    }
    {
      data_model.enum_constant_LastAttr_1606 = arboretum_create_named_node("/clang/attr/LastAttr");
      arboretum_create_edge(data_model.enum_constant_LastAttr_1606, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastAttr_1606);
    }
    {
      data_model.enum_constant_FirstTypeAttr_1607 = arboretum_create_named_node("/clang/attr/FirstTypeAttr");
      arboretum_create_edge(data_model.enum_constant_FirstTypeAttr_1607, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstTypeAttr_1607);
    }
    {
      data_model.enum_constant_LastTypeAttr_1608 = arboretum_create_named_node("/clang/attr/LastTypeAttr");
      arboretum_create_edge(data_model.enum_constant_LastTypeAttr_1608, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastTypeAttr_1608);
    }
    {
      data_model.enum_constant_FirstStmtAttr_1609 = arboretum_create_named_node("/clang/attr/FirstStmtAttr");
      arboretum_create_edge(data_model.enum_constant_FirstStmtAttr_1609, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstStmtAttr_1609);
    }
    {
      data_model.enum_constant_LastStmtAttr_1610 = arboretum_create_named_node("/clang/attr/LastStmtAttr");
      arboretum_create_edge(data_model.enum_constant_LastStmtAttr_1610, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastStmtAttr_1610);
    }
    {
      data_model.enum_constant_FirstDeclOrStmtAttr_1611 = arboretum_create_named_node("/clang/attr/FirstDeclOrStmtAttr");
      arboretum_create_edge(data_model.enum_constant_FirstDeclOrStmtAttr_1611, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstDeclOrStmtAttr_1611);
    }
    {
      data_model.enum_constant_LastDeclOrStmtAttr_1612 = arboretum_create_named_node("/clang/attr/LastDeclOrStmtAttr");
      arboretum_create_edge(data_model.enum_constant_LastDeclOrStmtAttr_1612, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastDeclOrStmtAttr_1612);
    }
    {
      data_model.enum_constant_FirstInheritableAttr_1613 = arboretum_create_named_node("/clang/attr/FirstInheritableAttr");
      arboretum_create_edge(data_model.enum_constant_FirstInheritableAttr_1613, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstInheritableAttr_1613);
    }
    {
      data_model.enum_constant_LastInheritableAttr_1614 = arboretum_create_named_node("/clang/attr/LastInheritableAttr");
      arboretum_create_edge(data_model.enum_constant_LastInheritableAttr_1614, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastInheritableAttr_1614);
    }
    {
      data_model.enum_constant_FirstDeclOrTypeAttr_1615 = arboretum_create_named_node("/clang/attr/FirstDeclOrTypeAttr");
      arboretum_create_edge(data_model.enum_constant_FirstDeclOrTypeAttr_1615, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstDeclOrTypeAttr_1615);
    }
    {
      data_model.enum_constant_LastDeclOrTypeAttr_1616 = arboretum_create_named_node("/clang/attr/LastDeclOrTypeAttr");
      arboretum_create_edge(data_model.enum_constant_LastDeclOrTypeAttr_1616, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastDeclOrTypeAttr_1616);
    }
    {
      data_model.enum_constant_FirstInheritableParamAttr_1617 = arboretum_create_named_node("/clang/attr/FirstInheritableParamAttr");
      arboretum_create_edge(data_model.enum_constant_FirstInheritableParamAttr_1617, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstInheritableParamAttr_1617);
    }
    {
      data_model.enum_constant_LastInheritableParamAttr_1618 = arboretum_create_named_node("/clang/attr/LastInheritableParamAttr");
      arboretum_create_edge(data_model.enum_constant_LastInheritableParamAttr_1618, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastInheritableParamAttr_1618);
    }
    {
      data_model.enum_constant_FirstParameterABIAttr_1619 = arboretum_create_named_node("/clang/attr/FirstParameterABIAttr");
      arboretum_create_edge(data_model.enum_constant_FirstParameterABIAttr_1619, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstParameterABIAttr_1619);
    }
    {
      data_model.enum_constant_LastParameterABIAttr_1620 = arboretum_create_named_node("/clang/attr/LastParameterABIAttr");
      arboretum_create_edge(data_model.enum_constant_LastParameterABIAttr_1620, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastParameterABIAttr_1620);
    }
    {
      data_model.enum_constant_FirstHLSLAnnotationAttr_1621 = arboretum_create_named_node("/clang/attr/FirstHLSLAnnotationAttr");
      arboretum_create_edge(data_model.enum_constant_FirstHLSLAnnotationAttr_1621, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_FirstHLSLAnnotationAttr_1621);
    }
    {
      data_model.enum_constant_LastHLSLAnnotationAttr_1622 = arboretum_create_named_node("/clang/attr/LastHLSLAnnotationAttr");
      arboretum_create_edge(data_model.enum_constant_LastHLSLAnnotationAttr_1622, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_LastHLSLAnnotationAttr_1622);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  {
    data_model.enum_Semantics_1623 = arboretum_create_named_node("/llvm/APFloatBase/Semantics");
    arboretum_create_edge(data_model.enum_Semantics_1623, data_model.meta_class_, data_model.EnumDecl);
     std::vector<Entity*> enumerators;
    {
      data_model.enum_constant_S_IEEEhalf_1624 = arboretum_create_named_node("/llvm/APFloatBase/S_IEEEhalf");
      arboretum_create_edge(data_model.enum_constant_S_IEEEhalf_1624, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_IEEEhalf_1624);
    }
    {
      data_model.enum_constant_S_BFloat_1625 = arboretum_create_named_node("/llvm/APFloatBase/S_BFloat");
      arboretum_create_edge(data_model.enum_constant_S_BFloat_1625, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_BFloat_1625);
    }
    {
      data_model.enum_constant_S_IEEEsingle_1626 = arboretum_create_named_node("/llvm/APFloatBase/S_IEEEsingle");
      arboretum_create_edge(data_model.enum_constant_S_IEEEsingle_1626, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_IEEEsingle_1626);
    }
    {
      data_model.enum_constant_S_IEEEdouble_1627 = arboretum_create_named_node("/llvm/APFloatBase/S_IEEEdouble");
      arboretum_create_edge(data_model.enum_constant_S_IEEEdouble_1627, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_IEEEdouble_1627);
    }
    {
      data_model.enum_constant_S_IEEEquad_1628 = arboretum_create_named_node("/llvm/APFloatBase/S_IEEEquad");
      arboretum_create_edge(data_model.enum_constant_S_IEEEquad_1628, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_IEEEquad_1628);
    }
    {
      data_model.enum_constant_S_PPCDoubleDouble_1629 = arboretum_create_named_node("/llvm/APFloatBase/S_PPCDoubleDouble");
      arboretum_create_edge(data_model.enum_constant_S_PPCDoubleDouble_1629, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_PPCDoubleDouble_1629);
    }
    {
      data_model.enum_constant_S_Float8E5M2_1630 = arboretum_create_named_node("/llvm/APFloatBase/S_Float8E5M2");
      arboretum_create_edge(data_model.enum_constant_S_Float8E5M2_1630, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_Float8E5M2_1630);
    }
    {
      data_model.enum_constant_S_Float8E5M2FNUZ_1631 = arboretum_create_named_node("/llvm/APFloatBase/S_Float8E5M2FNUZ");
      arboretum_create_edge(data_model.enum_constant_S_Float8E5M2FNUZ_1631, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_Float8E5M2FNUZ_1631);
    }
    {
      data_model.enum_constant_S_Float8E4M3FN_1632 = arboretum_create_named_node("/llvm/APFloatBase/S_Float8E4M3FN");
      arboretum_create_edge(data_model.enum_constant_S_Float8E4M3FN_1632, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_Float8E4M3FN_1632);
    }
    {
      data_model.enum_constant_S_Float8E4M3FNUZ_1633 = arboretum_create_named_node("/llvm/APFloatBase/S_Float8E4M3FNUZ");
      arboretum_create_edge(data_model.enum_constant_S_Float8E4M3FNUZ_1633, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_Float8E4M3FNUZ_1633);
    }
    {
      data_model.enum_constant_S_Float8E4M3B11FNUZ_1634 = arboretum_create_named_node("/llvm/APFloatBase/S_Float8E4M3B11FNUZ");
      arboretum_create_edge(data_model.enum_constant_S_Float8E4M3B11FNUZ_1634, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_Float8E4M3B11FNUZ_1634);
    }
    {
      data_model.enum_constant_S_FloatTF32_1635 = arboretum_create_named_node("/llvm/APFloatBase/S_FloatTF32");
      arboretum_create_edge(data_model.enum_constant_S_FloatTF32_1635, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_FloatTF32_1635);
    }
    {
      data_model.enum_constant_S_x87DoubleExtended_1636 = arboretum_create_named_node("/llvm/APFloatBase/S_x87DoubleExtended");
      arboretum_create_edge(data_model.enum_constant_S_x87DoubleExtended_1636, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_x87DoubleExtended_1636);
    }
    {
      data_model.enum_constant_S_MaxSemantics_1637 = arboretum_create_named_node("/llvm/APFloatBase/S_MaxSemantics");
      arboretum_create_edge(data_model.enum_constant_S_MaxSemantics_1637, data_model.meta_class_, data_model.EnumConstantDecl);
      enumerators.push_back(data_model.enum_constant_S_MaxSemantics_1637);
    }
    data_model.arboretum_node_for(data_model.EnumConstantDecl, enumerators);
  }
  return data_model;
}

Entity* DataModel::resolve(clang::APValue::ValueKind e) {
  switch(e) {
    case clang::APValue::None: return enum_constant_None_1;
    case clang::APValue::Indeterminate: return enum_constant_Indeterminate_2;
    case clang::APValue::Int: return enum_constant_Int_3;
    case clang::APValue::Float: return enum_constant_Float_4;
    case clang::APValue::FixedPoint: return enum_constant_FixedPoint_5;
    case clang::APValue::ComplexInt: return enum_constant_ComplexInt_6;
    case clang::APValue::ComplexFloat: return enum_constant_ComplexFloat_7;
    case clang::APValue::LValue: return enum_constant_LValue_8;
    case clang::APValue::Vector: return enum_constant_Vector_9;
    case clang::APValue::Array: return enum_constant_Array_10;
    case clang::APValue::Struct: return enum_constant_Struct_11;
    case clang::APValue::Union: return enum_constant_Union_12;
    case clang::APValue::MemberPointer: return enum_constant_MemberPointer_13;
    case clang::APValue::AddrLabelDiff: return enum_constant_AddrLabelDiff_14;
    default: llvm::errs() << "clang::APValue::ValueKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::AccessSpecifier e) {
  switch(e) {
    case clang::AS_public: return enum_constant_AS_public_16;
    case clang::AS_protected: return enum_constant_AS_protected_17;
    case clang::AS_private: return enum_constant_AS_private_18;
    case clang::AS_none: return enum_constant_AS_none_19;
    default: llvm::errs() << "clang::AccessSpecifier: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ArraySizeModifier e) {
  switch(e) {
    case clang::ArraySizeModifier::Normal: return enum_constant_Normal_21;
    case clang::ArraySizeModifier::Static: return enum_constant_Static_22;
    case clang::ArraySizeModifier::Star: return enum_constant_Star_23;
    default: llvm::errs() << "clang::ArraySizeModifier: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ArrayTypeTrait e) {
  switch(e) {
    case clang::ATT_ArrayRank: return enum_constant_ATT_ArrayRank_25;
    case clang::ATT_ArrayExtent: return enum_constant_ATT_ArrayExtent_26;
    default: llvm::errs() << "clang::ArrayTypeTrait: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::AtomicExpr::AtomicOp e) {
  switch(e) {
    case clang::AtomicExpr::AO__c11_atomic_init: return enum_constant_AO__c11_atomic_init_29;
    case clang::AtomicExpr::AO__c11_atomic_load: return enum_constant_AO__c11_atomic_load_30;
    case clang::AtomicExpr::AO__c11_atomic_store: return enum_constant_AO__c11_atomic_store_31;
    case clang::AtomicExpr::AO__c11_atomic_exchange: return enum_constant_AO__c11_atomic_exchange_32;
    case clang::AtomicExpr::AO__c11_atomic_compare_exchange_strong: return enum_constant_AO__c11_atomic_compare_exchange_strong_33;
    case clang::AtomicExpr::AO__c11_atomic_compare_exchange_weak: return enum_constant_AO__c11_atomic_compare_exchange_weak_34;
    case clang::AtomicExpr::AO__c11_atomic_fetch_add: return enum_constant_AO__c11_atomic_fetch_add_35;
    case clang::AtomicExpr::AO__c11_atomic_fetch_sub: return enum_constant_AO__c11_atomic_fetch_sub_36;
    case clang::AtomicExpr::AO__c11_atomic_fetch_and: return enum_constant_AO__c11_atomic_fetch_and_37;
    case clang::AtomicExpr::AO__c11_atomic_fetch_or: return enum_constant_AO__c11_atomic_fetch_or_38;
    case clang::AtomicExpr::AO__c11_atomic_fetch_xor: return enum_constant_AO__c11_atomic_fetch_xor_39;
    case clang::AtomicExpr::AO__c11_atomic_fetch_nand: return enum_constant_AO__c11_atomic_fetch_nand_40;
    case clang::AtomicExpr::AO__c11_atomic_fetch_max: return enum_constant_AO__c11_atomic_fetch_max_41;
    case clang::AtomicExpr::AO__c11_atomic_fetch_min: return enum_constant_AO__c11_atomic_fetch_min_42;
    case clang::AtomicExpr::AO__atomic_load: return enum_constant_AO__atomic_load_43;
    case clang::AtomicExpr::AO__atomic_load_n: return enum_constant_AO__atomic_load_n_44;
    case clang::AtomicExpr::AO__atomic_store: return enum_constant_AO__atomic_store_45;
    case clang::AtomicExpr::AO__atomic_store_n: return enum_constant_AO__atomic_store_n_46;
    case clang::AtomicExpr::AO__atomic_exchange: return enum_constant_AO__atomic_exchange_47;
    case clang::AtomicExpr::AO__atomic_exchange_n: return enum_constant_AO__atomic_exchange_n_48;
    case clang::AtomicExpr::AO__atomic_compare_exchange: return enum_constant_AO__atomic_compare_exchange_49;
    case clang::AtomicExpr::AO__atomic_compare_exchange_n: return enum_constant_AO__atomic_compare_exchange_n_50;
    case clang::AtomicExpr::AO__atomic_fetch_add: return enum_constant_AO__atomic_fetch_add_51;
    case clang::AtomicExpr::AO__atomic_fetch_sub: return enum_constant_AO__atomic_fetch_sub_52;
    case clang::AtomicExpr::AO__atomic_fetch_and: return enum_constant_AO__atomic_fetch_and_53;
    case clang::AtomicExpr::AO__atomic_fetch_or: return enum_constant_AO__atomic_fetch_or_54;
    case clang::AtomicExpr::AO__atomic_fetch_xor: return enum_constant_AO__atomic_fetch_xor_55;
    case clang::AtomicExpr::AO__atomic_fetch_nand: return enum_constant_AO__atomic_fetch_nand_56;
    case clang::AtomicExpr::AO__atomic_add_fetch: return enum_constant_AO__atomic_add_fetch_57;
    case clang::AtomicExpr::AO__atomic_sub_fetch: return enum_constant_AO__atomic_sub_fetch_58;
    case clang::AtomicExpr::AO__atomic_and_fetch: return enum_constant_AO__atomic_and_fetch_59;
    case clang::AtomicExpr::AO__atomic_or_fetch: return enum_constant_AO__atomic_or_fetch_60;
    case clang::AtomicExpr::AO__atomic_xor_fetch: return enum_constant_AO__atomic_xor_fetch_61;
    case clang::AtomicExpr::AO__atomic_max_fetch: return enum_constant_AO__atomic_max_fetch_62;
    case clang::AtomicExpr::AO__atomic_min_fetch: return enum_constant_AO__atomic_min_fetch_63;
    case clang::AtomicExpr::AO__atomic_nand_fetch: return enum_constant_AO__atomic_nand_fetch_64;
    case clang::AtomicExpr::AO__scoped_atomic_load: return enum_constant_AO__scoped_atomic_load_65;
    case clang::AtomicExpr::AO__scoped_atomic_load_n: return enum_constant_AO__scoped_atomic_load_n_66;
    case clang::AtomicExpr::AO__scoped_atomic_store: return enum_constant_AO__scoped_atomic_store_67;
    case clang::AtomicExpr::AO__scoped_atomic_store_n: return enum_constant_AO__scoped_atomic_store_n_68;
    case clang::AtomicExpr::AO__scoped_atomic_exchange: return enum_constant_AO__scoped_atomic_exchange_69;
    case clang::AtomicExpr::AO__scoped_atomic_exchange_n: return enum_constant_AO__scoped_atomic_exchange_n_70;
    case clang::AtomicExpr::AO__scoped_atomic_compare_exchange: return enum_constant_AO__scoped_atomic_compare_exchange_71;
    case clang::AtomicExpr::AO__scoped_atomic_compare_exchange_n: return enum_constant_AO__scoped_atomic_compare_exchange_n_72;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_add: return enum_constant_AO__scoped_atomic_fetch_add_73;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_sub: return enum_constant_AO__scoped_atomic_fetch_sub_74;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_and: return enum_constant_AO__scoped_atomic_fetch_and_75;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_or: return enum_constant_AO__scoped_atomic_fetch_or_76;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_xor: return enum_constant_AO__scoped_atomic_fetch_xor_77;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_nand: return enum_constant_AO__scoped_atomic_fetch_nand_78;
    case clang::AtomicExpr::AO__scoped_atomic_add_fetch: return enum_constant_AO__scoped_atomic_add_fetch_79;
    case clang::AtomicExpr::AO__scoped_atomic_sub_fetch: return enum_constant_AO__scoped_atomic_sub_fetch_80;
    case clang::AtomicExpr::AO__scoped_atomic_and_fetch: return enum_constant_AO__scoped_atomic_and_fetch_81;
    case clang::AtomicExpr::AO__scoped_atomic_or_fetch: return enum_constant_AO__scoped_atomic_or_fetch_82;
    case clang::AtomicExpr::AO__scoped_atomic_xor_fetch: return enum_constant_AO__scoped_atomic_xor_fetch_83;
    case clang::AtomicExpr::AO__scoped_atomic_max_fetch: return enum_constant_AO__scoped_atomic_max_fetch_84;
    case clang::AtomicExpr::AO__scoped_atomic_min_fetch: return enum_constant_AO__scoped_atomic_min_fetch_85;
    case clang::AtomicExpr::AO__scoped_atomic_nand_fetch: return enum_constant_AO__scoped_atomic_nand_fetch_86;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_min: return enum_constant_AO__scoped_atomic_fetch_min_87;
    case clang::AtomicExpr::AO__scoped_atomic_fetch_max: return enum_constant_AO__scoped_atomic_fetch_max_88;
    case clang::AtomicExpr::AO__opencl_atomic_init: return enum_constant_AO__opencl_atomic_init_89;
    case clang::AtomicExpr::AO__opencl_atomic_load: return enum_constant_AO__opencl_atomic_load_90;
    case clang::AtomicExpr::AO__opencl_atomic_store: return enum_constant_AO__opencl_atomic_store_91;
    case clang::AtomicExpr::AO__opencl_atomic_exchange: return enum_constant_AO__opencl_atomic_exchange_92;
    case clang::AtomicExpr::AO__opencl_atomic_compare_exchange_strong: return enum_constant_AO__opencl_atomic_compare_exchange_strong_93;
    case clang::AtomicExpr::AO__opencl_atomic_compare_exchange_weak: return enum_constant_AO__opencl_atomic_compare_exchange_weak_94;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_add: return enum_constant_AO__opencl_atomic_fetch_add_95;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_sub: return enum_constant_AO__opencl_atomic_fetch_sub_96;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_and: return enum_constant_AO__opencl_atomic_fetch_and_97;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_or: return enum_constant_AO__opencl_atomic_fetch_or_98;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_xor: return enum_constant_AO__opencl_atomic_fetch_xor_99;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_min: return enum_constant_AO__opencl_atomic_fetch_min_100;
    case clang::AtomicExpr::AO__opencl_atomic_fetch_max: return enum_constant_AO__opencl_atomic_fetch_max_101;
    case clang::AtomicExpr::AO__atomic_fetch_min: return enum_constant_AO__atomic_fetch_min_102;
    case clang::AtomicExpr::AO__atomic_fetch_max: return enum_constant_AO__atomic_fetch_max_103;
    case clang::AtomicExpr::AO__hip_atomic_load: return enum_constant_AO__hip_atomic_load_104;
    case clang::AtomicExpr::AO__hip_atomic_store: return enum_constant_AO__hip_atomic_store_105;
    case clang::AtomicExpr::AO__hip_atomic_compare_exchange_weak: return enum_constant_AO__hip_atomic_compare_exchange_weak_106;
    case clang::AtomicExpr::AO__hip_atomic_compare_exchange_strong: return enum_constant_AO__hip_atomic_compare_exchange_strong_107;
    case clang::AtomicExpr::AO__hip_atomic_exchange: return enum_constant_AO__hip_atomic_exchange_108;
    case clang::AtomicExpr::AO__hip_atomic_fetch_add: return enum_constant_AO__hip_atomic_fetch_add_109;
    case clang::AtomicExpr::AO__hip_atomic_fetch_sub: return enum_constant_AO__hip_atomic_fetch_sub_110;
    case clang::AtomicExpr::AO__hip_atomic_fetch_and: return enum_constant_AO__hip_atomic_fetch_and_111;
    case clang::AtomicExpr::AO__hip_atomic_fetch_or: return enum_constant_AO__hip_atomic_fetch_or_112;
    case clang::AtomicExpr::AO__hip_atomic_fetch_xor: return enum_constant_AO__hip_atomic_fetch_xor_113;
    case clang::AtomicExpr::AO__hip_atomic_fetch_min: return enum_constant_AO__hip_atomic_fetch_min_114;
    case clang::AtomicExpr::AO__hip_atomic_fetch_max: return enum_constant_AO__hip_atomic_fetch_max_115;
    default: llvm::errs() << "clang::AtomicExpr::AtomicOp: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::AutoTypeKeyword e) {
  switch(e) {
    case clang::AutoTypeKeyword::Auto: return enum_constant_Auto_118;
    case clang::AutoTypeKeyword::DecltypeAuto: return enum_constant_DecltypeAuto_119;
    case clang::AutoTypeKeyword::GNUAutoType: return enum_constant_GNUAutoType_120;
    default: llvm::errs() << "clang::AutoTypeKeyword: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::BinaryOperatorKind e) {
  switch(e) {
    case clang::BO_PtrMemD: return enum_constant_BO_PtrMemD_122;
    case clang::BO_PtrMemI: return enum_constant_BO_PtrMemI_123;
    case clang::BO_Mul: return enum_constant_BO_Mul_124;
    case clang::BO_Div: return enum_constant_BO_Div_125;
    case clang::BO_Rem: return enum_constant_BO_Rem_126;
    case clang::BO_Add: return enum_constant_BO_Add_127;
    case clang::BO_Sub: return enum_constant_BO_Sub_128;
    case clang::BO_Shl: return enum_constant_BO_Shl_129;
    case clang::BO_Shr: return enum_constant_BO_Shr_130;
    case clang::BO_Cmp: return enum_constant_BO_Cmp_131;
    case clang::BO_LT: return enum_constant_BO_LT_132;
    case clang::BO_GT: return enum_constant_BO_GT_133;
    case clang::BO_LE: return enum_constant_BO_LE_134;
    case clang::BO_GE: return enum_constant_BO_GE_135;
    case clang::BO_EQ: return enum_constant_BO_EQ_136;
    case clang::BO_NE: return enum_constant_BO_NE_137;
    case clang::BO_And: return enum_constant_BO_And_138;
    case clang::BO_Xor: return enum_constant_BO_Xor_139;
    case clang::BO_Or: return enum_constant_BO_Or_140;
    case clang::BO_LAnd: return enum_constant_BO_LAnd_141;
    case clang::BO_LOr: return enum_constant_BO_LOr_142;
    case clang::BO_Assign: return enum_constant_BO_Assign_143;
    case clang::BO_MulAssign: return enum_constant_BO_MulAssign_144;
    case clang::BO_DivAssign: return enum_constant_BO_DivAssign_145;
    case clang::BO_RemAssign: return enum_constant_BO_RemAssign_146;
    case clang::BO_AddAssign: return enum_constant_BO_AddAssign_147;
    case clang::BO_SubAssign: return enum_constant_BO_SubAssign_148;
    case clang::BO_ShlAssign: return enum_constant_BO_ShlAssign_149;
    case clang::BO_ShrAssign: return enum_constant_BO_ShrAssign_150;
    case clang::BO_AndAssign: return enum_constant_BO_AndAssign_151;
    case clang::BO_XorAssign: return enum_constant_BO_XorAssign_152;
    case clang::BO_OrAssign: return enum_constant_BO_OrAssign_153;
    case clang::BO_Comma: return enum_constant_BO_Comma_154;
    default: llvm::errs() << "clang::BinaryOperatorKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::BuiltinTemplateKind e) {
  switch(e) {
    case clang::BTK__make_integer_seq: return enum_constant_BTK__make_integer_seq_156;
    case clang::BTK__type_pack_element: return enum_constant_BTK__type_pack_element_157;
    default: llvm::errs() << "clang::BuiltinTemplateKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::BuiltinType::Kind e) {
  switch(e) {
    case clang::BuiltinType::OCLImage1dRO: return enum_constant_OCLImage1dRO_159;
    case clang::BuiltinType::OCLImage1dArrayRO: return enum_constant_OCLImage1dArrayRO_160;
    case clang::BuiltinType::OCLImage1dBufferRO: return enum_constant_OCLImage1dBufferRO_161;
    case clang::BuiltinType::OCLImage2dRO: return enum_constant_OCLImage2dRO_162;
    case clang::BuiltinType::OCLImage2dArrayRO: return enum_constant_OCLImage2dArrayRO_163;
    case clang::BuiltinType::OCLImage2dDepthRO: return enum_constant_OCLImage2dDepthRO_164;
    case clang::BuiltinType::OCLImage2dArrayDepthRO: return enum_constant_OCLImage2dArrayDepthRO_165;
    case clang::BuiltinType::OCLImage2dMSAARO: return enum_constant_OCLImage2dMSAARO_166;
    case clang::BuiltinType::OCLImage2dArrayMSAARO: return enum_constant_OCLImage2dArrayMSAARO_167;
    case clang::BuiltinType::OCLImage2dMSAADepthRO: return enum_constant_OCLImage2dMSAADepthRO_168;
    case clang::BuiltinType::OCLImage2dArrayMSAADepthRO: return enum_constant_OCLImage2dArrayMSAADepthRO_169;
    case clang::BuiltinType::OCLImage3dRO: return enum_constant_OCLImage3dRO_170;
    case clang::BuiltinType::OCLImage1dWO: return enum_constant_OCLImage1dWO_171;
    case clang::BuiltinType::OCLImage1dArrayWO: return enum_constant_OCLImage1dArrayWO_172;
    case clang::BuiltinType::OCLImage1dBufferWO: return enum_constant_OCLImage1dBufferWO_173;
    case clang::BuiltinType::OCLImage2dWO: return enum_constant_OCLImage2dWO_174;
    case clang::BuiltinType::OCLImage2dArrayWO: return enum_constant_OCLImage2dArrayWO_175;
    case clang::BuiltinType::OCLImage2dDepthWO: return enum_constant_OCLImage2dDepthWO_176;
    case clang::BuiltinType::OCLImage2dArrayDepthWO: return enum_constant_OCLImage2dArrayDepthWO_177;
    case clang::BuiltinType::OCLImage2dMSAAWO: return enum_constant_OCLImage2dMSAAWO_178;
    case clang::BuiltinType::OCLImage2dArrayMSAAWO: return enum_constant_OCLImage2dArrayMSAAWO_179;
    case clang::BuiltinType::OCLImage2dMSAADepthWO: return enum_constant_OCLImage2dMSAADepthWO_180;
    case clang::BuiltinType::OCLImage2dArrayMSAADepthWO: return enum_constant_OCLImage2dArrayMSAADepthWO_181;
    case clang::BuiltinType::OCLImage3dWO: return enum_constant_OCLImage3dWO_182;
    case clang::BuiltinType::OCLImage1dRW: return enum_constant_OCLImage1dRW_183;
    case clang::BuiltinType::OCLImage1dArrayRW: return enum_constant_OCLImage1dArrayRW_184;
    case clang::BuiltinType::OCLImage1dBufferRW: return enum_constant_OCLImage1dBufferRW_185;
    case clang::BuiltinType::OCLImage2dRW: return enum_constant_OCLImage2dRW_186;
    case clang::BuiltinType::OCLImage2dArrayRW: return enum_constant_OCLImage2dArrayRW_187;
    case clang::BuiltinType::OCLImage2dDepthRW: return enum_constant_OCLImage2dDepthRW_188;
    case clang::BuiltinType::OCLImage2dArrayDepthRW: return enum_constant_OCLImage2dArrayDepthRW_189;
    case clang::BuiltinType::OCLImage2dMSAARW: return enum_constant_OCLImage2dMSAARW_190;
    case clang::BuiltinType::OCLImage2dArrayMSAARW: return enum_constant_OCLImage2dArrayMSAARW_191;
    case clang::BuiltinType::OCLImage2dMSAADepthRW: return enum_constant_OCLImage2dMSAADepthRW_192;
    case clang::BuiltinType::OCLImage2dArrayMSAADepthRW: return enum_constant_OCLImage2dArrayMSAADepthRW_193;
    case clang::BuiltinType::OCLImage3dRW: return enum_constant_OCLImage3dRW_194;
    case clang::BuiltinType::OCLIntelSubgroupAVCMcePayload: return enum_constant_OCLIntelSubgroupAVCMcePayload_195;
    case clang::BuiltinType::OCLIntelSubgroupAVCImePayload: return enum_constant_OCLIntelSubgroupAVCImePayload_196;
    case clang::BuiltinType::OCLIntelSubgroupAVCRefPayload: return enum_constant_OCLIntelSubgroupAVCRefPayload_197;
    case clang::BuiltinType::OCLIntelSubgroupAVCSicPayload: return enum_constant_OCLIntelSubgroupAVCSicPayload_198;
    case clang::BuiltinType::OCLIntelSubgroupAVCMceResult: return enum_constant_OCLIntelSubgroupAVCMceResult_199;
    case clang::BuiltinType::OCLIntelSubgroupAVCImeResult: return enum_constant_OCLIntelSubgroupAVCImeResult_200;
    case clang::BuiltinType::OCLIntelSubgroupAVCRefResult: return enum_constant_OCLIntelSubgroupAVCRefResult_201;
    case clang::BuiltinType::OCLIntelSubgroupAVCSicResult: return enum_constant_OCLIntelSubgroupAVCSicResult_202;
    case clang::BuiltinType::OCLIntelSubgroupAVCImeResultSingleReferenceStreamout: return enum_constant_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout_203;
    case clang::BuiltinType::OCLIntelSubgroupAVCImeResultDualReferenceStreamout: return enum_constant_OCLIntelSubgroupAVCImeResultDualReferenceStreamout_204;
    case clang::BuiltinType::OCLIntelSubgroupAVCImeSingleReferenceStreamin: return enum_constant_OCLIntelSubgroupAVCImeSingleReferenceStreamin_205;
    case clang::BuiltinType::OCLIntelSubgroupAVCImeDualReferenceStreamin: return enum_constant_OCLIntelSubgroupAVCImeDualReferenceStreamin_206;
    case clang::BuiltinType::SveInt8: return enum_constant_SveInt8_207;
    case clang::BuiltinType::SveInt16: return enum_constant_SveInt16_208;
    case clang::BuiltinType::SveInt32: return enum_constant_SveInt32_209;
    case clang::BuiltinType::SveInt64: return enum_constant_SveInt64_210;
    case clang::BuiltinType::SveUint8: return enum_constant_SveUint8_211;
    case clang::BuiltinType::SveUint16: return enum_constant_SveUint16_212;
    case clang::BuiltinType::SveUint32: return enum_constant_SveUint32_213;
    case clang::BuiltinType::SveUint64: return enum_constant_SveUint64_214;
    case clang::BuiltinType::SveFloat16: return enum_constant_SveFloat16_215;
    case clang::BuiltinType::SveFloat32: return enum_constant_SveFloat32_216;
    case clang::BuiltinType::SveFloat64: return enum_constant_SveFloat64_217;
    case clang::BuiltinType::SveBFloat16: return enum_constant_SveBFloat16_218;
    case clang::BuiltinType::SveInt8x2: return enum_constant_SveInt8x2_219;
    case clang::BuiltinType::SveInt16x2: return enum_constant_SveInt16x2_220;
    case clang::BuiltinType::SveInt32x2: return enum_constant_SveInt32x2_221;
    case clang::BuiltinType::SveInt64x2: return enum_constant_SveInt64x2_222;
    case clang::BuiltinType::SveUint8x2: return enum_constant_SveUint8x2_223;
    case clang::BuiltinType::SveUint16x2: return enum_constant_SveUint16x2_224;
    case clang::BuiltinType::SveUint32x2: return enum_constant_SveUint32x2_225;
    case clang::BuiltinType::SveUint64x2: return enum_constant_SveUint64x2_226;
    case clang::BuiltinType::SveFloat16x2: return enum_constant_SveFloat16x2_227;
    case clang::BuiltinType::SveFloat32x2: return enum_constant_SveFloat32x2_228;
    case clang::BuiltinType::SveFloat64x2: return enum_constant_SveFloat64x2_229;
    case clang::BuiltinType::SveBFloat16x2: return enum_constant_SveBFloat16x2_230;
    case clang::BuiltinType::SveInt8x3: return enum_constant_SveInt8x3_231;
    case clang::BuiltinType::SveInt16x3: return enum_constant_SveInt16x3_232;
    case clang::BuiltinType::SveInt32x3: return enum_constant_SveInt32x3_233;
    case clang::BuiltinType::SveInt64x3: return enum_constant_SveInt64x3_234;
    case clang::BuiltinType::SveUint8x3: return enum_constant_SveUint8x3_235;
    case clang::BuiltinType::SveUint16x3: return enum_constant_SveUint16x3_236;
    case clang::BuiltinType::SveUint32x3: return enum_constant_SveUint32x3_237;
    case clang::BuiltinType::SveUint64x3: return enum_constant_SveUint64x3_238;
    case clang::BuiltinType::SveFloat16x3: return enum_constant_SveFloat16x3_239;
    case clang::BuiltinType::SveFloat32x3: return enum_constant_SveFloat32x3_240;
    case clang::BuiltinType::SveFloat64x3: return enum_constant_SveFloat64x3_241;
    case clang::BuiltinType::SveBFloat16x3: return enum_constant_SveBFloat16x3_242;
    case clang::BuiltinType::SveInt8x4: return enum_constant_SveInt8x4_243;
    case clang::BuiltinType::SveInt16x4: return enum_constant_SveInt16x4_244;
    case clang::BuiltinType::SveInt32x4: return enum_constant_SveInt32x4_245;
    case clang::BuiltinType::SveInt64x4: return enum_constant_SveInt64x4_246;
    case clang::BuiltinType::SveUint8x4: return enum_constant_SveUint8x4_247;
    case clang::BuiltinType::SveUint16x4: return enum_constant_SveUint16x4_248;
    case clang::BuiltinType::SveUint32x4: return enum_constant_SveUint32x4_249;
    case clang::BuiltinType::SveUint64x4: return enum_constant_SveUint64x4_250;
    case clang::BuiltinType::SveFloat16x4: return enum_constant_SveFloat16x4_251;
    case clang::BuiltinType::SveFloat32x4: return enum_constant_SveFloat32x4_252;
    case clang::BuiltinType::SveFloat64x4: return enum_constant_SveFloat64x4_253;
    case clang::BuiltinType::SveBFloat16x4: return enum_constant_SveBFloat16x4_254;
    case clang::BuiltinType::SveBool: return enum_constant_SveBool_255;
    case clang::BuiltinType::SveBoolx2: return enum_constant_SveBoolx2_256;
    case clang::BuiltinType::SveBoolx4: return enum_constant_SveBoolx4_257;
    case clang::BuiltinType::SveCount: return enum_constant_SveCount_258;
    case clang::BuiltinType::VectorQuad: return enum_constant_VectorQuad_259;
    case clang::BuiltinType::VectorPair: return enum_constant_VectorPair_260;
    case clang::BuiltinType::RvvInt8mf8: return enum_constant_RvvInt8mf8_261;
    case clang::BuiltinType::RvvInt8mf4: return enum_constant_RvvInt8mf4_262;
    case clang::BuiltinType::RvvInt8mf2: return enum_constant_RvvInt8mf2_263;
    case clang::BuiltinType::RvvInt8m1: return enum_constant_RvvInt8m1_264;
    case clang::BuiltinType::RvvInt8m2: return enum_constant_RvvInt8m2_265;
    case clang::BuiltinType::RvvInt8m4: return enum_constant_RvvInt8m4_266;
    case clang::BuiltinType::RvvInt8m8: return enum_constant_RvvInt8m8_267;
    case clang::BuiltinType::RvvUint8mf8: return enum_constant_RvvUint8mf8_268;
    case clang::BuiltinType::RvvUint8mf4: return enum_constant_RvvUint8mf4_269;
    case clang::BuiltinType::RvvUint8mf2: return enum_constant_RvvUint8mf2_270;
    case clang::BuiltinType::RvvUint8m1: return enum_constant_RvvUint8m1_271;
    case clang::BuiltinType::RvvUint8m2: return enum_constant_RvvUint8m2_272;
    case clang::BuiltinType::RvvUint8m4: return enum_constant_RvvUint8m4_273;
    case clang::BuiltinType::RvvUint8m8: return enum_constant_RvvUint8m8_274;
    case clang::BuiltinType::RvvInt16mf4: return enum_constant_RvvInt16mf4_275;
    case clang::BuiltinType::RvvInt16mf2: return enum_constant_RvvInt16mf2_276;
    case clang::BuiltinType::RvvInt16m1: return enum_constant_RvvInt16m1_277;
    case clang::BuiltinType::RvvInt16m2: return enum_constant_RvvInt16m2_278;
    case clang::BuiltinType::RvvInt16m4: return enum_constant_RvvInt16m4_279;
    case clang::BuiltinType::RvvInt16m8: return enum_constant_RvvInt16m8_280;
    case clang::BuiltinType::RvvUint16mf4: return enum_constant_RvvUint16mf4_281;
    case clang::BuiltinType::RvvUint16mf2: return enum_constant_RvvUint16mf2_282;
    case clang::BuiltinType::RvvUint16m1: return enum_constant_RvvUint16m1_283;
    case clang::BuiltinType::RvvUint16m2: return enum_constant_RvvUint16m2_284;
    case clang::BuiltinType::RvvUint16m4: return enum_constant_RvvUint16m4_285;
    case clang::BuiltinType::RvvUint16m8: return enum_constant_RvvUint16m8_286;
    case clang::BuiltinType::RvvInt32mf2: return enum_constant_RvvInt32mf2_287;
    case clang::BuiltinType::RvvInt32m1: return enum_constant_RvvInt32m1_288;
    case clang::BuiltinType::RvvInt32m2: return enum_constant_RvvInt32m2_289;
    case clang::BuiltinType::RvvInt32m4: return enum_constant_RvvInt32m4_290;
    case clang::BuiltinType::RvvInt32m8: return enum_constant_RvvInt32m8_291;
    case clang::BuiltinType::RvvUint32mf2: return enum_constant_RvvUint32mf2_292;
    case clang::BuiltinType::RvvUint32m1: return enum_constant_RvvUint32m1_293;
    case clang::BuiltinType::RvvUint32m2: return enum_constant_RvvUint32m2_294;
    case clang::BuiltinType::RvvUint32m4: return enum_constant_RvvUint32m4_295;
    case clang::BuiltinType::RvvUint32m8: return enum_constant_RvvUint32m8_296;
    case clang::BuiltinType::RvvInt64m1: return enum_constant_RvvInt64m1_297;
    case clang::BuiltinType::RvvInt64m2: return enum_constant_RvvInt64m2_298;
    case clang::BuiltinType::RvvInt64m4: return enum_constant_RvvInt64m4_299;
    case clang::BuiltinType::RvvInt64m8: return enum_constant_RvvInt64m8_300;
    case clang::BuiltinType::RvvUint64m1: return enum_constant_RvvUint64m1_301;
    case clang::BuiltinType::RvvUint64m2: return enum_constant_RvvUint64m2_302;
    case clang::BuiltinType::RvvUint64m4: return enum_constant_RvvUint64m4_303;
    case clang::BuiltinType::RvvUint64m8: return enum_constant_RvvUint64m8_304;
    case clang::BuiltinType::RvvFloat16mf4: return enum_constant_RvvFloat16mf4_305;
    case clang::BuiltinType::RvvFloat16mf2: return enum_constant_RvvFloat16mf2_306;
    case clang::BuiltinType::RvvFloat16m1: return enum_constant_RvvFloat16m1_307;
    case clang::BuiltinType::RvvFloat16m2: return enum_constant_RvvFloat16m2_308;
    case clang::BuiltinType::RvvFloat16m4: return enum_constant_RvvFloat16m4_309;
    case clang::BuiltinType::RvvFloat16m8: return enum_constant_RvvFloat16m8_310;
    case clang::BuiltinType::RvvBFloat16mf4: return enum_constant_RvvBFloat16mf4_311;
    case clang::BuiltinType::RvvBFloat16mf2: return enum_constant_RvvBFloat16mf2_312;
    case clang::BuiltinType::RvvBFloat16m1: return enum_constant_RvvBFloat16m1_313;
    case clang::BuiltinType::RvvBFloat16m2: return enum_constant_RvvBFloat16m2_314;
    case clang::BuiltinType::RvvBFloat16m4: return enum_constant_RvvBFloat16m4_315;
    case clang::BuiltinType::RvvBFloat16m8: return enum_constant_RvvBFloat16m8_316;
    case clang::BuiltinType::RvvFloat32mf2: return enum_constant_RvvFloat32mf2_317;
    case clang::BuiltinType::RvvFloat32m1: return enum_constant_RvvFloat32m1_318;
    case clang::BuiltinType::RvvFloat32m2: return enum_constant_RvvFloat32m2_319;
    case clang::BuiltinType::RvvFloat32m4: return enum_constant_RvvFloat32m4_320;
    case clang::BuiltinType::RvvFloat32m8: return enum_constant_RvvFloat32m8_321;
    case clang::BuiltinType::RvvFloat64m1: return enum_constant_RvvFloat64m1_322;
    case clang::BuiltinType::RvvFloat64m2: return enum_constant_RvvFloat64m2_323;
    case clang::BuiltinType::RvvFloat64m4: return enum_constant_RvvFloat64m4_324;
    case clang::BuiltinType::RvvFloat64m8: return enum_constant_RvvFloat64m8_325;
    case clang::BuiltinType::RvvBool1: return enum_constant_RvvBool1_326;
    case clang::BuiltinType::RvvBool2: return enum_constant_RvvBool2_327;
    case clang::BuiltinType::RvvBool4: return enum_constant_RvvBool4_328;
    case clang::BuiltinType::RvvBool8: return enum_constant_RvvBool8_329;
    case clang::BuiltinType::RvvBool16: return enum_constant_RvvBool16_330;
    case clang::BuiltinType::RvvBool32: return enum_constant_RvvBool32_331;
    case clang::BuiltinType::RvvBool64: return enum_constant_RvvBool64_332;
    case clang::BuiltinType::RvvInt8mf8x2: return enum_constant_RvvInt8mf8x2_333;
    case clang::BuiltinType::RvvInt8mf8x3: return enum_constant_RvvInt8mf8x3_334;
    case clang::BuiltinType::RvvInt8mf8x4: return enum_constant_RvvInt8mf8x4_335;
    case clang::BuiltinType::RvvInt8mf8x5: return enum_constant_RvvInt8mf8x5_336;
    case clang::BuiltinType::RvvInt8mf8x6: return enum_constant_RvvInt8mf8x6_337;
    case clang::BuiltinType::RvvInt8mf8x7: return enum_constant_RvvInt8mf8x7_338;
    case clang::BuiltinType::RvvInt8mf8x8: return enum_constant_RvvInt8mf8x8_339;
    case clang::BuiltinType::RvvInt8mf4x2: return enum_constant_RvvInt8mf4x2_340;
    case clang::BuiltinType::RvvInt8mf4x3: return enum_constant_RvvInt8mf4x3_341;
    case clang::BuiltinType::RvvInt8mf4x4: return enum_constant_RvvInt8mf4x4_342;
    case clang::BuiltinType::RvvInt8mf4x5: return enum_constant_RvvInt8mf4x5_343;
    case clang::BuiltinType::RvvInt8mf4x6: return enum_constant_RvvInt8mf4x6_344;
    case clang::BuiltinType::RvvInt8mf4x7: return enum_constant_RvvInt8mf4x7_345;
    case clang::BuiltinType::RvvInt8mf4x8: return enum_constant_RvvInt8mf4x8_346;
    case clang::BuiltinType::RvvInt8mf2x2: return enum_constant_RvvInt8mf2x2_347;
    case clang::BuiltinType::RvvInt8mf2x3: return enum_constant_RvvInt8mf2x3_348;
    case clang::BuiltinType::RvvInt8mf2x4: return enum_constant_RvvInt8mf2x4_349;
    case clang::BuiltinType::RvvInt8mf2x5: return enum_constant_RvvInt8mf2x5_350;
    case clang::BuiltinType::RvvInt8mf2x6: return enum_constant_RvvInt8mf2x6_351;
    case clang::BuiltinType::RvvInt8mf2x7: return enum_constant_RvvInt8mf2x7_352;
    case clang::BuiltinType::RvvInt8mf2x8: return enum_constant_RvvInt8mf2x8_353;
    case clang::BuiltinType::RvvInt8m1x2: return enum_constant_RvvInt8m1x2_354;
    case clang::BuiltinType::RvvInt8m1x3: return enum_constant_RvvInt8m1x3_355;
    case clang::BuiltinType::RvvInt8m1x4: return enum_constant_RvvInt8m1x4_356;
    case clang::BuiltinType::RvvInt8m1x5: return enum_constant_RvvInt8m1x5_357;
    case clang::BuiltinType::RvvInt8m1x6: return enum_constant_RvvInt8m1x6_358;
    case clang::BuiltinType::RvvInt8m1x7: return enum_constant_RvvInt8m1x7_359;
    case clang::BuiltinType::RvvInt8m1x8: return enum_constant_RvvInt8m1x8_360;
    case clang::BuiltinType::RvvInt8m2x2: return enum_constant_RvvInt8m2x2_361;
    case clang::BuiltinType::RvvInt8m2x3: return enum_constant_RvvInt8m2x3_362;
    case clang::BuiltinType::RvvInt8m2x4: return enum_constant_RvvInt8m2x4_363;
    case clang::BuiltinType::RvvInt8m4x2: return enum_constant_RvvInt8m4x2_364;
    case clang::BuiltinType::RvvUint8mf8x2: return enum_constant_RvvUint8mf8x2_365;
    case clang::BuiltinType::RvvUint8mf8x3: return enum_constant_RvvUint8mf8x3_366;
    case clang::BuiltinType::RvvUint8mf8x4: return enum_constant_RvvUint8mf8x4_367;
    case clang::BuiltinType::RvvUint8mf8x5: return enum_constant_RvvUint8mf8x5_368;
    case clang::BuiltinType::RvvUint8mf8x6: return enum_constant_RvvUint8mf8x6_369;
    case clang::BuiltinType::RvvUint8mf8x7: return enum_constant_RvvUint8mf8x7_370;
    case clang::BuiltinType::RvvUint8mf8x8: return enum_constant_RvvUint8mf8x8_371;
    case clang::BuiltinType::RvvUint8mf4x2: return enum_constant_RvvUint8mf4x2_372;
    case clang::BuiltinType::RvvUint8mf4x3: return enum_constant_RvvUint8mf4x3_373;
    case clang::BuiltinType::RvvUint8mf4x4: return enum_constant_RvvUint8mf4x4_374;
    case clang::BuiltinType::RvvUint8mf4x5: return enum_constant_RvvUint8mf4x5_375;
    case clang::BuiltinType::RvvUint8mf4x6: return enum_constant_RvvUint8mf4x6_376;
    case clang::BuiltinType::RvvUint8mf4x7: return enum_constant_RvvUint8mf4x7_377;
    case clang::BuiltinType::RvvUint8mf4x8: return enum_constant_RvvUint8mf4x8_378;
    case clang::BuiltinType::RvvUint8mf2x2: return enum_constant_RvvUint8mf2x2_379;
    case clang::BuiltinType::RvvUint8mf2x3: return enum_constant_RvvUint8mf2x3_380;
    case clang::BuiltinType::RvvUint8mf2x4: return enum_constant_RvvUint8mf2x4_381;
    case clang::BuiltinType::RvvUint8mf2x5: return enum_constant_RvvUint8mf2x5_382;
    case clang::BuiltinType::RvvUint8mf2x6: return enum_constant_RvvUint8mf2x6_383;
    case clang::BuiltinType::RvvUint8mf2x7: return enum_constant_RvvUint8mf2x7_384;
    case clang::BuiltinType::RvvUint8mf2x8: return enum_constant_RvvUint8mf2x8_385;
    case clang::BuiltinType::RvvUint8m1x2: return enum_constant_RvvUint8m1x2_386;
    case clang::BuiltinType::RvvUint8m1x3: return enum_constant_RvvUint8m1x3_387;
    case clang::BuiltinType::RvvUint8m1x4: return enum_constant_RvvUint8m1x4_388;
    case clang::BuiltinType::RvvUint8m1x5: return enum_constant_RvvUint8m1x5_389;
    case clang::BuiltinType::RvvUint8m1x6: return enum_constant_RvvUint8m1x6_390;
    case clang::BuiltinType::RvvUint8m1x7: return enum_constant_RvvUint8m1x7_391;
    case clang::BuiltinType::RvvUint8m1x8: return enum_constant_RvvUint8m1x8_392;
    case clang::BuiltinType::RvvUint8m2x2: return enum_constant_RvvUint8m2x2_393;
    case clang::BuiltinType::RvvUint8m2x3: return enum_constant_RvvUint8m2x3_394;
    case clang::BuiltinType::RvvUint8m2x4: return enum_constant_RvvUint8m2x4_395;
    case clang::BuiltinType::RvvUint8m4x2: return enum_constant_RvvUint8m4x2_396;
    case clang::BuiltinType::RvvInt16mf4x2: return enum_constant_RvvInt16mf4x2_397;
    case clang::BuiltinType::RvvInt16mf4x3: return enum_constant_RvvInt16mf4x3_398;
    case clang::BuiltinType::RvvInt16mf4x4: return enum_constant_RvvInt16mf4x4_399;
    case clang::BuiltinType::RvvInt16mf4x5: return enum_constant_RvvInt16mf4x5_400;
    case clang::BuiltinType::RvvInt16mf4x6: return enum_constant_RvvInt16mf4x6_401;
    case clang::BuiltinType::RvvInt16mf4x7: return enum_constant_RvvInt16mf4x7_402;
    case clang::BuiltinType::RvvInt16mf4x8: return enum_constant_RvvInt16mf4x8_403;
    case clang::BuiltinType::RvvInt16mf2x2: return enum_constant_RvvInt16mf2x2_404;
    case clang::BuiltinType::RvvInt16mf2x3: return enum_constant_RvvInt16mf2x3_405;
    case clang::BuiltinType::RvvInt16mf2x4: return enum_constant_RvvInt16mf2x4_406;
    case clang::BuiltinType::RvvInt16mf2x5: return enum_constant_RvvInt16mf2x5_407;
    case clang::BuiltinType::RvvInt16mf2x6: return enum_constant_RvvInt16mf2x6_408;
    case clang::BuiltinType::RvvInt16mf2x7: return enum_constant_RvvInt16mf2x7_409;
    case clang::BuiltinType::RvvInt16mf2x8: return enum_constant_RvvInt16mf2x8_410;
    case clang::BuiltinType::RvvInt16m1x2: return enum_constant_RvvInt16m1x2_411;
    case clang::BuiltinType::RvvInt16m1x3: return enum_constant_RvvInt16m1x3_412;
    case clang::BuiltinType::RvvInt16m1x4: return enum_constant_RvvInt16m1x4_413;
    case clang::BuiltinType::RvvInt16m1x5: return enum_constant_RvvInt16m1x5_414;
    case clang::BuiltinType::RvvInt16m1x6: return enum_constant_RvvInt16m1x6_415;
    case clang::BuiltinType::RvvInt16m1x7: return enum_constant_RvvInt16m1x7_416;
    case clang::BuiltinType::RvvInt16m1x8: return enum_constant_RvvInt16m1x8_417;
    case clang::BuiltinType::RvvInt16m2x2: return enum_constant_RvvInt16m2x2_418;
    case clang::BuiltinType::RvvInt16m2x3: return enum_constant_RvvInt16m2x3_419;
    case clang::BuiltinType::RvvInt16m2x4: return enum_constant_RvvInt16m2x4_420;
    case clang::BuiltinType::RvvInt16m4x2: return enum_constant_RvvInt16m4x2_421;
    case clang::BuiltinType::RvvUint16mf4x2: return enum_constant_RvvUint16mf4x2_422;
    case clang::BuiltinType::RvvUint16mf4x3: return enum_constant_RvvUint16mf4x3_423;
    case clang::BuiltinType::RvvUint16mf4x4: return enum_constant_RvvUint16mf4x4_424;
    case clang::BuiltinType::RvvUint16mf4x5: return enum_constant_RvvUint16mf4x5_425;
    case clang::BuiltinType::RvvUint16mf4x6: return enum_constant_RvvUint16mf4x6_426;
    case clang::BuiltinType::RvvUint16mf4x7: return enum_constant_RvvUint16mf4x7_427;
    case clang::BuiltinType::RvvUint16mf4x8: return enum_constant_RvvUint16mf4x8_428;
    case clang::BuiltinType::RvvUint16mf2x2: return enum_constant_RvvUint16mf2x2_429;
    case clang::BuiltinType::RvvUint16mf2x3: return enum_constant_RvvUint16mf2x3_430;
    case clang::BuiltinType::RvvUint16mf2x4: return enum_constant_RvvUint16mf2x4_431;
    case clang::BuiltinType::RvvUint16mf2x5: return enum_constant_RvvUint16mf2x5_432;
    case clang::BuiltinType::RvvUint16mf2x6: return enum_constant_RvvUint16mf2x6_433;
    case clang::BuiltinType::RvvUint16mf2x7: return enum_constant_RvvUint16mf2x7_434;
    case clang::BuiltinType::RvvUint16mf2x8: return enum_constant_RvvUint16mf2x8_435;
    case clang::BuiltinType::RvvUint16m1x2: return enum_constant_RvvUint16m1x2_436;
    case clang::BuiltinType::RvvUint16m1x3: return enum_constant_RvvUint16m1x3_437;
    case clang::BuiltinType::RvvUint16m1x4: return enum_constant_RvvUint16m1x4_438;
    case clang::BuiltinType::RvvUint16m1x5: return enum_constant_RvvUint16m1x5_439;
    case clang::BuiltinType::RvvUint16m1x6: return enum_constant_RvvUint16m1x6_440;
    case clang::BuiltinType::RvvUint16m1x7: return enum_constant_RvvUint16m1x7_441;
    case clang::BuiltinType::RvvUint16m1x8: return enum_constant_RvvUint16m1x8_442;
    case clang::BuiltinType::RvvUint16m2x2: return enum_constant_RvvUint16m2x2_443;
    case clang::BuiltinType::RvvUint16m2x3: return enum_constant_RvvUint16m2x3_444;
    case clang::BuiltinType::RvvUint16m2x4: return enum_constant_RvvUint16m2x4_445;
    case clang::BuiltinType::RvvUint16m4x2: return enum_constant_RvvUint16m4x2_446;
    case clang::BuiltinType::RvvInt32mf2x2: return enum_constant_RvvInt32mf2x2_447;
    case clang::BuiltinType::RvvInt32mf2x3: return enum_constant_RvvInt32mf2x3_448;
    case clang::BuiltinType::RvvInt32mf2x4: return enum_constant_RvvInt32mf2x4_449;
    case clang::BuiltinType::RvvInt32mf2x5: return enum_constant_RvvInt32mf2x5_450;
    case clang::BuiltinType::RvvInt32mf2x6: return enum_constant_RvvInt32mf2x6_451;
    case clang::BuiltinType::RvvInt32mf2x7: return enum_constant_RvvInt32mf2x7_452;
    case clang::BuiltinType::RvvInt32mf2x8: return enum_constant_RvvInt32mf2x8_453;
    case clang::BuiltinType::RvvInt32m1x2: return enum_constant_RvvInt32m1x2_454;
    case clang::BuiltinType::RvvInt32m1x3: return enum_constant_RvvInt32m1x3_455;
    case clang::BuiltinType::RvvInt32m1x4: return enum_constant_RvvInt32m1x4_456;
    case clang::BuiltinType::RvvInt32m1x5: return enum_constant_RvvInt32m1x5_457;
    case clang::BuiltinType::RvvInt32m1x6: return enum_constant_RvvInt32m1x6_458;
    case clang::BuiltinType::RvvInt32m1x7: return enum_constant_RvvInt32m1x7_459;
    case clang::BuiltinType::RvvInt32m1x8: return enum_constant_RvvInt32m1x8_460;
    case clang::BuiltinType::RvvInt32m2x2: return enum_constant_RvvInt32m2x2_461;
    case clang::BuiltinType::RvvInt32m2x3: return enum_constant_RvvInt32m2x3_462;
    case clang::BuiltinType::RvvInt32m2x4: return enum_constant_RvvInt32m2x4_463;
    case clang::BuiltinType::RvvInt32m4x2: return enum_constant_RvvInt32m4x2_464;
    case clang::BuiltinType::RvvUint32mf2x2: return enum_constant_RvvUint32mf2x2_465;
    case clang::BuiltinType::RvvUint32mf2x3: return enum_constant_RvvUint32mf2x3_466;
    case clang::BuiltinType::RvvUint32mf2x4: return enum_constant_RvvUint32mf2x4_467;
    case clang::BuiltinType::RvvUint32mf2x5: return enum_constant_RvvUint32mf2x5_468;
    case clang::BuiltinType::RvvUint32mf2x6: return enum_constant_RvvUint32mf2x6_469;
    case clang::BuiltinType::RvvUint32mf2x7: return enum_constant_RvvUint32mf2x7_470;
    case clang::BuiltinType::RvvUint32mf2x8: return enum_constant_RvvUint32mf2x8_471;
    case clang::BuiltinType::RvvUint32m1x2: return enum_constant_RvvUint32m1x2_472;
    case clang::BuiltinType::RvvUint32m1x3: return enum_constant_RvvUint32m1x3_473;
    case clang::BuiltinType::RvvUint32m1x4: return enum_constant_RvvUint32m1x4_474;
    case clang::BuiltinType::RvvUint32m1x5: return enum_constant_RvvUint32m1x5_475;
    case clang::BuiltinType::RvvUint32m1x6: return enum_constant_RvvUint32m1x6_476;
    case clang::BuiltinType::RvvUint32m1x7: return enum_constant_RvvUint32m1x7_477;
    case clang::BuiltinType::RvvUint32m1x8: return enum_constant_RvvUint32m1x8_478;
    case clang::BuiltinType::RvvUint32m2x2: return enum_constant_RvvUint32m2x2_479;
    case clang::BuiltinType::RvvUint32m2x3: return enum_constant_RvvUint32m2x3_480;
    case clang::BuiltinType::RvvUint32m2x4: return enum_constant_RvvUint32m2x4_481;
    case clang::BuiltinType::RvvUint32m4x2: return enum_constant_RvvUint32m4x2_482;
    case clang::BuiltinType::RvvInt64m1x2: return enum_constant_RvvInt64m1x2_483;
    case clang::BuiltinType::RvvInt64m1x3: return enum_constant_RvvInt64m1x3_484;
    case clang::BuiltinType::RvvInt64m1x4: return enum_constant_RvvInt64m1x4_485;
    case clang::BuiltinType::RvvInt64m1x5: return enum_constant_RvvInt64m1x5_486;
    case clang::BuiltinType::RvvInt64m1x6: return enum_constant_RvvInt64m1x6_487;
    case clang::BuiltinType::RvvInt64m1x7: return enum_constant_RvvInt64m1x7_488;
    case clang::BuiltinType::RvvInt64m1x8: return enum_constant_RvvInt64m1x8_489;
    case clang::BuiltinType::RvvInt64m2x2: return enum_constant_RvvInt64m2x2_490;
    case clang::BuiltinType::RvvInt64m2x3: return enum_constant_RvvInt64m2x3_491;
    case clang::BuiltinType::RvvInt64m2x4: return enum_constant_RvvInt64m2x4_492;
    case clang::BuiltinType::RvvInt64m4x2: return enum_constant_RvvInt64m4x2_493;
    case clang::BuiltinType::RvvUint64m1x2: return enum_constant_RvvUint64m1x2_494;
    case clang::BuiltinType::RvvUint64m1x3: return enum_constant_RvvUint64m1x3_495;
    case clang::BuiltinType::RvvUint64m1x4: return enum_constant_RvvUint64m1x4_496;
    case clang::BuiltinType::RvvUint64m1x5: return enum_constant_RvvUint64m1x5_497;
    case clang::BuiltinType::RvvUint64m1x6: return enum_constant_RvvUint64m1x6_498;
    case clang::BuiltinType::RvvUint64m1x7: return enum_constant_RvvUint64m1x7_499;
    case clang::BuiltinType::RvvUint64m1x8: return enum_constant_RvvUint64m1x8_500;
    case clang::BuiltinType::RvvUint64m2x2: return enum_constant_RvvUint64m2x2_501;
    case clang::BuiltinType::RvvUint64m2x3: return enum_constant_RvvUint64m2x3_502;
    case clang::BuiltinType::RvvUint64m2x4: return enum_constant_RvvUint64m2x4_503;
    case clang::BuiltinType::RvvUint64m4x2: return enum_constant_RvvUint64m4x2_504;
    case clang::BuiltinType::RvvFloat16mf4x2: return enum_constant_RvvFloat16mf4x2_505;
    case clang::BuiltinType::RvvFloat16mf4x3: return enum_constant_RvvFloat16mf4x3_506;
    case clang::BuiltinType::RvvFloat16mf4x4: return enum_constant_RvvFloat16mf4x4_507;
    case clang::BuiltinType::RvvFloat16mf4x5: return enum_constant_RvvFloat16mf4x5_508;
    case clang::BuiltinType::RvvFloat16mf4x6: return enum_constant_RvvFloat16mf4x6_509;
    case clang::BuiltinType::RvvFloat16mf4x7: return enum_constant_RvvFloat16mf4x7_510;
    case clang::BuiltinType::RvvFloat16mf4x8: return enum_constant_RvvFloat16mf4x8_511;
    case clang::BuiltinType::RvvFloat16mf2x2: return enum_constant_RvvFloat16mf2x2_512;
    case clang::BuiltinType::RvvFloat16mf2x3: return enum_constant_RvvFloat16mf2x3_513;
    case clang::BuiltinType::RvvFloat16mf2x4: return enum_constant_RvvFloat16mf2x4_514;
    case clang::BuiltinType::RvvFloat16mf2x5: return enum_constant_RvvFloat16mf2x5_515;
    case clang::BuiltinType::RvvFloat16mf2x6: return enum_constant_RvvFloat16mf2x6_516;
    case clang::BuiltinType::RvvFloat16mf2x7: return enum_constant_RvvFloat16mf2x7_517;
    case clang::BuiltinType::RvvFloat16mf2x8: return enum_constant_RvvFloat16mf2x8_518;
    case clang::BuiltinType::RvvFloat16m1x2: return enum_constant_RvvFloat16m1x2_519;
    case clang::BuiltinType::RvvFloat16m1x3: return enum_constant_RvvFloat16m1x3_520;
    case clang::BuiltinType::RvvFloat16m1x4: return enum_constant_RvvFloat16m1x4_521;
    case clang::BuiltinType::RvvFloat16m1x5: return enum_constant_RvvFloat16m1x5_522;
    case clang::BuiltinType::RvvFloat16m1x6: return enum_constant_RvvFloat16m1x6_523;
    case clang::BuiltinType::RvvFloat16m1x7: return enum_constant_RvvFloat16m1x7_524;
    case clang::BuiltinType::RvvFloat16m1x8: return enum_constant_RvvFloat16m1x8_525;
    case clang::BuiltinType::RvvFloat16m2x2: return enum_constant_RvvFloat16m2x2_526;
    case clang::BuiltinType::RvvFloat16m2x3: return enum_constant_RvvFloat16m2x3_527;
    case clang::BuiltinType::RvvFloat16m2x4: return enum_constant_RvvFloat16m2x4_528;
    case clang::BuiltinType::RvvFloat16m4x2: return enum_constant_RvvFloat16m4x2_529;
    case clang::BuiltinType::RvvFloat32mf2x2: return enum_constant_RvvFloat32mf2x2_530;
    case clang::BuiltinType::RvvFloat32mf2x3: return enum_constant_RvvFloat32mf2x3_531;
    case clang::BuiltinType::RvvFloat32mf2x4: return enum_constant_RvvFloat32mf2x4_532;
    case clang::BuiltinType::RvvFloat32mf2x5: return enum_constant_RvvFloat32mf2x5_533;
    case clang::BuiltinType::RvvFloat32mf2x6: return enum_constant_RvvFloat32mf2x6_534;
    case clang::BuiltinType::RvvFloat32mf2x7: return enum_constant_RvvFloat32mf2x7_535;
    case clang::BuiltinType::RvvFloat32mf2x8: return enum_constant_RvvFloat32mf2x8_536;
    case clang::BuiltinType::RvvFloat32m1x2: return enum_constant_RvvFloat32m1x2_537;
    case clang::BuiltinType::RvvFloat32m1x3: return enum_constant_RvvFloat32m1x3_538;
    case clang::BuiltinType::RvvFloat32m1x4: return enum_constant_RvvFloat32m1x4_539;
    case clang::BuiltinType::RvvFloat32m1x5: return enum_constant_RvvFloat32m1x5_540;
    case clang::BuiltinType::RvvFloat32m1x6: return enum_constant_RvvFloat32m1x6_541;
    case clang::BuiltinType::RvvFloat32m1x7: return enum_constant_RvvFloat32m1x7_542;
    case clang::BuiltinType::RvvFloat32m1x8: return enum_constant_RvvFloat32m1x8_543;
    case clang::BuiltinType::RvvFloat32m2x2: return enum_constant_RvvFloat32m2x2_544;
    case clang::BuiltinType::RvvFloat32m2x3: return enum_constant_RvvFloat32m2x3_545;
    case clang::BuiltinType::RvvFloat32m2x4: return enum_constant_RvvFloat32m2x4_546;
    case clang::BuiltinType::RvvFloat32m4x2: return enum_constant_RvvFloat32m4x2_547;
    case clang::BuiltinType::RvvFloat64m1x2: return enum_constant_RvvFloat64m1x2_548;
    case clang::BuiltinType::RvvFloat64m1x3: return enum_constant_RvvFloat64m1x3_549;
    case clang::BuiltinType::RvvFloat64m1x4: return enum_constant_RvvFloat64m1x4_550;
    case clang::BuiltinType::RvvFloat64m1x5: return enum_constant_RvvFloat64m1x5_551;
    case clang::BuiltinType::RvvFloat64m1x6: return enum_constant_RvvFloat64m1x6_552;
    case clang::BuiltinType::RvvFloat64m1x7: return enum_constant_RvvFloat64m1x7_553;
    case clang::BuiltinType::RvvFloat64m1x8: return enum_constant_RvvFloat64m1x8_554;
    case clang::BuiltinType::RvvFloat64m2x2: return enum_constant_RvvFloat64m2x2_555;
    case clang::BuiltinType::RvvFloat64m2x3: return enum_constant_RvvFloat64m2x3_556;
    case clang::BuiltinType::RvvFloat64m2x4: return enum_constant_RvvFloat64m2x4_557;
    case clang::BuiltinType::RvvFloat64m4x2: return enum_constant_RvvFloat64m4x2_558;
    case clang::BuiltinType::RvvBFloat16mf4x2: return enum_constant_RvvBFloat16mf4x2_559;
    case clang::BuiltinType::RvvBFloat16mf4x3: return enum_constant_RvvBFloat16mf4x3_560;
    case clang::BuiltinType::RvvBFloat16mf4x4: return enum_constant_RvvBFloat16mf4x4_561;
    case clang::BuiltinType::RvvBFloat16mf4x5: return enum_constant_RvvBFloat16mf4x5_562;
    case clang::BuiltinType::RvvBFloat16mf4x6: return enum_constant_RvvBFloat16mf4x6_563;
    case clang::BuiltinType::RvvBFloat16mf4x7: return enum_constant_RvvBFloat16mf4x7_564;
    case clang::BuiltinType::RvvBFloat16mf4x8: return enum_constant_RvvBFloat16mf4x8_565;
    case clang::BuiltinType::RvvBFloat16mf2x2: return enum_constant_RvvBFloat16mf2x2_566;
    case clang::BuiltinType::RvvBFloat16mf2x3: return enum_constant_RvvBFloat16mf2x3_567;
    case clang::BuiltinType::RvvBFloat16mf2x4: return enum_constant_RvvBFloat16mf2x4_568;
    case clang::BuiltinType::RvvBFloat16mf2x5: return enum_constant_RvvBFloat16mf2x5_569;
    case clang::BuiltinType::RvvBFloat16mf2x6: return enum_constant_RvvBFloat16mf2x6_570;
    case clang::BuiltinType::RvvBFloat16mf2x7: return enum_constant_RvvBFloat16mf2x7_571;
    case clang::BuiltinType::RvvBFloat16mf2x8: return enum_constant_RvvBFloat16mf2x8_572;
    case clang::BuiltinType::RvvBFloat16m1x2: return enum_constant_RvvBFloat16m1x2_573;
    case clang::BuiltinType::RvvBFloat16m1x3: return enum_constant_RvvBFloat16m1x3_574;
    case clang::BuiltinType::RvvBFloat16m1x4: return enum_constant_RvvBFloat16m1x4_575;
    case clang::BuiltinType::RvvBFloat16m1x5: return enum_constant_RvvBFloat16m1x5_576;
    case clang::BuiltinType::RvvBFloat16m1x6: return enum_constant_RvvBFloat16m1x6_577;
    case clang::BuiltinType::RvvBFloat16m1x7: return enum_constant_RvvBFloat16m1x7_578;
    case clang::BuiltinType::RvvBFloat16m1x8: return enum_constant_RvvBFloat16m1x8_579;
    case clang::BuiltinType::RvvBFloat16m2x2: return enum_constant_RvvBFloat16m2x2_580;
    case clang::BuiltinType::RvvBFloat16m2x3: return enum_constant_RvvBFloat16m2x3_581;
    case clang::BuiltinType::RvvBFloat16m2x4: return enum_constant_RvvBFloat16m2x4_582;
    case clang::BuiltinType::RvvBFloat16m4x2: return enum_constant_RvvBFloat16m4x2_583;
    case clang::BuiltinType::WasmExternRef: return enum_constant_WasmExternRef_584;
    case clang::BuiltinType::Void: return enum_constant_Void_585;
    case clang::BuiltinType::Bool: return enum_constant_Bool_586;
    case clang::BuiltinType::Char_U: return enum_constant_Char_U_587;
    case clang::BuiltinType::UChar: return enum_constant_UChar_588;
    case clang::BuiltinType::WChar_U: return enum_constant_WChar_U_589;
    case clang::BuiltinType::Char8: return enum_constant_Char8_590;
    case clang::BuiltinType::Char16: return enum_constant_Char16_591;
    case clang::BuiltinType::Char32: return enum_constant_Char32_592;
    case clang::BuiltinType::UShort: return enum_constant_UShort_593;
    case clang::BuiltinType::UInt: return enum_constant_UInt_594;
    case clang::BuiltinType::ULong: return enum_constant_ULong_595;
    case clang::BuiltinType::ULongLong: return enum_constant_ULongLong_596;
    case clang::BuiltinType::UInt128: return enum_constant_UInt128_597;
    case clang::BuiltinType::Char_S: return enum_constant_Char_S_598;
    case clang::BuiltinType::SChar: return enum_constant_SChar_599;
    case clang::BuiltinType::WChar_S: return enum_constant_WChar_S_600;
    case clang::BuiltinType::Short: return enum_constant_Short_601;
    case clang::BuiltinType::Int: return enum_constant_Int_602;
    case clang::BuiltinType::Long: return enum_constant_Long_603;
    case clang::BuiltinType::LongLong: return enum_constant_LongLong_604;
    case clang::BuiltinType::Int128: return enum_constant_Int128_605;
    case clang::BuiltinType::ShortAccum: return enum_constant_ShortAccum_606;
    case clang::BuiltinType::Accum: return enum_constant_Accum_607;
    case clang::BuiltinType::LongAccum: return enum_constant_LongAccum_608;
    case clang::BuiltinType::UShortAccum: return enum_constant_UShortAccum_609;
    case clang::BuiltinType::UAccum: return enum_constant_UAccum_610;
    case clang::BuiltinType::ULongAccum: return enum_constant_ULongAccum_611;
    case clang::BuiltinType::ShortFract: return enum_constant_ShortFract_612;
    case clang::BuiltinType::Fract: return enum_constant_Fract_613;
    case clang::BuiltinType::LongFract: return enum_constant_LongFract_614;
    case clang::BuiltinType::UShortFract: return enum_constant_UShortFract_615;
    case clang::BuiltinType::UFract: return enum_constant_UFract_616;
    case clang::BuiltinType::ULongFract: return enum_constant_ULongFract_617;
    case clang::BuiltinType::SatShortAccum: return enum_constant_SatShortAccum_618;
    case clang::BuiltinType::SatAccum: return enum_constant_SatAccum_619;
    case clang::BuiltinType::SatLongAccum: return enum_constant_SatLongAccum_620;
    case clang::BuiltinType::SatUShortAccum: return enum_constant_SatUShortAccum_621;
    case clang::BuiltinType::SatUAccum: return enum_constant_SatUAccum_622;
    case clang::BuiltinType::SatULongAccum: return enum_constant_SatULongAccum_623;
    case clang::BuiltinType::SatShortFract: return enum_constant_SatShortFract_624;
    case clang::BuiltinType::SatFract: return enum_constant_SatFract_625;
    case clang::BuiltinType::SatLongFract: return enum_constant_SatLongFract_626;
    case clang::BuiltinType::SatUShortFract: return enum_constant_SatUShortFract_627;
    case clang::BuiltinType::SatUFract: return enum_constant_SatUFract_628;
    case clang::BuiltinType::SatULongFract: return enum_constant_SatULongFract_629;
    case clang::BuiltinType::Half: return enum_constant_Half_630;
    case clang::BuiltinType::Float: return enum_constant_Float_631;
    case clang::BuiltinType::Double: return enum_constant_Double_632;
    case clang::BuiltinType::LongDouble: return enum_constant_LongDouble_633;
    case clang::BuiltinType::Float16: return enum_constant_Float16_634;
    case clang::BuiltinType::BFloat16: return enum_constant_BFloat16_635;
    case clang::BuiltinType::Float128: return enum_constant_Float128_636;
    case clang::BuiltinType::Ibm128: return enum_constant_Ibm128_637;
    case clang::BuiltinType::NullPtr: return enum_constant_NullPtr_638;
    case clang::BuiltinType::ObjCId: return enum_constant_ObjCId_639;
    case clang::BuiltinType::ObjCClass: return enum_constant_ObjCClass_640;
    case clang::BuiltinType::ObjCSel: return enum_constant_ObjCSel_641;
    case clang::BuiltinType::OCLSampler: return enum_constant_OCLSampler_642;
    case clang::BuiltinType::OCLEvent: return enum_constant_OCLEvent_643;
    case clang::BuiltinType::OCLClkEvent: return enum_constant_OCLClkEvent_644;
    case clang::BuiltinType::OCLQueue: return enum_constant_OCLQueue_645;
    case clang::BuiltinType::OCLReserveID: return enum_constant_OCLReserveID_646;
    case clang::BuiltinType::Dependent: return enum_constant_Dependent_647;
    case clang::BuiltinType::Overload: return enum_constant_Overload_648;
    case clang::BuiltinType::BoundMember: return enum_constant_BoundMember_649;
    case clang::BuiltinType::PseudoObject: return enum_constant_PseudoObject_650;
    case clang::BuiltinType::UnknownAny: return enum_constant_UnknownAny_651;
    case clang::BuiltinType::BuiltinFn: return enum_constant_BuiltinFn_652;
    case clang::BuiltinType::ARCUnbridgedCast: return enum_constant_ARCUnbridgedCast_653;
    case clang::BuiltinType::IncompleteMatrixIdx: return enum_constant_IncompleteMatrixIdx_654;
    case clang::BuiltinType::OMPArraySection: return enum_constant_OMPArraySection_655;
    case clang::BuiltinType::OMPArrayShaping: return enum_constant_OMPArrayShaping_656;
    case clang::BuiltinType::OMPIterator: return enum_constant_OMPIterator_657;
    default: llvm::errs() << "clang::BuiltinType::Kind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CXXConstructionKind e) {
  switch(e) {
    case clang::CXXConstructionKind::Complete: return enum_constant_Complete_660;
    case clang::CXXConstructionKind::NonVirtualBase: return enum_constant_NonVirtualBase_661;
    case clang::CXXConstructionKind::VirtualBase: return enum_constant_VirtualBase_662;
    case clang::CXXConstructionKind::Delegating: return enum_constant_Delegating_663;
    default: llvm::errs() << "clang::CXXConstructionKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CXXNewInitializationStyle e) {
  switch(e) {
    case clang::CXXNewInitializationStyle::None: return enum_constant_None_665;
    case clang::CXXNewInitializationStyle::Parens: return enum_constant_Parens_666;
    case clang::CXXNewInitializationStyle::Braces: return enum_constant_Braces_667;
    default: llvm::errs() << "clang::CXXNewInitializationStyle: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CallExpr::ADLCallKind e) {
  switch(e) {
    case clang::CallExpr::ADLCallKind::NotADL: return enum_constant_NotADL_669;
    case clang::CallExpr::ADLCallKind::UsesADL: return enum_constant_UsesADL_670;
    default: llvm::errs() << "clang::CallExpr::ADLCallKind: Unexpected enum value: " << static_cast<bool>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CallingConv e) {
  switch(e) {
    case clang::CC_C: return enum_constant_CC_C_672;
    case clang::CC_X86StdCall: return enum_constant_CC_X86StdCall_673;
    case clang::CC_X86FastCall: return enum_constant_CC_X86FastCall_674;
    case clang::CC_X86ThisCall: return enum_constant_CC_X86ThisCall_675;
    case clang::CC_X86VectorCall: return enum_constant_CC_X86VectorCall_676;
    case clang::CC_X86Pascal: return enum_constant_CC_X86Pascal_677;
    case clang::CC_Win64: return enum_constant_CC_Win64_678;
    case clang::CC_X86_64SysV: return enum_constant_CC_X86_64SysV_679;
    case clang::CC_X86RegCall: return enum_constant_CC_X86RegCall_680;
    case clang::CC_AAPCS: return enum_constant_CC_AAPCS_681;
    case clang::CC_AAPCS_VFP: return enum_constant_CC_AAPCS_VFP_682;
    case clang::CC_IntelOclBicc: return enum_constant_CC_IntelOclBicc_683;
    case clang::CC_SpirFunction: return enum_constant_CC_SpirFunction_684;
    case clang::CC_OpenCLKernel: return enum_constant_CC_OpenCLKernel_685;
    case clang::CC_Swift: return enum_constant_CC_Swift_686;
    case clang::CC_SwiftAsync: return enum_constant_CC_SwiftAsync_687;
    case clang::CC_PreserveMost: return enum_constant_CC_PreserveMost_688;
    case clang::CC_PreserveAll: return enum_constant_CC_PreserveAll_689;
    case clang::CC_AArch64VectorCall: return enum_constant_CC_AArch64VectorCall_690;
    case clang::CC_AArch64SVEPCS: return enum_constant_CC_AArch64SVEPCS_691;
    case clang::CC_AMDGPUKernelCall: return enum_constant_CC_AMDGPUKernelCall_692;
    case clang::CC_M68kRTD: return enum_constant_CC_M68kRTD_693;
    default: llvm::errs() << "clang::CallingConv: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CanThrowResult e) {
  switch(e) {
    case clang::CT_Cannot: return enum_constant_CT_Cannot_695;
    case clang::CT_Dependent: return enum_constant_CT_Dependent_696;
    case clang::CT_Can: return enum_constant_CT_Can_697;
    default: llvm::errs() << "clang::CanThrowResult: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CapturedRegionKind e) {
  switch(e) {
    case clang::CR_Default: return enum_constant_CR_Default_699;
    case clang::CR_ObjCAtFinally: return enum_constant_CR_ObjCAtFinally_700;
    case clang::CR_OpenMP: return enum_constant_CR_OpenMP_701;
    default: llvm::errs() << "clang::CapturedRegionKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CastKind e) {
  switch(e) {
    case clang::CK_Dependent: return enum_constant_CK_Dependent_703;
    case clang::CK_BitCast: return enum_constant_CK_BitCast_704;
    case clang::CK_LValueBitCast: return enum_constant_CK_LValueBitCast_705;
    case clang::CK_LValueToRValueBitCast: return enum_constant_CK_LValueToRValueBitCast_706;
    case clang::CK_LValueToRValue: return enum_constant_CK_LValueToRValue_707;
    case clang::CK_NoOp: return enum_constant_CK_NoOp_708;
    case clang::CK_BaseToDerived: return enum_constant_CK_BaseToDerived_709;
    case clang::CK_DerivedToBase: return enum_constant_CK_DerivedToBase_710;
    case clang::CK_UncheckedDerivedToBase: return enum_constant_CK_UncheckedDerivedToBase_711;
    case clang::CK_Dynamic: return enum_constant_CK_Dynamic_712;
    case clang::CK_ToUnion: return enum_constant_CK_ToUnion_713;
    case clang::CK_ArrayToPointerDecay: return enum_constant_CK_ArrayToPointerDecay_714;
    case clang::CK_FunctionToPointerDecay: return enum_constant_CK_FunctionToPointerDecay_715;
    case clang::CK_NullToPointer: return enum_constant_CK_NullToPointer_716;
    case clang::CK_NullToMemberPointer: return enum_constant_CK_NullToMemberPointer_717;
    case clang::CK_BaseToDerivedMemberPointer: return enum_constant_CK_BaseToDerivedMemberPointer_718;
    case clang::CK_DerivedToBaseMemberPointer: return enum_constant_CK_DerivedToBaseMemberPointer_719;
    case clang::CK_MemberPointerToBoolean: return enum_constant_CK_MemberPointerToBoolean_720;
    case clang::CK_ReinterpretMemberPointer: return enum_constant_CK_ReinterpretMemberPointer_721;
    case clang::CK_UserDefinedConversion: return enum_constant_CK_UserDefinedConversion_722;
    case clang::CK_ConstructorConversion: return enum_constant_CK_ConstructorConversion_723;
    case clang::CK_IntegralToPointer: return enum_constant_CK_IntegralToPointer_724;
    case clang::CK_PointerToIntegral: return enum_constant_CK_PointerToIntegral_725;
    case clang::CK_PointerToBoolean: return enum_constant_CK_PointerToBoolean_726;
    case clang::CK_ToVoid: return enum_constant_CK_ToVoid_727;
    case clang::CK_MatrixCast: return enum_constant_CK_MatrixCast_728;
    case clang::CK_VectorSplat: return enum_constant_CK_VectorSplat_729;
    case clang::CK_IntegralCast: return enum_constant_CK_IntegralCast_730;
    case clang::CK_IntegralToBoolean: return enum_constant_CK_IntegralToBoolean_731;
    case clang::CK_IntegralToFloating: return enum_constant_CK_IntegralToFloating_732;
    case clang::CK_FloatingToFixedPoint: return enum_constant_CK_FloatingToFixedPoint_733;
    case clang::CK_FixedPointToFloating: return enum_constant_CK_FixedPointToFloating_734;
    case clang::CK_FixedPointCast: return enum_constant_CK_FixedPointCast_735;
    case clang::CK_FixedPointToIntegral: return enum_constant_CK_FixedPointToIntegral_736;
    case clang::CK_IntegralToFixedPoint: return enum_constant_CK_IntegralToFixedPoint_737;
    case clang::CK_FixedPointToBoolean: return enum_constant_CK_FixedPointToBoolean_738;
    case clang::CK_FloatingToIntegral: return enum_constant_CK_FloatingToIntegral_739;
    case clang::CK_FloatingToBoolean: return enum_constant_CK_FloatingToBoolean_740;
    case clang::CK_BooleanToSignedIntegral: return enum_constant_CK_BooleanToSignedIntegral_741;
    case clang::CK_FloatingCast: return enum_constant_CK_FloatingCast_742;
    case clang::CK_CPointerToObjCPointerCast: return enum_constant_CK_CPointerToObjCPointerCast_743;
    case clang::CK_BlockPointerToObjCPointerCast: return enum_constant_CK_BlockPointerToObjCPointerCast_744;
    case clang::CK_AnyPointerToBlockPointerCast: return enum_constant_CK_AnyPointerToBlockPointerCast_745;
    case clang::CK_ObjCObjectLValueCast: return enum_constant_CK_ObjCObjectLValueCast_746;
    case clang::CK_FloatingRealToComplex: return enum_constant_CK_FloatingRealToComplex_747;
    case clang::CK_FloatingComplexToReal: return enum_constant_CK_FloatingComplexToReal_748;
    case clang::CK_FloatingComplexToBoolean: return enum_constant_CK_FloatingComplexToBoolean_749;
    case clang::CK_FloatingComplexCast: return enum_constant_CK_FloatingComplexCast_750;
    case clang::CK_FloatingComplexToIntegralComplex: return enum_constant_CK_FloatingComplexToIntegralComplex_751;
    case clang::CK_IntegralRealToComplex: return enum_constant_CK_IntegralRealToComplex_752;
    case clang::CK_IntegralComplexToReal: return enum_constant_CK_IntegralComplexToReal_753;
    case clang::CK_IntegralComplexToBoolean: return enum_constant_CK_IntegralComplexToBoolean_754;
    case clang::CK_IntegralComplexCast: return enum_constant_CK_IntegralComplexCast_755;
    case clang::CK_IntegralComplexToFloatingComplex: return enum_constant_CK_IntegralComplexToFloatingComplex_756;
    case clang::CK_ARCProduceObject: return enum_constant_CK_ARCProduceObject_757;
    case clang::CK_ARCConsumeObject: return enum_constant_CK_ARCConsumeObject_758;
    case clang::CK_ARCReclaimReturnedObject: return enum_constant_CK_ARCReclaimReturnedObject_759;
    case clang::CK_ARCExtendBlockObject: return enum_constant_CK_ARCExtendBlockObject_760;
    case clang::CK_AtomicToNonAtomic: return enum_constant_CK_AtomicToNonAtomic_761;
    case clang::CK_NonAtomicToAtomic: return enum_constant_CK_NonAtomicToAtomic_762;
    case clang::CK_CopyAndAutoreleaseBlockObject: return enum_constant_CK_CopyAndAutoreleaseBlockObject_763;
    case clang::CK_BuiltinFnToFnPtr: return enum_constant_CK_BuiltinFnToFnPtr_764;
    case clang::CK_ZeroToOCLOpaqueType: return enum_constant_CK_ZeroToOCLOpaqueType_765;
    case clang::CK_AddressSpaceConversion: return enum_constant_CK_AddressSpaceConversion_766;
    case clang::CK_IntToOCLSampler: return enum_constant_CK_IntToOCLSampler_767;
    default: llvm::errs() << "clang::CastKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::CharacterLiteralKind e) {
  switch(e) {
    case clang::CharacterLiteralKind::Ascii: return enum_constant_Ascii_769;
    case clang::CharacterLiteralKind::Wide: return enum_constant_Wide_770;
    case clang::CharacterLiteralKind::UTF8: return enum_constant_UTF8_771;
    case clang::CharacterLiteralKind::UTF16: return enum_constant_UTF16_772;
    case clang::CharacterLiteralKind::UTF32: return enum_constant_UTF32_773;
    default: llvm::errs() << "clang::CharacterLiteralKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ConstantResultStorageKind e) {
  switch(e) {
    case clang::ConstantResultStorageKind::None: return enum_constant_None_775;
    case clang::ConstantResultStorageKind::Int64: return enum_constant_Int64_776;
    case clang::ConstantResultStorageKind::APValue: return enum_constant_APValue_777;
    default: llvm::errs() << "clang::ConstantResultStorageKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ConstexprSpecKind e) {
  switch(e) {
    case clang::ConstexprSpecKind::Unspecified: return enum_constant_Unspecified_779;
    case clang::ConstexprSpecKind::Constexpr: return enum_constant_Constexpr_780;
    case clang::ConstexprSpecKind::Consteval: return enum_constant_Consteval_781;
    case clang::ConstexprSpecKind::Constinit: return enum_constant_Constinit_782;
    default: llvm::errs() << "clang::ConstexprSpecKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::Decl::FriendObjectKind e) {
  switch(e) {
    case clang::Decl::FOK_None: return enum_constant_FOK_None_784;
    case clang::Decl::FOK_Declared: return enum_constant_FOK_Declared_785;
    case clang::Decl::FOK_Undeclared: return enum_constant_FOK_Undeclared_786;
    default: llvm::errs() << "clang::Decl::FriendObjectKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::Decl::ModuleOwnershipKind e) {
  switch(e) {
    case clang::Decl::ModuleOwnershipKind::Unowned: return enum_constant_Unowned_788;
    case clang::Decl::ModuleOwnershipKind::Visible: return enum_constant_Visible_789;
    case clang::Decl::ModuleOwnershipKind::VisibleWhenImported: return enum_constant_VisibleWhenImported_790;
    case clang::Decl::ModuleOwnershipKind::ReachableWhenImported: return enum_constant_ReachableWhenImported_791;
    case clang::Decl::ModuleOwnershipKind::ModulePrivate: return enum_constant_ModulePrivate_792;
    default: llvm::errs() << "clang::Decl::ModuleOwnershipKind: Unexpected enum value: " << static_cast<unsigned char>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::Decl::ObjCDeclQualifier e) {
  switch(e) {
    case clang::Decl::OBJC_TQ_None: return enum_constant_OBJC_TQ_None_794;
    case clang::Decl::OBJC_TQ_In: return enum_constant_OBJC_TQ_In_795;
    case clang::Decl::OBJC_TQ_Inout: return enum_constant_OBJC_TQ_Inout_796;
    case clang::Decl::OBJC_TQ_Out: return enum_constant_OBJC_TQ_Out_797;
    case clang::Decl::OBJC_TQ_Bycopy: return enum_constant_OBJC_TQ_Bycopy_798;
    case clang::Decl::OBJC_TQ_Byref: return enum_constant_OBJC_TQ_Byref_799;
    case clang::Decl::OBJC_TQ_Oneway: return enum_constant_OBJC_TQ_Oneway_800;
    case clang::Decl::OBJC_TQ_CSNullability: return enum_constant_OBJC_TQ_CSNullability_801;
    default: llvm::errs() << "clang::Decl::ObjCDeclQualifier: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::DeductionCandidate e) {
  switch(e) {
    case clang::DeductionCandidate::Normal: return enum_constant_Normal_803;
    case clang::DeductionCandidate::Copy: return enum_constant_Copy_804;
    case clang::DeductionCandidate::Aggregate: return enum_constant_Aggregate_805;
    default: llvm::errs() << "clang::DeductionCandidate: Unexpected enum value: " << static_cast<unsigned char>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ElaboratedTypeKeyword e) {
  switch(e) {
    case clang::ElaboratedTypeKeyword::Struct: return enum_constant_Struct_807;
    case clang::ElaboratedTypeKeyword::Interface: return enum_constant_Interface_808;
    case clang::ElaboratedTypeKeyword::Union: return enum_constant_Union_809;
    case clang::ElaboratedTypeKeyword::Class: return enum_constant_Class_810;
    case clang::ElaboratedTypeKeyword::Enum: return enum_constant_Enum_811;
    case clang::ElaboratedTypeKeyword::Typename: return enum_constant_Typename_812;
    case clang::ElaboratedTypeKeyword::None: return enum_constant_None_813;
    default: llvm::errs() << "clang::ElaboratedTypeKeyword: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ExceptionSpecificationType e) {
  switch(e) {
    case clang::EST_None: return enum_constant_EST_None_815;
    case clang::EST_DynamicNone: return enum_constant_EST_DynamicNone_816;
    case clang::EST_Dynamic: return enum_constant_EST_Dynamic_817;
    case clang::EST_MSAny: return enum_constant_EST_MSAny_818;
    case clang::EST_NoThrow: return enum_constant_EST_NoThrow_819;
    case clang::EST_BasicNoexcept: return enum_constant_EST_BasicNoexcept_820;
    case clang::EST_DependentNoexcept: return enum_constant_EST_DependentNoexcept_821;
    case clang::EST_NoexceptFalse: return enum_constant_EST_NoexceptFalse_822;
    case clang::EST_NoexceptTrue: return enum_constant_EST_NoexceptTrue_823;
    case clang::EST_Unevaluated: return enum_constant_EST_Unevaluated_824;
    case clang::EST_Uninstantiated: return enum_constant_EST_Uninstantiated_825;
    case clang::EST_Unparsed: return enum_constant_EST_Unparsed_826;
    default: llvm::errs() << "clang::ExceptionSpecificationType: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ExprDependenceScope::ExprDependence e) {
  switch(e) {
    case clang::ExprDependenceScope::UnexpandedPack: return enum_constant_UnexpandedPack_828;
    case clang::ExprDependenceScope::Instantiation: return enum_constant_Instantiation_829;
    case clang::ExprDependenceScope::Type: return enum_constant_Type_830;
    case clang::ExprDependenceScope::Value: return enum_constant_Value_831;
    case clang::ExprDependenceScope::Error: return enum_constant_Error_832;
    case clang::ExprDependenceScope::None: return enum_constant_None_833;
    case clang::ExprDependenceScope::All: return enum_constant_All_834;
    case clang::ExprDependenceScope::TypeValue: return enum_constant_TypeValue_835;
    case clang::ExprDependenceScope::TypeInstantiation: return enum_constant_TypeInstantiation_836;
    case clang::ExprDependenceScope::ValueInstantiation: return enum_constant_ValueInstantiation_837;
    case clang::ExprDependenceScope::TypeValueInstantiation: return enum_constant_TypeValueInstantiation_838;
    case clang::ExprDependenceScope::ErrorDependent: return enum_constant_ErrorDependent_839;
    default: llvm::errs() << "clang::ExprDependenceScope::ExprDependence: Unexpected enum value: " << static_cast<uint32_t>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ExprObjectKind e) {
  switch(e) {
    case clang::OK_Ordinary: return enum_constant_OK_Ordinary_842;
    case clang::OK_BitField: return enum_constant_OK_BitField_843;
    case clang::OK_VectorComponent: return enum_constant_OK_VectorComponent_844;
    case clang::OK_ObjCProperty: return enum_constant_OK_ObjCProperty_845;
    case clang::OK_ObjCSubscript: return enum_constant_OK_ObjCSubscript_846;
    case clang::OK_MatrixComponent: return enum_constant_OK_MatrixComponent_847;
    default: llvm::errs() << "clang::ExprObjectKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ExprValueKind e) {
  switch(e) {
    case clang::VK_PRValue: return enum_constant_VK_PRValue_849;
    case clang::VK_LValue: return enum_constant_VK_LValue_850;
    case clang::VK_XValue: return enum_constant_VK_XValue_851;
    default: llvm::errs() << "clang::ExprValueKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ExpressionTrait e) {
  switch(e) {
    case clang::ET_IsLValueExpr: return enum_constant_ET_IsLValueExpr_853;
    case clang::ET_IsRValueExpr: return enum_constant_ET_IsRValueExpr_854;
    default: llvm::errs() << "clang::ExpressionTrait: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::FunctionDecl::TemplatedKind e) {
  switch(e) {
    case clang::FunctionDecl::TK_NonTemplate: return enum_constant_TK_NonTemplate_857;
    case clang::FunctionDecl::TK_FunctionTemplate: return enum_constant_TK_FunctionTemplate_858;
    case clang::FunctionDecl::TK_MemberSpecialization: return enum_constant_TK_MemberSpecialization_859;
    case clang::FunctionDecl::TK_FunctionTemplateSpecialization: return enum_constant_TK_FunctionTemplateSpecialization_860;
    case clang::FunctionDecl::TK_DependentFunctionTemplateSpecialization: return enum_constant_TK_DependentFunctionTemplateSpecialization_861;
    case clang::FunctionDecl::TK_DependentNonTemplate: return enum_constant_TK_DependentNonTemplate_862;
    default: llvm::errs() << "clang::FunctionDecl::TemplatedKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::IfStatementKind e) {
  switch(e) {
    case clang::IfStatementKind::Ordinary: return enum_constant_Ordinary_864;
    case clang::IfStatementKind::Constexpr: return enum_constant_Constexpr_865;
    case clang::IfStatementKind::ConstevalNonNegated: return enum_constant_ConstevalNonNegated_866;
    case clang::IfStatementKind::ConstevalNegated: return enum_constant_ConstevalNegated_867;
    default: llvm::errs() << "clang::IfStatementKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ImplicitParamKind e) {
  switch(e) {
    case clang::ImplicitParamKind::ObjCSelf: return enum_constant_ObjCSelf_869;
    case clang::ImplicitParamKind::ObjCCmd: return enum_constant_ObjCCmd_870;
    case clang::ImplicitParamKind::CXXThis: return enum_constant_CXXThis_871;
    case clang::ImplicitParamKind::CXXVTT: return enum_constant_CXXVTT_872;
    case clang::ImplicitParamKind::CapturedContext: return enum_constant_CapturedContext_873;
    case clang::ImplicitParamKind::ThreadPrivateVar: return enum_constant_ThreadPrivateVar_874;
    case clang::ImplicitParamKind::Other: return enum_constant_Other_875;
    default: llvm::errs() << "clang::ImplicitParamKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::InClassInitStyle e) {
  switch(e) {
    case clang::ICIS_NoInit: return enum_constant_ICIS_NoInit_877;
    case clang::ICIS_CopyInit: return enum_constant_ICIS_CopyInit_878;
    case clang::ICIS_ListInit: return enum_constant_ICIS_ListInit_879;
    default: llvm::errs() << "clang::InClassInitStyle: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::LambdaCaptureDefault e) {
  switch(e) {
    case clang::LCD_None: return enum_constant_LCD_None_881;
    case clang::LCD_ByCopy: return enum_constant_LCD_ByCopy_882;
    case clang::LCD_ByRef: return enum_constant_LCD_ByRef_883;
    default: llvm::errs() << "clang::LambdaCaptureDefault: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::LanguageLinkage e) {
  switch(e) {
    case clang::CLanguageLinkage: return enum_constant_CLanguageLinkage_885;
    case clang::CXXLanguageLinkage: return enum_constant_CXXLanguageLinkage_886;
    case clang::NoLanguageLinkage: return enum_constant_NoLanguageLinkage_887;
    default: llvm::errs() << "clang::LanguageLinkage: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::Linkage e) {
  switch(e) {
    case clang::Linkage::Invalid: return enum_constant_Invalid_889;
    case clang::Linkage::None: return enum_constant_None_890;
    case clang::Linkage::Internal: return enum_constant_Internal_891;
    case clang::Linkage::UniqueExternal: return enum_constant_UniqueExternal_892;
    case clang::Linkage::VisibleNone: return enum_constant_VisibleNone_893;
    case clang::Linkage::Module: return enum_constant_Module_894;
    case clang::Linkage::External: return enum_constant_External_895;
    default: llvm::errs() << "clang::Linkage: Unexpected enum value: " << static_cast<unsigned char>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::LinkageSpecLanguageIDs e) {
  switch(e) {
    case clang::LinkageSpecLanguageIDs::C: return enum_constant_C_897;
    case clang::LinkageSpecLanguageIDs::CXX: return enum_constant_CXX_898;
    default: llvm::errs() << "clang::LinkageSpecLanguageIDs: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::MSVtorDispMode e) {
  switch(e) {
    case clang::MSVtorDispMode::Never: return enum_constant_Never_900;
    case clang::MSVtorDispMode::ForVBaseOverride: return enum_constant_ForVBaseOverride_901;
    case clang::MSVtorDispMode::ForVFTable: return enum_constant_ForVFTable_902;
    default: llvm::errs() << "clang::MSVtorDispMode: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::MultiVersionKind e) {
  switch(e) {
    case clang::MultiVersionKind::None: return enum_constant_None_904;
    case clang::MultiVersionKind::Target: return enum_constant_Target_905;
    case clang::MultiVersionKind::CPUSpecific: return enum_constant_CPUSpecific_906;
    case clang::MultiVersionKind::CPUDispatch: return enum_constant_CPUDispatch_907;
    case clang::MultiVersionKind::TargetClones: return enum_constant_TargetClones_908;
    case clang::MultiVersionKind::TargetVersion: return enum_constant_TargetVersion_909;
    default: llvm::errs() << "clang::MultiVersionKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::NonOdrUseReason e) {
  switch(e) {
    case clang::NOUR_None: return enum_constant_NOUR_None_911;
    case clang::NOUR_Unevaluated: return enum_constant_NOUR_Unevaluated_912;
    case clang::NOUR_Constant: return enum_constant_NOUR_Constant_913;
    case clang::NOUR_Discarded: return enum_constant_NOUR_Discarded_914;
    default: llvm::errs() << "clang::NonOdrUseReason: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ObjCStringFormatFamily e) {
  switch(e) {
    case clang::SFF_None: return enum_constant_SFF_None_916;
    case clang::SFF_NSString: return enum_constant_SFF_NSString_917;
    case clang::SFF_CFString: return enum_constant_SFF_CFString_918;
    default: llvm::errs() << "clang::ObjCStringFormatFamily: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::OverloadedOperatorKind e) {
  switch(e) {
    case clang::OO_None: return enum_constant_OO_None_920;
    case clang::OO_New: return enum_constant_OO_New_921;
    case clang::OO_Delete: return enum_constant_OO_Delete_922;
    case clang::OO_Array_New: return enum_constant_OO_Array_New_923;
    case clang::OO_Array_Delete: return enum_constant_OO_Array_Delete_924;
    case clang::OO_Plus: return enum_constant_OO_Plus_925;
    case clang::OO_Minus: return enum_constant_OO_Minus_926;
    case clang::OO_Star: return enum_constant_OO_Star_927;
    case clang::OO_Slash: return enum_constant_OO_Slash_928;
    case clang::OO_Percent: return enum_constant_OO_Percent_929;
    case clang::OO_Caret: return enum_constant_OO_Caret_930;
    case clang::OO_Amp: return enum_constant_OO_Amp_931;
    case clang::OO_Pipe: return enum_constant_OO_Pipe_932;
    case clang::OO_Tilde: return enum_constant_OO_Tilde_933;
    case clang::OO_Exclaim: return enum_constant_OO_Exclaim_934;
    case clang::OO_Equal: return enum_constant_OO_Equal_935;
    case clang::OO_Less: return enum_constant_OO_Less_936;
    case clang::OO_Greater: return enum_constant_OO_Greater_937;
    case clang::OO_PlusEqual: return enum_constant_OO_PlusEqual_938;
    case clang::OO_MinusEqual: return enum_constant_OO_MinusEqual_939;
    case clang::OO_StarEqual: return enum_constant_OO_StarEqual_940;
    case clang::OO_SlashEqual: return enum_constant_OO_SlashEqual_941;
    case clang::OO_PercentEqual: return enum_constant_OO_PercentEqual_942;
    case clang::OO_CaretEqual: return enum_constant_OO_CaretEqual_943;
    case clang::OO_AmpEqual: return enum_constant_OO_AmpEqual_944;
    case clang::OO_PipeEqual: return enum_constant_OO_PipeEqual_945;
    case clang::OO_LessLess: return enum_constant_OO_LessLess_946;
    case clang::OO_GreaterGreater: return enum_constant_OO_GreaterGreater_947;
    case clang::OO_LessLessEqual: return enum_constant_OO_LessLessEqual_948;
    case clang::OO_GreaterGreaterEqual: return enum_constant_OO_GreaterGreaterEqual_949;
    case clang::OO_EqualEqual: return enum_constant_OO_EqualEqual_950;
    case clang::OO_ExclaimEqual: return enum_constant_OO_ExclaimEqual_951;
    case clang::OO_LessEqual: return enum_constant_OO_LessEqual_952;
    case clang::OO_GreaterEqual: return enum_constant_OO_GreaterEqual_953;
    case clang::OO_Spaceship: return enum_constant_OO_Spaceship_954;
    case clang::OO_AmpAmp: return enum_constant_OO_AmpAmp_955;
    case clang::OO_PipePipe: return enum_constant_OO_PipePipe_956;
    case clang::OO_PlusPlus: return enum_constant_OO_PlusPlus_957;
    case clang::OO_MinusMinus: return enum_constant_OO_MinusMinus_958;
    case clang::OO_Comma: return enum_constant_OO_Comma_959;
    case clang::OO_ArrowStar: return enum_constant_OO_ArrowStar_960;
    case clang::OO_Arrow: return enum_constant_OO_Arrow_961;
    case clang::OO_Call: return enum_constant_OO_Call_962;
    case clang::OO_Subscript: return enum_constant_OO_Subscript_963;
    case clang::OO_Conditional: return enum_constant_OO_Conditional_964;
    case clang::OO_Coawait: return enum_constant_OO_Coawait_965;
    case clang::NUM_OVERLOADED_OPERATORS: return enum_constant_NUM_OVERLOADED_OPERATORS_966;
    default: llvm::errs() << "clang::OverloadedOperatorKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::PragmaMSCommentKind e) {
  switch(e) {
    case clang::PCK_Unknown: return enum_constant_PCK_Unknown_968;
    case clang::PCK_Linker: return enum_constant_PCK_Linker_969;
    case clang::PCK_Lib: return enum_constant_PCK_Lib_970;
    case clang::PCK_Compiler: return enum_constant_PCK_Compiler_971;
    case clang::PCK_ExeStr: return enum_constant_PCK_ExeStr_972;
    case clang::PCK_User: return enum_constant_PCK_User_973;
    default: llvm::errs() << "clang::PragmaMSCommentKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::PredefinedIdentKind e) {
  switch(e) {
    case clang::PredefinedIdentKind::Func: return enum_constant_Func_975;
    case clang::PredefinedIdentKind::Function: return enum_constant_Function_976;
    case clang::PredefinedIdentKind::LFunction: return enum_constant_LFunction_977;
    case clang::PredefinedIdentKind::FuncDName: return enum_constant_FuncDName_978;
    case clang::PredefinedIdentKind::FuncSig: return enum_constant_FuncSig_979;
    case clang::PredefinedIdentKind::LFuncSig: return enum_constant_LFuncSig_980;
    case clang::PredefinedIdentKind::PrettyFunction: return enum_constant_PrettyFunction_981;
    case clang::PredefinedIdentKind::PrettyFunctionNoVirtual: return enum_constant_PrettyFunctionNoVirtual_982;
    default: llvm::errs() << "clang::PredefinedIdentKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::Qualifiers::ObjCLifetime e) {
  switch(e) {
    case clang::Qualifiers::OCL_None: return enum_constant_OCL_None_984;
    case clang::Qualifiers::OCL_ExplicitNone: return enum_constant_OCL_ExplicitNone_985;
    case clang::Qualifiers::OCL_Strong: return enum_constant_OCL_Strong_986;
    case clang::Qualifiers::OCL_Weak: return enum_constant_OCL_Weak_987;
    case clang::Qualifiers::OCL_Autoreleasing: return enum_constant_OCL_Autoreleasing_988;
    default: llvm::errs() << "clang::Qualifiers::ObjCLifetime: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::RecordArgPassingKind e) {
  switch(e) {
    case clang::RecordArgPassingKind::CanPassInRegs: return enum_constant_CanPassInRegs_990;
    case clang::RecordArgPassingKind::CannotPassInRegs: return enum_constant_CannotPassInRegs_991;
    case clang::RecordArgPassingKind::CanNeverPassInRegs: return enum_constant_CanNeverPassInRegs_992;
    default: llvm::errs() << "clang::RecordArgPassingKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::RefQualifierKind e) {
  switch(e) {
    case clang::RQ_None: return enum_constant_RQ_None_994;
    case clang::RQ_LValue: return enum_constant_RQ_LValue_995;
    case clang::RQ_RValue: return enum_constant_RQ_RValue_996;
    default: llvm::errs() << "clang::RefQualifierKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::SourceLocIdentKind e) {
  switch(e) {
    case clang::SourceLocIdentKind::Function: return enum_constant_Function_998;
    case clang::SourceLocIdentKind::FuncSig: return enum_constant_FuncSig_999;
    case clang::SourceLocIdentKind::File: return enum_constant_File_1000;
    case clang::SourceLocIdentKind::FileName: return enum_constant_FileName_1001;
    case clang::SourceLocIdentKind::Line: return enum_constant_Line_1002;
    case clang::SourceLocIdentKind::Column: return enum_constant_Column_1003;
    case clang::SourceLocIdentKind::SourceLocStruct: return enum_constant_SourceLocStruct_1004;
    default: llvm::errs() << "clang::SourceLocIdentKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::StorageClass e) {
  switch(e) {
    case clang::SC_None: return enum_constant_SC_None_1006;
    case clang::SC_Extern: return enum_constant_SC_Extern_1007;
    case clang::SC_Static: return enum_constant_SC_Static_1008;
    case clang::SC_PrivateExtern: return enum_constant_SC_PrivateExtern_1009;
    case clang::SC_Auto: return enum_constant_SC_Auto_1010;
    case clang::SC_Register: return enum_constant_SC_Register_1011;
    default: llvm::errs() << "clang::StorageClass: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::StorageDuration e) {
  switch(e) {
    case clang::SD_FullExpression: return enum_constant_SD_FullExpression_1013;
    case clang::SD_Automatic: return enum_constant_SD_Automatic_1014;
    case clang::SD_Thread: return enum_constant_SD_Thread_1015;
    case clang::SD_Static: return enum_constant_SD_Static_1016;
    case clang::SD_Dynamic: return enum_constant_SD_Dynamic_1017;
    default: llvm::errs() << "clang::StorageDuration: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::StringLiteralKind e) {
  switch(e) {
    case clang::StringLiteralKind::Ordinary: return enum_constant_Ordinary_1019;
    case clang::StringLiteralKind::Wide: return enum_constant_Wide_1020;
    case clang::StringLiteralKind::UTF8: return enum_constant_UTF8_1021;
    case clang::StringLiteralKind::UTF16: return enum_constant_UTF16_1022;
    case clang::StringLiteralKind::UTF32: return enum_constant_UTF32_1023;
    case clang::StringLiteralKind::Unevaluated: return enum_constant_Unevaluated_1024;
    default: llvm::errs() << "clang::StringLiteralKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::TagTypeKind e) {
  switch(e) {
    case clang::TagTypeKind::Struct: return enum_constant_Struct_1026;
    case clang::TagTypeKind::Interface: return enum_constant_Interface_1027;
    case clang::TagTypeKind::Union: return enum_constant_Union_1028;
    case clang::TagTypeKind::Class: return enum_constant_Class_1029;
    case clang::TagTypeKind::Enum: return enum_constant_Enum_1030;
    default: llvm::errs() << "clang::TagTypeKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::TemplateSpecializationKind e) {
  switch(e) {
    case clang::TSK_Undeclared: return enum_constant_TSK_Undeclared_1032;
    case clang::TSK_ImplicitInstantiation: return enum_constant_TSK_ImplicitInstantiation_1033;
    case clang::TSK_ExplicitSpecialization: return enum_constant_TSK_ExplicitSpecialization_1034;
    case clang::TSK_ExplicitInstantiationDeclaration: return enum_constant_TSK_ExplicitInstantiationDeclaration_1035;
    case clang::TSK_ExplicitInstantiationDefinition: return enum_constant_TSK_ExplicitInstantiationDefinition_1036;
    default: llvm::errs() << "clang::TemplateSpecializationKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::ThreadStorageClassSpecifier e) {
  switch(e) {
    case clang::TSCS_unspecified: return enum_constant_TSCS_unspecified_1038;
    case clang::TSCS___thread: return enum_constant_TSCS___thread_1039;
    case clang::TSCS_thread_local: return enum_constant_TSCS_thread_local_1040;
    case clang::TSCS__Thread_local: return enum_constant_TSCS__Thread_local_1041;
    default: llvm::errs() << "clang::ThreadStorageClassSpecifier: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::TypeDependenceScope::TypeDependence e) {
  switch(e) {
    case clang::TypeDependenceScope::UnexpandedPack: return enum_constant_UnexpandedPack_1043;
    case clang::TypeDependenceScope::Instantiation: return enum_constant_Instantiation_1044;
    case clang::TypeDependenceScope::Dependent: return enum_constant_Dependent_1045;
    case clang::TypeDependenceScope::VariablyModified: return enum_constant_VariablyModified_1046;
    case clang::TypeDependenceScope::Error: return enum_constant_Error_1047;
    case clang::TypeDependenceScope::None: return enum_constant_None_1048;
    case clang::TypeDependenceScope::All: return enum_constant_All_1049;
    case clang::TypeDependenceScope::DependentInstantiation: return enum_constant_DependentInstantiation_1050;
    default: llvm::errs() << "clang::TypeDependenceScope::TypeDependence: Unexpected enum value: " << static_cast<uint32_t>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::TypeOfKind e) {
  switch(e) {
    case clang::TypeOfKind::Qualified: return enum_constant_Qualified_1053;
    case clang::TypeOfKind::Unqualified: return enum_constant_Unqualified_1054;
    default: llvm::errs() << "clang::TypeOfKind: Unexpected enum value: " << static_cast<uint32_t>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::TypeTrait e) {
  switch(e) {
    case clang::UTT_IsInterfaceClass: return enum_constant_UTT_IsInterfaceClass_1056;
    case clang::UTT_IsSealed: return enum_constant_UTT_IsSealed_1057;
    case clang::UTT_IsDestructible: return enum_constant_UTT_IsDestructible_1058;
    case clang::UTT_IsTriviallyDestructible: return enum_constant_UTT_IsTriviallyDestructible_1059;
    case clang::UTT_IsNothrowDestructible: return enum_constant_UTT_IsNothrowDestructible_1060;
    case clang::UTT_HasNothrowMoveAssign: return enum_constant_UTT_HasNothrowMoveAssign_1061;
    case clang::UTT_HasTrivialMoveAssign: return enum_constant_UTT_HasTrivialMoveAssign_1062;
    case clang::UTT_HasTrivialMoveConstructor: return enum_constant_UTT_HasTrivialMoveConstructor_1063;
    case clang::UTT_HasNothrowAssign: return enum_constant_UTT_HasNothrowAssign_1064;
    case clang::UTT_HasNothrowCopy: return enum_constant_UTT_HasNothrowCopy_1065;
    case clang::UTT_HasNothrowConstructor: return enum_constant_UTT_HasNothrowConstructor_1066;
    case clang::UTT_HasTrivialAssign: return enum_constant_UTT_HasTrivialAssign_1067;
    case clang::UTT_HasTrivialCopy: return enum_constant_UTT_HasTrivialCopy_1068;
    case clang::UTT_HasTrivialDefaultConstructor: return enum_constant_UTT_HasTrivialDefaultConstructor_1069;
    case clang::UTT_HasTrivialDestructor: return enum_constant_UTT_HasTrivialDestructor_1070;
    case clang::UTT_HasVirtualDestructor: return enum_constant_UTT_HasVirtualDestructor_1071;
    case clang::UTT_IsAbstract: return enum_constant_UTT_IsAbstract_1072;
    case clang::UTT_IsAggregate: return enum_constant_UTT_IsAggregate_1073;
    case clang::UTT_IsClass: return enum_constant_UTT_IsClass_1074;
    case clang::UTT_IsEmpty: return enum_constant_UTT_IsEmpty_1075;
    case clang::UTT_IsEnum: return enum_constant_UTT_IsEnum_1076;
    case clang::UTT_IsFinal: return enum_constant_UTT_IsFinal_1077;
    case clang::UTT_IsLiteral: return enum_constant_UTT_IsLiteral_1078;
    case clang::UTT_IsPOD: return enum_constant_UTT_IsPOD_1079;
    case clang::UTT_IsPolymorphic: return enum_constant_UTT_IsPolymorphic_1080;
    case clang::UTT_IsStandardLayout: return enum_constant_UTT_IsStandardLayout_1081;
    case clang::UTT_IsTrivial: return enum_constant_UTT_IsTrivial_1082;
    case clang::UTT_IsTriviallyCopyable: return enum_constant_UTT_IsTriviallyCopyable_1083;
    case clang::UTT_IsUnion: return enum_constant_UTT_IsUnion_1084;
    case clang::UTT_HasUniqueObjectRepresentations: return enum_constant_UTT_HasUniqueObjectRepresentations_1085;
    case clang::UTT_IsTriviallyRelocatable: return enum_constant_UTT_IsTriviallyRelocatable_1086;
    case clang::UTT_IsTriviallyEqualityComparable: return enum_constant_UTT_IsTriviallyEqualityComparable_1087;
    case clang::UTT_IsBoundedArray: return enum_constant_UTT_IsBoundedArray_1088;
    case clang::UTT_IsUnboundedArray: return enum_constant_UTT_IsUnboundedArray_1089;
    case clang::UTT_IsNullPointer: return enum_constant_UTT_IsNullPointer_1090;
    case clang::UTT_IsScopedEnum: return enum_constant_UTT_IsScopedEnum_1091;
    case clang::UTT_IsReferenceable: return enum_constant_UTT_IsReferenceable_1092;
    case clang::UTT_CanPassInRegs: return enum_constant_UTT_CanPassInRegs_1093;
    case clang::UTT_IsArithmetic: return enum_constant_UTT_IsArithmetic_1094;
    case clang::UTT_IsFloatingPoint: return enum_constant_UTT_IsFloatingPoint_1095;
    case clang::UTT_IsIntegral: return enum_constant_UTT_IsIntegral_1096;
    case clang::UTT_IsCompleteType: return enum_constant_UTT_IsCompleteType_1097;
    case clang::UTT_IsVoid: return enum_constant_UTT_IsVoid_1098;
    case clang::UTT_IsArray: return enum_constant_UTT_IsArray_1099;
    case clang::UTT_IsFunction: return enum_constant_UTT_IsFunction_1100;
    case clang::UTT_IsReference: return enum_constant_UTT_IsReference_1101;
    case clang::UTT_IsLvalueReference: return enum_constant_UTT_IsLvalueReference_1102;
    case clang::UTT_IsRvalueReference: return enum_constant_UTT_IsRvalueReference_1103;
    case clang::UTT_IsFundamental: return enum_constant_UTT_IsFundamental_1104;
    case clang::UTT_IsObject: return enum_constant_UTT_IsObject_1105;
    case clang::UTT_IsScalar: return enum_constant_UTT_IsScalar_1106;
    case clang::UTT_IsCompound: return enum_constant_UTT_IsCompound_1107;
    case clang::UTT_IsPointer: return enum_constant_UTT_IsPointer_1108;
    case clang::UTT_IsMemberObjectPointer: return enum_constant_UTT_IsMemberObjectPointer_1109;
    case clang::UTT_IsMemberFunctionPointer: return enum_constant_UTT_IsMemberFunctionPointer_1110;
    case clang::UTT_IsMemberPointer: return enum_constant_UTT_IsMemberPointer_1111;
    case clang::UTT_IsConst: return enum_constant_UTT_IsConst_1112;
    case clang::UTT_IsVolatile: return enum_constant_UTT_IsVolatile_1113;
    case clang::UTT_IsSigned: return enum_constant_UTT_IsSigned_1114;
    case clang::UTT_IsUnsigned: return enum_constant_UTT_IsUnsigned_1115;
    case clang::BTT_TypeCompatible: return enum_constant_BTT_TypeCompatible_1117;
    case clang::BTT_IsNothrowAssignable: return enum_constant_BTT_IsNothrowAssignable_1118;
    case clang::BTT_IsAssignable: return enum_constant_BTT_IsAssignable_1119;
    case clang::BTT_IsBaseOf: return enum_constant_BTT_IsBaseOf_1120;
    case clang::BTT_IsConvertibleTo: return enum_constant_BTT_IsConvertibleTo_1121;
    case clang::BTT_IsTriviallyAssignable: return enum_constant_BTT_IsTriviallyAssignable_1122;
    case clang::BTT_ReferenceBindsToTemporary: return enum_constant_BTT_ReferenceBindsToTemporary_1123;
    case clang::BTT_ReferenceConstructsFromTemporary: return enum_constant_BTT_ReferenceConstructsFromTemporary_1124;
    case clang::BTT_IsSame: return enum_constant_BTT_IsSame_1125;
    case clang::BTT_IsConvertible: return enum_constant_BTT_IsConvertible_1126;
    case clang::TT_IsConstructible: return enum_constant_TT_IsConstructible_1128;
    case clang::TT_IsNothrowConstructible: return enum_constant_TT_IsNothrowConstructible_1129;
    case clang::TT_IsTriviallyConstructible: return enum_constant_TT_IsTriviallyConstructible_1130;
    default: llvm::errs() << "clang::TypeTrait: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::UnaryExprOrTypeTrait e) {
  switch(e) {
    case clang::UETT_SizeOf: return enum_constant_UETT_SizeOf_1133;
    case clang::UETT_DataSizeOf: return enum_constant_UETT_DataSizeOf_1134;
    case clang::UETT_AlignOf: return enum_constant_UETT_AlignOf_1135;
    case clang::UETT_PreferredAlignOf: return enum_constant_UETT_PreferredAlignOf_1136;
    case clang::UETT_VecStep: return enum_constant_UETT_VecStep_1137;
    case clang::UETT_OpenMPRequiredSimdAlign: return enum_constant_UETT_OpenMPRequiredSimdAlign_1138;
    case clang::UETT_VectorElements: return enum_constant_UETT_VectorElements_1139;
    default: llvm::errs() << "clang::UnaryExprOrTypeTrait: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::UnaryOperatorKind e) {
  switch(e) {
    case clang::UO_PostInc: return enum_constant_UO_PostInc_1142;
    case clang::UO_PostDec: return enum_constant_UO_PostDec_1143;
    case clang::UO_PreInc: return enum_constant_UO_PreInc_1144;
    case clang::UO_PreDec: return enum_constant_UO_PreDec_1145;
    case clang::UO_AddrOf: return enum_constant_UO_AddrOf_1146;
    case clang::UO_Deref: return enum_constant_UO_Deref_1147;
    case clang::UO_Plus: return enum_constant_UO_Plus_1148;
    case clang::UO_Minus: return enum_constant_UO_Minus_1149;
    case clang::UO_Not: return enum_constant_UO_Not_1150;
    case clang::UO_LNot: return enum_constant_UO_LNot_1151;
    case clang::UO_Real: return enum_constant_UO_Real_1152;
    case clang::UO_Imag: return enum_constant_UO_Imag_1153;
    case clang::UO_Extension: return enum_constant_UO_Extension_1154;
    case clang::UO_Coawait: return enum_constant_UO_Coawait_1155;
    default: llvm::errs() << "clang::UnaryOperatorKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::UnaryTransformType::UTTKind e) {
  switch(e) {
    case clang::UnaryTransformType::AddLvalueReference: return enum_constant_AddLvalueReference_1157;
    case clang::UnaryTransformType::AddPointer: return enum_constant_AddPointer_1158;
    case clang::UnaryTransformType::AddRvalueReference: return enum_constant_AddRvalueReference_1159;
    case clang::UnaryTransformType::Decay: return enum_constant_Decay_1160;
    case clang::UnaryTransformType::MakeSigned: return enum_constant_MakeSigned_1161;
    case clang::UnaryTransformType::MakeUnsigned: return enum_constant_MakeUnsigned_1162;
    case clang::UnaryTransformType::RemoveAllExtents: return enum_constant_RemoveAllExtents_1163;
    case clang::UnaryTransformType::RemoveConst: return enum_constant_RemoveConst_1164;
    case clang::UnaryTransformType::RemoveCV: return enum_constant_RemoveCV_1165;
    case clang::UnaryTransformType::RemoveCVRef: return enum_constant_RemoveCVRef_1166;
    case clang::UnaryTransformType::RemoveExtent: return enum_constant_RemoveExtent_1167;
    case clang::UnaryTransformType::RemovePointer: return enum_constant_RemovePointer_1168;
    case clang::UnaryTransformType::RemoveReference: return enum_constant_RemoveReference_1169;
    case clang::UnaryTransformType::RemoveRestrict: return enum_constant_RemoveRestrict_1170;
    case clang::UnaryTransformType::RemoveVolatile: return enum_constant_RemoveVolatile_1171;
    case clang::UnaryTransformType::EnumUnderlyingType: return enum_constant_EnumUnderlyingType_1172;
    default: llvm::errs() << "clang::UnaryTransformType::UTTKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::UserDefinedLiteral::LiteralOperatorKind e) {
  switch(e) {
    case clang::UserDefinedLiteral::LOK_Raw: return enum_constant_LOK_Raw_1174;
    case clang::UserDefinedLiteral::LOK_Template: return enum_constant_LOK_Template_1175;
    case clang::UserDefinedLiteral::LOK_Integer: return enum_constant_LOK_Integer_1176;
    case clang::UserDefinedLiteral::LOK_Floating: return enum_constant_LOK_Floating_1177;
    case clang::UserDefinedLiteral::LOK_String: return enum_constant_LOK_String_1178;
    case clang::UserDefinedLiteral::LOK_Character: return enum_constant_LOK_Character_1179;
    default: llvm::errs() << "clang::UserDefinedLiteral::LiteralOperatorKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::VarDecl::DefinitionKind e) {
  switch(e) {
    case clang::VarDecl::DeclarationOnly: return enum_constant_DeclarationOnly_1181;
    case clang::VarDecl::TentativeDefinition: return enum_constant_TentativeDefinition_1182;
    case clang::VarDecl::Definition: return enum_constant_Definition_1183;
    default: llvm::errs() << "clang::VarDecl::DefinitionKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::VarDecl::InitializationStyle e) {
  switch(e) {
    case clang::VarDecl::CInit: return enum_constant_CInit_1185;
    case clang::VarDecl::CallInit: return enum_constant_CallInit_1186;
    case clang::VarDecl::ListInit: return enum_constant_ListInit_1187;
    case clang::VarDecl::ParenListInit: return enum_constant_ParenListInit_1188;
    default: llvm::errs() << "clang::VarDecl::InitializationStyle: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::VarDecl::TLSKind e) {
  switch(e) {
    case clang::VarDecl::TLS_None: return enum_constant_TLS_None_1190;
    case clang::VarDecl::TLS_Static: return enum_constant_TLS_Static_1191;
    case clang::VarDecl::TLS_Dynamic: return enum_constant_TLS_Dynamic_1192;
    default: llvm::errs() << "clang::VarDecl::TLSKind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::VectorKind e) {
  switch(e) {
    case clang::VectorKind::Generic: return enum_constant_Generic_1194;
    case clang::VectorKind::AltiVecVector: return enum_constant_AltiVecVector_1195;
    case clang::VectorKind::AltiVecPixel: return enum_constant_AltiVecPixel_1196;
    case clang::VectorKind::AltiVecBool: return enum_constant_AltiVecBool_1197;
    case clang::VectorKind::Neon: return enum_constant_Neon_1198;
    case clang::VectorKind::NeonPoly: return enum_constant_NeonPoly_1199;
    case clang::VectorKind::SveFixedLengthData: return enum_constant_SveFixedLengthData_1200;
    case clang::VectorKind::SveFixedLengthPredicate: return enum_constant_SveFixedLengthPredicate_1201;
    case clang::VectorKind::RVVFixedLengthData: return enum_constant_RVVFixedLengthData_1202;
    case clang::VectorKind::RVVFixedLengthMask: return enum_constant_RVVFixedLengthMask_1203;
    default: llvm::errs() << "clang::VectorKind: Unexpected enum value: " << static_cast<int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::Visibility e) {
  switch(e) {
    case clang::HiddenVisibility: return enum_constant_HiddenVisibility_1205;
    case clang::ProtectedVisibility: return enum_constant_ProtectedVisibility_1206;
    case clang::DefaultVisibility: return enum_constant_DefaultVisibility_1207;
    default: llvm::errs() << "clang::Visibility: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(clang::attr::Kind e) {
  switch(e) {
    case clang::attr::AddressSpace: return enum_constant_AddressSpace_1209;
    case clang::attr::AnnotateType: return enum_constant_AnnotateType_1210;
    case clang::attr::ArmIn: return enum_constant_ArmIn_1211;
    case clang::attr::ArmInOut: return enum_constant_ArmInOut_1212;
    case clang::attr::ArmMveStrictPolymorphism: return enum_constant_ArmMveStrictPolymorphism_1213;
    case clang::attr::ArmOut: return enum_constant_ArmOut_1214;
    case clang::attr::ArmPreserves: return enum_constant_ArmPreserves_1215;
    case clang::attr::ArmStreaming: return enum_constant_ArmStreaming_1216;
    case clang::attr::ArmStreamingCompatible: return enum_constant_ArmStreamingCompatible_1217;
    case clang::attr::BTFTypeTag: return enum_constant_BTFTypeTag_1218;
    case clang::attr::CmseNSCall: return enum_constant_CmseNSCall_1219;
    case clang::attr::HLSLGroupSharedAddressSpace: return enum_constant_HLSLGroupSharedAddressSpace_1220;
    case clang::attr::HLSLParamModifier: return enum_constant_HLSLParamModifier_1221;
    case clang::attr::NoDeref: return enum_constant_NoDeref_1222;
    case clang::attr::ObjCGC: return enum_constant_ObjCGC_1223;
    case clang::attr::ObjCInertUnsafeUnretained: return enum_constant_ObjCInertUnsafeUnretained_1224;
    case clang::attr::ObjCKindOf: return enum_constant_ObjCKindOf_1225;
    case clang::attr::OpenCLConstantAddressSpace: return enum_constant_OpenCLConstantAddressSpace_1226;
    case clang::attr::OpenCLGenericAddressSpace: return enum_constant_OpenCLGenericAddressSpace_1227;
    case clang::attr::OpenCLGlobalAddressSpace: return enum_constant_OpenCLGlobalAddressSpace_1228;
    case clang::attr::OpenCLGlobalDeviceAddressSpace: return enum_constant_OpenCLGlobalDeviceAddressSpace_1229;
    case clang::attr::OpenCLGlobalHostAddressSpace: return enum_constant_OpenCLGlobalHostAddressSpace_1230;
    case clang::attr::OpenCLLocalAddressSpace: return enum_constant_OpenCLLocalAddressSpace_1231;
    case clang::attr::OpenCLPrivateAddressSpace: return enum_constant_OpenCLPrivateAddressSpace_1232;
    case clang::attr::Ptr32: return enum_constant_Ptr32_1233;
    case clang::attr::Ptr64: return enum_constant_Ptr64_1234;
    case clang::attr::SPtr: return enum_constant_SPtr_1235;
    case clang::attr::TypeNonNull: return enum_constant_TypeNonNull_1236;
    case clang::attr::TypeNullUnspecified: return enum_constant_TypeNullUnspecified_1237;
    case clang::attr::TypeNullable: return enum_constant_TypeNullable_1238;
    case clang::attr::TypeNullableResult: return enum_constant_TypeNullableResult_1239;
    case clang::attr::UPtr: return enum_constant_UPtr_1240;
    case clang::attr::WebAssemblyFuncref: return enum_constant_WebAssemblyFuncref_1241;
    case clang::attr::CodeAlign: return enum_constant_CodeAlign_1242;
    case clang::attr::FallThrough: return enum_constant_FallThrough_1243;
    case clang::attr::Likely: return enum_constant_Likely_1244;
    case clang::attr::MustTail: return enum_constant_MustTail_1245;
    case clang::attr::OpenCLUnrollHint: return enum_constant_OpenCLUnrollHint_1246;
    case clang::attr::Unlikely: return enum_constant_Unlikely_1247;
    case clang::attr::AlwaysInline: return enum_constant_AlwaysInline_1248;
    case clang::attr::NoInline: return enum_constant_NoInline_1249;
    case clang::attr::NoMerge: return enum_constant_NoMerge_1250;
    case clang::attr::Suppress: return enum_constant_Suppress_1251;
    case clang::attr::AArch64SVEPcs: return enum_constant_AArch64SVEPcs_1252;
    case clang::attr::AArch64VectorPcs: return enum_constant_AArch64VectorPcs_1253;
    case clang::attr::AMDGPUKernelCall: return enum_constant_AMDGPUKernelCall_1254;
    case clang::attr::AcquireHandle: return enum_constant_AcquireHandle_1255;
    case clang::attr::AnyX86NoCfCheck: return enum_constant_AnyX86NoCfCheck_1256;
    case clang::attr::CDecl: return enum_constant_CDecl_1257;
    case clang::attr::FastCall: return enum_constant_FastCall_1258;
    case clang::attr::IntelOclBicc: return enum_constant_IntelOclBicc_1259;
    case clang::attr::LifetimeBound: return enum_constant_LifetimeBound_1260;
    case clang::attr::M68kRTD: return enum_constant_M68kRTD_1261;
    case clang::attr::MSABI: return enum_constant_MSABI_1262;
    case clang::attr::NSReturnsRetained: return enum_constant_NSReturnsRetained_1263;
    case clang::attr::ObjCOwnership: return enum_constant_ObjCOwnership_1264;
    case clang::attr::Pascal: return enum_constant_Pascal_1265;
    case clang::attr::Pcs: return enum_constant_Pcs_1266;
    case clang::attr::PreserveAll: return enum_constant_PreserveAll_1267;
    case clang::attr::PreserveMost: return enum_constant_PreserveMost_1268;
    case clang::attr::RegCall: return enum_constant_RegCall_1269;
    case clang::attr::StdCall: return enum_constant_StdCall_1270;
    case clang::attr::SwiftAsyncCall: return enum_constant_SwiftAsyncCall_1271;
    case clang::attr::SwiftCall: return enum_constant_SwiftCall_1272;
    case clang::attr::SysVABI: return enum_constant_SysVABI_1273;
    case clang::attr::ThisCall: return enum_constant_ThisCall_1274;
    case clang::attr::VectorCall: return enum_constant_VectorCall_1275;
    case clang::attr::SwiftAsyncContext: return enum_constant_SwiftAsyncContext_1276;
    case clang::attr::SwiftContext: return enum_constant_SwiftContext_1277;
    case clang::attr::SwiftErrorResult: return enum_constant_SwiftErrorResult_1278;
    case clang::attr::SwiftIndirectResult: return enum_constant_SwiftIndirectResult_1279;
    case clang::attr::Annotate: return enum_constant_Annotate_1280;
    case clang::attr::CFConsumed: return enum_constant_CFConsumed_1281;
    case clang::attr::CarriesDependency: return enum_constant_CarriesDependency_1282;
    case clang::attr::NSConsumed: return enum_constant_NSConsumed_1283;
    case clang::attr::NonNull: return enum_constant_NonNull_1284;
    case clang::attr::OSConsumed: return enum_constant_OSConsumed_1285;
    case clang::attr::PassObjectSize: return enum_constant_PassObjectSize_1286;
    case clang::attr::ReleaseHandle: return enum_constant_ReleaseHandle_1287;
    case clang::attr::UseHandle: return enum_constant_UseHandle_1288;
    case clang::attr::HLSLSV_DispatchThreadID: return enum_constant_HLSLSV_DispatchThreadID_1289;
    case clang::attr::HLSLSV_GroupIndex: return enum_constant_HLSLSV_GroupIndex_1290;
    case clang::attr::AMDGPUFlatWorkGroupSize: return enum_constant_AMDGPUFlatWorkGroupSize_1291;
    case clang::attr::AMDGPUNumSGPR: return enum_constant_AMDGPUNumSGPR_1292;
    case clang::attr::AMDGPUNumVGPR: return enum_constant_AMDGPUNumVGPR_1293;
    case clang::attr::AMDGPUWavesPerEU: return enum_constant_AMDGPUWavesPerEU_1294;
    case clang::attr::ARMInterrupt: return enum_constant_ARMInterrupt_1295;
    case clang::attr::AVRInterrupt: return enum_constant_AVRInterrupt_1296;
    case clang::attr::AVRSignal: return enum_constant_AVRSignal_1297;
    case clang::attr::AcquireCapability: return enum_constant_AcquireCapability_1298;
    case clang::attr::AcquiredAfter: return enum_constant_AcquiredAfter_1299;
    case clang::attr::AcquiredBefore: return enum_constant_AcquiredBefore_1300;
    case clang::attr::AlignMac68k: return enum_constant_AlignMac68k_1301;
    case clang::attr::AlignNatural: return enum_constant_AlignNatural_1302;
    case clang::attr::Aligned: return enum_constant_Aligned_1303;
    case clang::attr::AllocAlign: return enum_constant_AllocAlign_1304;
    case clang::attr::AllocSize: return enum_constant_AllocSize_1305;
    case clang::attr::AlwaysDestroy: return enum_constant_AlwaysDestroy_1306;
    case clang::attr::AnalyzerNoReturn: return enum_constant_AnalyzerNoReturn_1307;
    case clang::attr::AnyX86Interrupt: return enum_constant_AnyX86Interrupt_1308;
    case clang::attr::AnyX86NoCallerSavedRegisters: return enum_constant_AnyX86NoCallerSavedRegisters_1309;
    case clang::attr::ArcWeakrefUnavailable: return enum_constant_ArcWeakrefUnavailable_1310;
    case clang::attr::ArgumentWithTypeTag: return enum_constant_ArgumentWithTypeTag_1311;
    case clang::attr::ArmBuiltinAlias: return enum_constant_ArmBuiltinAlias_1312;
    case clang::attr::ArmLocallyStreaming: return enum_constant_ArmLocallyStreaming_1313;
    case clang::attr::ArmNew: return enum_constant_ArmNew_1314;
    case clang::attr::Artificial: return enum_constant_Artificial_1315;
    case clang::attr::AsmLabel: return enum_constant_AsmLabel_1316;
    case clang::attr::AssertCapability: return enum_constant_AssertCapability_1317;
    case clang::attr::AssertExclusiveLock: return enum_constant_AssertExclusiveLock_1318;
    case clang::attr::AssertSharedLock: return enum_constant_AssertSharedLock_1319;
    case clang::attr::AssumeAligned: return enum_constant_AssumeAligned_1320;
    case clang::attr::Assumption: return enum_constant_Assumption_1321;
    case clang::attr::Availability: return enum_constant_Availability_1322;
    case clang::attr::AvailableOnlyInDefaultEvalMethod: return enum_constant_AvailableOnlyInDefaultEvalMethod_1323;
    case clang::attr::BPFPreserveAccessIndex: return enum_constant_BPFPreserveAccessIndex_1324;
    case clang::attr::BPFPreserveStaticOffset: return enum_constant_BPFPreserveStaticOffset_1325;
    case clang::attr::BTFDeclTag: return enum_constant_BTFDeclTag_1326;
    case clang::attr::Blocks: return enum_constant_Blocks_1327;
    case clang::attr::Builtin: return enum_constant_Builtin_1328;
    case clang::attr::C11NoReturn: return enum_constant_C11NoReturn_1329;
    case clang::attr::CFAuditedTransfer: return enum_constant_CFAuditedTransfer_1330;
    case clang::attr::CFGuard: return enum_constant_CFGuard_1331;
    case clang::attr::CFICanonicalJumpTable: return enum_constant_CFICanonicalJumpTable_1332;
    case clang::attr::CFReturnsNotRetained: return enum_constant_CFReturnsNotRetained_1333;
    case clang::attr::CFReturnsRetained: return enum_constant_CFReturnsRetained_1334;
    case clang::attr::CFUnknownTransfer: return enum_constant_CFUnknownTransfer_1335;
    case clang::attr::CPUDispatch: return enum_constant_CPUDispatch_1336;
    case clang::attr::CPUSpecific: return enum_constant_CPUSpecific_1337;
    case clang::attr::CUDAConstant: return enum_constant_CUDAConstant_1338;
    case clang::attr::CUDADevice: return enum_constant_CUDADevice_1339;
    case clang::attr::CUDADeviceBuiltinSurfaceType: return enum_constant_CUDADeviceBuiltinSurfaceType_1340;
    case clang::attr::CUDADeviceBuiltinTextureType: return enum_constant_CUDADeviceBuiltinTextureType_1341;
    case clang::attr::CUDAGlobal: return enum_constant_CUDAGlobal_1342;
    case clang::attr::CUDAHost: return enum_constant_CUDAHost_1343;
    case clang::attr::CUDAInvalidTarget: return enum_constant_CUDAInvalidTarget_1344;
    case clang::attr::CUDALaunchBounds: return enum_constant_CUDALaunchBounds_1345;
    case clang::attr::CUDAShared: return enum_constant_CUDAShared_1346;
    case clang::attr::CXX11NoReturn: return enum_constant_CXX11NoReturn_1347;
    case clang::attr::CallableWhen: return enum_constant_CallableWhen_1348;
    case clang::attr::Callback: return enum_constant_Callback_1349;
    case clang::attr::Capability: return enum_constant_Capability_1350;
    case clang::attr::CapturedRecord: return enum_constant_CapturedRecord_1351;
    case clang::attr::Cleanup: return enum_constant_Cleanup_1352;
    case clang::attr::CmseNSEntry: return enum_constant_CmseNSEntry_1353;
    case clang::attr::CodeModel: return enum_constant_CodeModel_1354;
    case clang::attr::CodeSeg: return enum_constant_CodeSeg_1355;
    case clang::attr::Cold: return enum_constant_Cold_1356;
    case clang::attr::Common: return enum_constant_Common_1357;
    case clang::attr::Const: return enum_constant_Const_1358;
    case clang::attr::ConstInit: return enum_constant_ConstInit_1359;
    case clang::attr::Constructor: return enum_constant_Constructor_1360;
    case clang::attr::Consumable: return enum_constant_Consumable_1361;
    case clang::attr::ConsumableAutoCast: return enum_constant_ConsumableAutoCast_1362;
    case clang::attr::ConsumableSetOnRead: return enum_constant_ConsumableSetOnRead_1363;
    case clang::attr::Convergent: return enum_constant_Convergent_1364;
    case clang::attr::CoroDisableLifetimeBound: return enum_constant_CoroDisableLifetimeBound_1365;
    case clang::attr::CoroLifetimeBound: return enum_constant_CoroLifetimeBound_1366;
    case clang::attr::CoroOnlyDestroyWhenComplete: return enum_constant_CoroOnlyDestroyWhenComplete_1367;
    case clang::attr::CoroReturnType: return enum_constant_CoroReturnType_1368;
    case clang::attr::CoroWrapper: return enum_constant_CoroWrapper_1369;
    case clang::attr::CountedBy: return enum_constant_CountedBy_1370;
    case clang::attr::DLLExport: return enum_constant_DLLExport_1371;
    case clang::attr::DLLExportStaticLocal: return enum_constant_DLLExportStaticLocal_1372;
    case clang::attr::DLLImport: return enum_constant_DLLImport_1373;
    case clang::attr::DLLImportStaticLocal: return enum_constant_DLLImportStaticLocal_1374;
    case clang::attr::Deprecated: return enum_constant_Deprecated_1375;
    case clang::attr::Destructor: return enum_constant_Destructor_1376;
    case clang::attr::DiagnoseAsBuiltin: return enum_constant_DiagnoseAsBuiltin_1377;
    case clang::attr::DiagnoseIf: return enum_constant_DiagnoseIf_1378;
    case clang::attr::DisableSanitizerInstrumentation: return enum_constant_DisableSanitizerInstrumentation_1379;
    case clang::attr::DisableTailCalls: return enum_constant_DisableTailCalls_1380;
    case clang::attr::EmptyBases: return enum_constant_EmptyBases_1381;
    case clang::attr::EnableIf: return enum_constant_EnableIf_1382;
    case clang::attr::EnforceTCB: return enum_constant_EnforceTCB_1383;
    case clang::attr::EnforceTCBLeaf: return enum_constant_EnforceTCBLeaf_1384;
    case clang::attr::EnumExtensibility: return enum_constant_EnumExtensibility_1385;
    case clang::attr::Error: return enum_constant_Error_1386;
    case clang::attr::ExcludeFromExplicitInstantiation: return enum_constant_ExcludeFromExplicitInstantiation_1387;
    case clang::attr::ExclusiveTrylockFunction: return enum_constant_ExclusiveTrylockFunction_1388;
    case clang::attr::ExternalSourceSymbol: return enum_constant_ExternalSourceSymbol_1389;
    case clang::attr::Final: return enum_constant_Final_1390;
    case clang::attr::FlagEnum: return enum_constant_FlagEnum_1391;
    case clang::attr::Flatten: return enum_constant_Flatten_1392;
    case clang::attr::Format: return enum_constant_Format_1393;
    case clang::attr::FormatArg: return enum_constant_FormatArg_1394;
    case clang::attr::FunctionReturnThunks: return enum_constant_FunctionReturnThunks_1395;
    case clang::attr::GNUInline: return enum_constant_GNUInline_1396;
    case clang::attr::GuardedBy: return enum_constant_GuardedBy_1397;
    case clang::attr::GuardedVar: return enum_constant_GuardedVar_1398;
    case clang::attr::HIPManaged: return enum_constant_HIPManaged_1399;
    case clang::attr::HLSLNumThreads: return enum_constant_HLSLNumThreads_1400;
    case clang::attr::HLSLResource: return enum_constant_HLSLResource_1401;
    case clang::attr::HLSLResourceBinding: return enum_constant_HLSLResourceBinding_1402;
    case clang::attr::HLSLShader: return enum_constant_HLSLShader_1403;
    case clang::attr::Hot: return enum_constant_Hot_1404;
    case clang::attr::IBAction: return enum_constant_IBAction_1405;
    case clang::attr::IBOutlet: return enum_constant_IBOutlet_1406;
    case clang::attr::IBOutletCollection: return enum_constant_IBOutletCollection_1407;
    case clang::attr::InitPriority: return enum_constant_InitPriority_1408;
    case clang::attr::InternalLinkage: return enum_constant_InternalLinkage_1409;
    case clang::attr::LTOVisibilityPublic: return enum_constant_LTOVisibilityPublic_1410;
    case clang::attr::LayoutVersion: return enum_constant_LayoutVersion_1411;
    case clang::attr::Leaf: return enum_constant_Leaf_1412;
    case clang::attr::LockReturned: return enum_constant_LockReturned_1413;
    case clang::attr::LocksExcluded: return enum_constant_LocksExcluded_1414;
    case clang::attr::M68kInterrupt: return enum_constant_M68kInterrupt_1415;
    case clang::attr::MIGServerRoutine: return enum_constant_MIGServerRoutine_1416;
    case clang::attr::MSAllocator: return enum_constant_MSAllocator_1417;
    case clang::attr::MSConstexpr: return enum_constant_MSConstexpr_1418;
    case clang::attr::MSInheritance: return enum_constant_MSInheritance_1419;
    case clang::attr::MSNoVTable: return enum_constant_MSNoVTable_1420;
    case clang::attr::MSP430Interrupt: return enum_constant_MSP430Interrupt_1421;
    case clang::attr::MSStruct: return enum_constant_MSStruct_1422;
    case clang::attr::MSVtorDisp: return enum_constant_MSVtorDisp_1423;
    case clang::attr::MaxFieldAlignment: return enum_constant_MaxFieldAlignment_1424;
    case clang::attr::MayAlias: return enum_constant_MayAlias_1425;
    case clang::attr::MaybeUndef: return enum_constant_MaybeUndef_1426;
    case clang::attr::MicroMips: return enum_constant_MicroMips_1427;
    case clang::attr::MinSize: return enum_constant_MinSize_1428;
    case clang::attr::MinVectorWidth: return enum_constant_MinVectorWidth_1429;
    case clang::attr::Mips16: return enum_constant_Mips16_1430;
    case clang::attr::MipsInterrupt: return enum_constant_MipsInterrupt_1431;
    case clang::attr::MipsLongCall: return enum_constant_MipsLongCall_1432;
    case clang::attr::MipsShortCall: return enum_constant_MipsShortCall_1433;
    case clang::attr::NSConsumesSelf: return enum_constant_NSConsumesSelf_1434;
    case clang::attr::NSErrorDomain: return enum_constant_NSErrorDomain_1435;
    case clang::attr::NSReturnsAutoreleased: return enum_constant_NSReturnsAutoreleased_1436;
    case clang::attr::NSReturnsNotRetained: return enum_constant_NSReturnsNotRetained_1437;
    case clang::attr::NVPTXKernel: return enum_constant_NVPTXKernel_1438;
    case clang::attr::Naked: return enum_constant_Naked_1439;
    case clang::attr::NoAlias: return enum_constant_NoAlias_1440;
    case clang::attr::NoCommon: return enum_constant_NoCommon_1441;
    case clang::attr::NoDebug: return enum_constant_NoDebug_1442;
    case clang::attr::NoDestroy: return enum_constant_NoDestroy_1443;
    case clang::attr::NoDuplicate: return enum_constant_NoDuplicate_1444;
    case clang::attr::NoInstrumentFunction: return enum_constant_NoInstrumentFunction_1445;
    case clang::attr::NoMicroMips: return enum_constant_NoMicroMips_1446;
    case clang::attr::NoMips16: return enum_constant_NoMips16_1447;
    case clang::attr::NoProfileFunction: return enum_constant_NoProfileFunction_1448;
    case clang::attr::NoRandomizeLayout: return enum_constant_NoRandomizeLayout_1449;
    case clang::attr::NoReturn: return enum_constant_NoReturn_1450;
    case clang::attr::NoSanitize: return enum_constant_NoSanitize_1451;
    case clang::attr::NoSpeculativeLoadHardening: return enum_constant_NoSpeculativeLoadHardening_1452;
    case clang::attr::NoSplitStack: return enum_constant_NoSplitStack_1453;
    case clang::attr::NoStackProtector: return enum_constant_NoStackProtector_1454;
    case clang::attr::NoThreadSafetyAnalysis: return enum_constant_NoThreadSafetyAnalysis_1455;
    case clang::attr::NoThrow: return enum_constant_NoThrow_1456;
    case clang::attr::NoUniqueAddress: return enum_constant_NoUniqueAddress_1457;
    case clang::attr::NoUwtable: return enum_constant_NoUwtable_1458;
    case clang::attr::NotTailCalled: return enum_constant_NotTailCalled_1459;
    case clang::attr::OMPAllocateDecl: return enum_constant_OMPAllocateDecl_1460;
    case clang::attr::OMPCaptureNoInit: return enum_constant_OMPCaptureNoInit_1461;
    case clang::attr::OMPDeclareTargetDecl: return enum_constant_OMPDeclareTargetDecl_1462;
    case clang::attr::OMPDeclareVariant: return enum_constant_OMPDeclareVariant_1463;
    case clang::attr::OMPThreadPrivateDecl: return enum_constant_OMPThreadPrivateDecl_1464;
    case clang::attr::OSConsumesThis: return enum_constant_OSConsumesThis_1465;
    case clang::attr::OSReturnsNotRetained: return enum_constant_OSReturnsNotRetained_1466;
    case clang::attr::OSReturnsRetained: return enum_constant_OSReturnsRetained_1467;
    case clang::attr::OSReturnsRetainedOnNonZero: return enum_constant_OSReturnsRetainedOnNonZero_1468;
    case clang::attr::OSReturnsRetainedOnZero: return enum_constant_OSReturnsRetainedOnZero_1469;
    case clang::attr::ObjCBridge: return enum_constant_ObjCBridge_1470;
    case clang::attr::ObjCBridgeMutable: return enum_constant_ObjCBridgeMutable_1471;
    case clang::attr::ObjCBridgeRelated: return enum_constant_ObjCBridgeRelated_1472;
    case clang::attr::ObjCException: return enum_constant_ObjCException_1473;
    case clang::attr::ObjCExplicitProtocolImpl: return enum_constant_ObjCExplicitProtocolImpl_1474;
    case clang::attr::ObjCExternallyRetained: return enum_constant_ObjCExternallyRetained_1475;
    case clang::attr::ObjCIndependentClass: return enum_constant_ObjCIndependentClass_1476;
    case clang::attr::ObjCMethodFamily: return enum_constant_ObjCMethodFamily_1477;
    case clang::attr::ObjCNSObject: return enum_constant_ObjCNSObject_1478;
    case clang::attr::ObjCPreciseLifetime: return enum_constant_ObjCPreciseLifetime_1479;
    case clang::attr::ObjCRequiresPropertyDefs: return enum_constant_ObjCRequiresPropertyDefs_1480;
    case clang::attr::ObjCRequiresSuper: return enum_constant_ObjCRequiresSuper_1481;
    case clang::attr::ObjCReturnsInnerPointer: return enum_constant_ObjCReturnsInnerPointer_1482;
    case clang::attr::ObjCRootClass: return enum_constant_ObjCRootClass_1483;
    case clang::attr::ObjCSubclassingRestricted: return enum_constant_ObjCSubclassingRestricted_1484;
    case clang::attr::OpenCLIntelReqdSubGroupSize: return enum_constant_OpenCLIntelReqdSubGroupSize_1485;
    case clang::attr::OpenCLKernel: return enum_constant_OpenCLKernel_1486;
    case clang::attr::OptimizeNone: return enum_constant_OptimizeNone_1487;
    case clang::attr::Override: return enum_constant_Override_1488;
    case clang::attr::Owner: return enum_constant_Owner_1489;
    case clang::attr::Ownership: return enum_constant_Ownership_1490;
    case clang::attr::Packed: return enum_constant_Packed_1491;
    case clang::attr::ParamTypestate: return enum_constant_ParamTypestate_1492;
    case clang::attr::PatchableFunctionEntry: return enum_constant_PatchableFunctionEntry_1493;
    case clang::attr::Pointer: return enum_constant_Pointer_1494;
    case clang::attr::PragmaClangBSSSection: return enum_constant_PragmaClangBSSSection_1495;
    case clang::attr::PragmaClangDataSection: return enum_constant_PragmaClangDataSection_1496;
    case clang::attr::PragmaClangRelroSection: return enum_constant_PragmaClangRelroSection_1497;
    case clang::attr::PragmaClangRodataSection: return enum_constant_PragmaClangRodataSection_1498;
    case clang::attr::PragmaClangTextSection: return enum_constant_PragmaClangTextSection_1499;
    case clang::attr::PreferredName: return enum_constant_PreferredName_1500;
    case clang::attr::PreferredType: return enum_constant_PreferredType_1501;
    case clang::attr::PtGuardedBy: return enum_constant_PtGuardedBy_1502;
    case clang::attr::PtGuardedVar: return enum_constant_PtGuardedVar_1503;
    case clang::attr::Pure: return enum_constant_Pure_1504;
    case clang::attr::RISCVInterrupt: return enum_constant_RISCVInterrupt_1505;
    case clang::attr::RandomizeLayout: return enum_constant_RandomizeLayout_1506;
    case clang::attr::ReadOnlyPlacement: return enum_constant_ReadOnlyPlacement_1507;
    case clang::attr::Reinitializes: return enum_constant_Reinitializes_1508;
    case clang::attr::ReleaseCapability: return enum_constant_ReleaseCapability_1509;
    case clang::attr::ReqdWorkGroupSize: return enum_constant_ReqdWorkGroupSize_1510;
    case clang::attr::RequiresCapability: return enum_constant_RequiresCapability_1511;
    case clang::attr::Restrict: return enum_constant_Restrict_1512;
    case clang::attr::Retain: return enum_constant_Retain_1513;
    case clang::attr::ReturnTypestate: return enum_constant_ReturnTypestate_1514;
    case clang::attr::ReturnsNonNull: return enum_constant_ReturnsNonNull_1515;
    case clang::attr::ReturnsTwice: return enum_constant_ReturnsTwice_1516;
    case clang::attr::SYCLKernel: return enum_constant_SYCLKernel_1517;
    case clang::attr::SYCLSpecialClass: return enum_constant_SYCLSpecialClass_1518;
    case clang::attr::ScopedLockable: return enum_constant_ScopedLockable_1519;
    case clang::attr::Section: return enum_constant_Section_1520;
    case clang::attr::SelectAny: return enum_constant_SelectAny_1521;
    case clang::attr::Sentinel: return enum_constant_Sentinel_1522;
    case clang::attr::SetTypestate: return enum_constant_SetTypestate_1523;
    case clang::attr::SharedTrylockFunction: return enum_constant_SharedTrylockFunction_1524;
    case clang::attr::SpeculativeLoadHardening: return enum_constant_SpeculativeLoadHardening_1525;
    case clang::attr::StandaloneDebug: return enum_constant_StandaloneDebug_1526;
    case clang::attr::StrictFP: return enum_constant_StrictFP_1527;
    case clang::attr::StrictGuardStackCheck: return enum_constant_StrictGuardStackCheck_1528;
    case clang::attr::SwiftAsync: return enum_constant_SwiftAsync_1529;
    case clang::attr::SwiftAsyncError: return enum_constant_SwiftAsyncError_1530;
    case clang::attr::SwiftAsyncName: return enum_constant_SwiftAsyncName_1531;
    case clang::attr::SwiftAttr: return enum_constant_SwiftAttr_1532;
    case clang::attr::SwiftBridge: return enum_constant_SwiftBridge_1533;
    case clang::attr::SwiftBridgedTypedef: return enum_constant_SwiftBridgedTypedef_1534;
    case clang::attr::SwiftError: return enum_constant_SwiftError_1535;
    case clang::attr::SwiftImportAsNonGeneric: return enum_constant_SwiftImportAsNonGeneric_1536;
    case clang::attr::SwiftImportPropertyAsAccessors: return enum_constant_SwiftImportPropertyAsAccessors_1537;
    case clang::attr::SwiftName: return enum_constant_SwiftName_1538;
    case clang::attr::SwiftNewType: return enum_constant_SwiftNewType_1539;
    case clang::attr::SwiftPrivate: return enum_constant_SwiftPrivate_1540;
    case clang::attr::TLSModel: return enum_constant_TLSModel_1541;
    case clang::attr::Target: return enum_constant_Target_1542;
    case clang::attr::TargetClones: return enum_constant_TargetClones_1543;
    case clang::attr::TargetVersion: return enum_constant_TargetVersion_1544;
    case clang::attr::TestTypestate: return enum_constant_TestTypestate_1545;
    case clang::attr::TransparentUnion: return enum_constant_TransparentUnion_1546;
    case clang::attr::TrivialABI: return enum_constant_TrivialABI_1547;
    case clang::attr::TryAcquireCapability: return enum_constant_TryAcquireCapability_1548;
    case clang::attr::TypeTagForDatatype: return enum_constant_TypeTagForDatatype_1549;
    case clang::attr::TypeVisibility: return enum_constant_TypeVisibility_1550;
    case clang::attr::Unavailable: return enum_constant_Unavailable_1551;
    case clang::attr::Uninitialized: return enum_constant_Uninitialized_1552;
    case clang::attr::UnsafeBufferUsage: return enum_constant_UnsafeBufferUsage_1553;
    case clang::attr::Unused: return enum_constant_Unused_1554;
    case clang::attr::Used: return enum_constant_Used_1555;
    case clang::attr::UsingIfExists: return enum_constant_UsingIfExists_1556;
    case clang::attr::Uuid: return enum_constant_Uuid_1557;
    case clang::attr::VecReturn: return enum_constant_VecReturn_1558;
    case clang::attr::VecTypeHint: return enum_constant_VecTypeHint_1559;
    case clang::attr::Visibility: return enum_constant_Visibility_1560;
    case clang::attr::WarnUnused: return enum_constant_WarnUnused_1561;
    case clang::attr::WarnUnusedResult: return enum_constant_WarnUnusedResult_1562;
    case clang::attr::Weak: return enum_constant_Weak_1563;
    case clang::attr::WeakImport: return enum_constant_WeakImport_1564;
    case clang::attr::WeakRef: return enum_constant_WeakRef_1565;
    case clang::attr::WebAssemblyExportName: return enum_constant_WebAssemblyExportName_1566;
    case clang::attr::WebAssemblyImportModule: return enum_constant_WebAssemblyImportModule_1567;
    case clang::attr::WebAssemblyImportName: return enum_constant_WebAssemblyImportName_1568;
    case clang::attr::WorkGroupSizeHint: return enum_constant_WorkGroupSizeHint_1569;
    case clang::attr::X86ForceAlignArgPointer: return enum_constant_X86ForceAlignArgPointer_1570;
    case clang::attr::XRayInstrument: return enum_constant_XRayInstrument_1571;
    case clang::attr::XRayLogArgs: return enum_constant_XRayLogArgs_1572;
    case clang::attr::ZeroCallUsedRegs: return enum_constant_ZeroCallUsedRegs_1573;
    case clang::attr::AbiTag: return enum_constant_AbiTag_1574;
    case clang::attr::Alias: return enum_constant_Alias_1575;
    case clang::attr::AlignValue: return enum_constant_AlignValue_1576;
    case clang::attr::BuiltinAlias: return enum_constant_BuiltinAlias_1577;
    case clang::attr::CalledOnce: return enum_constant_CalledOnce_1578;
    case clang::attr::IFunc: return enum_constant_IFunc_1579;
    case clang::attr::InitSeg: return enum_constant_InitSeg_1580;
    case clang::attr::LoaderUninitialized: return enum_constant_LoaderUninitialized_1581;
    case clang::attr::LoopHint: return enum_constant_LoopHint_1582;
    case clang::attr::Mode: return enum_constant_Mode_1583;
    case clang::attr::NoBuiltin: return enum_constant_NoBuiltin_1584;
    case clang::attr::NoEscape: return enum_constant_NoEscape_1585;
    case clang::attr::OMPCaptureKind: return enum_constant_OMPCaptureKind_1586;
    case clang::attr::OMPDeclareSimdDecl: return enum_constant_OMPDeclareSimdDecl_1587;
    case clang::attr::OMPReferencedVar: return enum_constant_OMPReferencedVar_1588;
    case clang::attr::ObjCBoxable: return enum_constant_ObjCBoxable_1589;
    case clang::attr::ObjCClassStub: return enum_constant_ObjCClassStub_1590;
    case clang::attr::ObjCDesignatedInitializer: return enum_constant_ObjCDesignatedInitializer_1591;
    case clang::attr::ObjCDirect: return enum_constant_ObjCDirect_1592;
    case clang::attr::ObjCDirectMembers: return enum_constant_ObjCDirectMembers_1593;
    case clang::attr::ObjCNonLazyClass: return enum_constant_ObjCNonLazyClass_1594;
    case clang::attr::ObjCNonRuntimeProtocol: return enum_constant_ObjCNonRuntimeProtocol_1595;
    case clang::attr::ObjCRuntimeName: return enum_constant_ObjCRuntimeName_1596;
    case clang::attr::ObjCRuntimeVisible: return enum_constant_ObjCRuntimeVisible_1597;
    case clang::attr::OpenCLAccess: return enum_constant_OpenCLAccess_1598;
    case clang::attr::Overloadable: return enum_constant_Overloadable_1599;
    case clang::attr::RenderScriptKernel: return enum_constant_RenderScriptKernel_1600;
    case clang::attr::SwiftObjCMembers: return enum_constant_SwiftObjCMembers_1601;
    case clang::attr::SwiftVersionedAddition: return enum_constant_SwiftVersionedAddition_1602;
    case clang::attr::SwiftVersionedRemoval: return enum_constant_SwiftVersionedRemoval_1603;
    case clang::attr::Thread: return enum_constant_Thread_1604;
    default: llvm::errs() << "clang::attr::Kind: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

Entity* DataModel::resolve(llvm::APFloatBase::Semantics e) {
  switch(e) {
    case llvm::APFloatBase::S_IEEEhalf: return enum_constant_S_IEEEhalf_1624;
    case llvm::APFloatBase::S_BFloat: return enum_constant_S_BFloat_1625;
    case llvm::APFloatBase::S_IEEEsingle: return enum_constant_S_IEEEsingle_1626;
    case llvm::APFloatBase::S_IEEEdouble: return enum_constant_S_IEEEdouble_1627;
    case llvm::APFloatBase::S_IEEEquad: return enum_constant_S_IEEEquad_1628;
    case llvm::APFloatBase::S_PPCDoubleDouble: return enum_constant_S_PPCDoubleDouble_1629;
    case llvm::APFloatBase::S_Float8E5M2: return enum_constant_S_Float8E5M2_1630;
    case llvm::APFloatBase::S_Float8E5M2FNUZ: return enum_constant_S_Float8E5M2FNUZ_1631;
    case llvm::APFloatBase::S_Float8E4M3FN: return enum_constant_S_Float8E4M3FN_1632;
    case llvm::APFloatBase::S_Float8E4M3FNUZ: return enum_constant_S_Float8E4M3FNUZ_1633;
    case llvm::APFloatBase::S_Float8E4M3B11FNUZ: return enum_constant_S_Float8E4M3B11FNUZ_1634;
    case llvm::APFloatBase::S_FloatTF32: return enum_constant_S_FloatTF32_1635;
    case llvm::APFloatBase::S_x87DoubleExtended: return enum_constant_S_x87DoubleExtended_1636;
    default: llvm::errs() << "llvm::APFloatBase::Semantics: Unexpected enum value: " << static_cast<unsigned int>(e) << "\n";
  }
  return nullptr;
}

////   END ARBORETUM GENERATED CODE ////
} // namespace arboretum
